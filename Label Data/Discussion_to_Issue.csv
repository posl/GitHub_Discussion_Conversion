,URL,Created,Comment_removeclass,Comment_time,Post_Index,Check_Point,Cat
0,https://github.com/avajs/ava/discussions/2665,2021-01-27T12:22:49Z,"I think this is an issue for https://github.com/concordancejs/concordance/ which generates the diffs. Would you mind opening it there?
Some questions we'd need to resolve:

How would we indicate that lines are elided? Would we indicate how many?
What if there are multiple sections that contain changes, but other sections are the same?
Would you want the diff to ""give up"" when there are too many changes, even after eliding? After how many lines should that kick in?

Perhaps some of those things could be configurable on a a per-assertion basis but we'd need to support it in Concordance first.
(I'm closing this issue for housekeeping purposes, but let's keep the conversation going.)",2021-01-31T15:18:58Z,1,1.0,(II) Unrelated Repository
1,https://github.com/avajs/ava/discussions/2665,2021-01-27T12:22:49Z,"
How would we indicate that lines are elided? Would we indicate how many?
What if there are multiple sections that contain changes, but other sections are the same?

Here's an example of how jest outputs diffs:

As you can see, it uses a standard syntax for eliding unchanged lines from a diff: @@ -32865,6 +32896,7 @@ (even highlight.js understands this format!).
This format seems to be called unified diff format.

Would you want the diff to ""give up"" when there are too many changes, even after eliding?

No. While it's true that the biggest use-case for this is when two huge files are mostly similar, except for one or two small differences, I still want the output to contain all information for the difference. If there's so much diff that the output becomes long, so be it. I feel it would be confusing/something unpredicted if it wouldn't output the whole diff, even with a message.

After how many lines should that kick in?

It looks like by default, jest prints 5 lines above and below each diff block, which is a default setting I never thought of changing :)
I took a look at the GNU diff tool (man diff). Its default is 3 lines of ""context"", but personally I like having 5 lines of context. (I think this could/should become a setting anyway.)

I think this is an issue for https://github.com/concordancejs/concordance/ which generates the diffs. Would you mind opening it there?
(I'm closing this issue for housekeeping purposes, but let's keep the conversation going.)

Should we keep the conversation going here and create an issue in concordance once we've found a good solution, or should I create an issue right away?",2021-02-02T12:06:15Z,2,,(II) Unrelated Repository
2,https://github.com/twbs/bootstrap/discussions/31812,2020-10-01T18:54:21Z,Heyo! This is a great idea. Had a moment of inspiration based on this and some other sandboxing I‚Äôd done in the past. I‚Äôve opened #31813 to start playing around.,2020-10-01T21:06:10Z,1,1.0,(III) Enhancement
3,https://github.com/twbs/bootstrap/discussions/31618,2020-09-09T15:54:51Z,"nice catch @coliff üëç
IMO it should be an issue",2020-09-09T16:39:10Z,1,,(IV) Clarification Request
4,https://github.com/twbs/bootstrap/discussions/31618,2020-09-09T15:54:51Z,I just went to open an issue now and see that one was opened yesterday (#31616) - which looks like it has a PR (currently unmerged) #31115,2020-09-10T06:24:20Z,2,,(IV) Clarification Request
5,https://github.com/twbs/bootstrap/discussions/31618,2020-09-09T15:54:51Z,@coliff IIRC the issue was fixed in #30928. Please try the latest main branch to confirm.,2020-09-10T08:59:14Z,3,,(IV) Clarification Request
6,https://github.com/twbs/bootstrap/discussions/31618,2020-09-09T15:54:51Z,"thanks @XhmikosR  - just tested this with the main branch JS now and it's hugely improved... but there's still a slight flicker when you hover over the edges of the paths of the SVG. I made a new CodePen to show. (it flickers when you scroll off or on to the twitter bird within the square)
https://codepen.io/coliff/pen/wvGmpaE",2020-09-10T10:16:31Z,4,,(IV) Clarification Request
7,https://github.com/twbs/bootstrap/discussions/31618,2020-09-09T15:54:51Z,"True, not sure what the cause is, though. Maybe @tkrotoff has any ideas.",2020-09-14T06:21:36Z,5,,(IV) Clarification Request
8,https://github.com/twbs/bootstrap/discussions/31618,2020-09-09T15:54:51Z,"Also, better make a new issue. Discussions are not meant to be used for such things.",2020-09-14T06:27:22Z,6,,(IV) Clarification Request
9,https://github.com/twbs/bootstrap/discussions/31618,2020-09-09T15:54:51Z,"@XhmikosR @coliff I don't think there is a solution here.
If you remove everything Bootstrap related and just keep regular title=""..."" you get the same issue: https://codepen.io/tkrotoff/pen/XWdYgVP
It seems like when hovering the SVG background it creates a tooltip, then when hovering over SVG <path> it destroys previous tooltip and creates another => flickering


Chrome 85: ""bug""
Firefox 80: tooltip (title=""..."") works differently so the ""bug"" is not applicable
WebKit 2.28.4 (via GNOME Web 3.28.6) : no ""bug"", it works fine
",2020-09-14T08:17:40Z,7,,(IV) Clarification Request
10,https://github.com/twbs/bootstrap/discussions/31618,2020-09-09T15:54:51Z,"i'll hazard a guess that adding something like pointer-events:none to the SVG will make it ""transparent"" to mouse events and allow the tooltip stuff to work correctly",2020-09-14T11:55:37Z,8,,(IV) Clarification Request
11,https://github.com/twbs/bootstrap/discussions/31618,2020-09-09T15:54:51Z,Please make a new issue. We can't track discussions.,2020-09-14T12:04:45Z,9,,(IV) Clarification Request
12,https://github.com/twbs/bootstrap/discussions/31618,2020-09-09T15:54:51Z,Issue: #31646,2020-09-14T19:33:20Z,10,1.0,(IV) Clarification Request
13,https://github.com/twbs/bootstrap/discussions/31618,2020-09-09T15:54:51Z,Locking this since the issue is now open. Please punt further comments there :).,2020-09-14T20:48:06Z,11,,(IV) Clarification Request
14,https://github.com/twbs/bootstrap/discussions/30870,2020-05-20T00:55:04Z,"Fixed! Next time, open an issue for stuff like that please :).",2020-05-21T05:24:53Z,1,1.0,Others
15,https://github.com/sequelize/sequelize/discussions/14131,2022-02-17T15:44:32Z,Could you open a new bug report with a SSCCE that reproduces the bug?,2022-02-25T11:32:33Z,1,1.0,(I) Reporting a Bug
16,https://github.com/cypress-io/cypress/discussions/19520,2022-01-03T15:18:56Z,"Narrowing the elements down like in https://docs.cypress.io/api/commands/contains#Single-Element works:
cy.get('.area').contains(new RegExp('^text$', 'm')
However then we loose the retrying of getting the .area and i'd like to avoid this with a single .contains",2022-01-04T11:44:32Z,1,,(IV) Clarification Request
17,https://github.com/cypress-io/cypress/discussions/19520,2022-01-03T15:18:56Z,I've opened an issue with an example to show this: #19540,2022-01-04T12:49:04Z,2,1.0,(IV) Clarification Request
18,https://github.com/cypress-io/cypress/discussions/16155,2021-04-23T05:18:29Z,"You can execute these calls in the plugin file. You can find similar examples in the ""Dynamic ..."" recipes in https://github.com/cypress-io/cypress-example-recipes#fundamentals
I probably should add a recipe showing exactly how to do so, if interested, could you open an issue in that repo?",2021-04-26T15:44:03Z,1,1.0,(II) Unrelated Repository
19,https://github.com/cypress-io/cypress/discussions/14292,2020-12-23T11:20:57Z,"Hi, can someone help, please? :)",2021-01-13T08:15:11Z,1,,(I) Reporting a Bug
20,https://github.com/cypress-io/cypress/discussions/14292,2020-12-23T11:20:57Z,"@TossExecutor, try next construction:
",2021-01-13T08:56:46Z,2,,(I) Reporting a Bug
21,https://github.com/cypress-io/cypress/discussions/14292,2020-12-23T11:20:57Z,"Setting --env seems not to be possible for nested keys in cypress in accordance to documentation.
You can try to use next construction. It's single line, but I think you would be able to handle how it works.


We export into DB_CONFIG variable json object
We pass this object into cypress open
",2021-01-14T04:04:35Z,3,,(I) Reporting a Bug
22,https://github.com/cypress-io/cypress/discussions/14292,2020-12-23T11:20:57Z,"Unfortunately, those things won't work on a windows pc and Powershell. Could it be that Powershell is not supported in a way for cypress?",2021-01-20T16:23:46Z,4,,(I) Reporting a Bug
23,https://github.com/cypress-io/cypress/discussions/14292,2020-12-23T11:20:57Z,"
‚Ä¶",2021-01-20T16:43:54Z,5,,(I) Reporting a Bug
24,https://github.com/cypress-io/cypress/discussions/14292,2020-12-23T11:20:57Z,Seems your shell does not interpolate variables inside npm run scripts. I have no idea what it does or why it does not work as other shells. I have recorded a video showing my experience with passing the environment variables: https://youtu.be/jAiYePsxPl4 At the end I suggest using the plugin file to grab the environment variables and avoid relying on the shell.,2021-01-27T15:09:52Z,6,,(I) Reporting a Bug
25,https://github.com/cypress-io/cypress/discussions/14292,2020-12-23T11:20:57Z,"Hi @bahmutov I have watched your video and it was very informative however I am still having issues.
This is my cypress.json file and I am looking to set the values inside of db within the command line. They just seem to get set as a string no matter what I try. Do you have any advice?
",2021-03-04T15:55:31Z,7,,(I) Reporting a Bug
26,https://github.com/cypress-io/cypress/discussions/14292,2020-12-23T11:20:57Z,"I have opened an issue #15323 about parsing JSON objects in --env CLI option, but for now the workaround: use a separate CYPRESS_ variable instead of --env option. For example
",2021-03-04T16:48:03Z,8,1.0,(I) Reporting a Bug
27,https://github.com/webdriverio/webdriverio/discussions/7650,2021-11-04T17:00:44Z,"

setValue doesn't clear the value first, it just types the given text one keystroke at a time


Not quite, setValue is the combination out of clearValue and addValue.
Can you provide a fiddle example where we can test some workarounds? I am happy to improve the addValue command to better work with these framework inputs.
I would also make sense to create an issue in the React project to make the team aware that their input elements aren't compatible with WebDriver based automation tools.",2021-11-05T10:53:35Z,1,1.0,(III) Enhancement
28,https://github.com/webdriverio/webdriverio/discussions/7650,2021-11-04T17:00:44Z,"To reiterate, I think we should concretely specify the behavior of setValue as one of the following options, and only use clearValue if it's compatible with the specified behavior:
setValue Option 1

focus the input
select all text (seems like we have to do this by sending a browser script?)
send backspace key clear the text
without blurring the input, type the new value
blur the input

setValue Option 2 (less preferable)

focus the input
without blurring the input, set the input's value in a way that triggers an event where e.target.value will be the new value
blur the input
",2021-11-08T21:59:50Z,2,,(III) Enhancement
29,https://github.com/webdriverio/webdriverio/discussions/7650,2021-11-04T17:00:44Z,"@jedwards1211 Thanks for the feedback, let's see what the spec writers suggest in this case.",2021-11-09T10:00:00Z,3,,(III) Enhancement
30,https://github.com/webdriverio/webdriverio/discussions/7650,2021-11-04T17:00:44Z,"@christian-bromann I had another thought about this...
A real user changing an input value would do something like

Select all text with Ctrl/Command-A
Select all text with the mouse cursor
Move the cursor to the end and then Ctrl-Backspace
etc.

Some application code could have key or selection listeners that react to these actions.  Imagine that there is a bug in one of those event listeners.  If the test code doesn't trigger those events, the tests would pass, but real users would experience those bugs.
But if test code realistically emulates at least one of the things a real user would do, it would be more likely to catch those bugs.  This would be an added benefit on top of not running into problems with React controlled inputs.
So to me, philosophically, even if webdriver implementations are fixed to fire the change event during the unfocusing steps, it's not the best way to change an input value for testing anyway.  What do you think?",2021-11-10T19:32:51Z,4,,(III) Enhancement
31,https://github.com/webdriverio/webdriverio/discussions/7650,2021-11-04T17:00:44Z,"The following code I came up with should do the magic for everyone

};
Above method will clear the input value and now you can use the  setValue("" "") to set a new value",2022-03-18T15:01:55Z,5,,(III) Enhancement
32,https://github.com/webdriverio/webdriverio/discussions/7871,2022-01-03T18:32:13Z,Can you file an issue for this? It got introduced with the latest Chrome release.,2022-01-03T18:38:27Z,1,1.0,(I) Reporting a Bug
33,https://github.com/eslint/eslint/discussions/14684,2021-06-08T20:55:44Z,Go ahead and open a new issue. Issues are automatically closed when they are not addressed and in that case the original author stopped responding.,2021-06-09T01:01:41Z,1,,(III) Enhancement
34,https://github.com/eslint/eslint/discussions/14669,2021-06-04T11:45:19Z,"you can just use eslint-disable. :)
it sounds a reasonable enhancement to ignore these cases by default (or behind an option). can you file an issue, thanks!",2021-06-07T11:27:00Z,1,1.0,(III) Enhancement
35,https://github.com/eslint/eslint/discussions/14235,2021-03-19T11:39:59Z,"Hi @kungfooman!

But ESLint is throwing errors and the suggested change (preferring lower case object) breaks VSCode/TypeScript

Can you share those errors?",2021-03-19T21:26:44Z,1,1.0,(II) Unrelated Repository
36,https://github.com/eslint/eslint/discussions/14235,2021-03-19T11:39:59Z,"The error is reported by a third-party rule jsdoc/check-types.
You can open an issue in the plugin's repository:
https://github.com/gajus/eslint-plugin-jsdoc",2021-03-20T11:29:04Z,2,1.0,(II) Unrelated Repository
37,https://github.com/eslint/eslint/discussions/14175,2021-03-04T12:55:46Z,"Hi @tlgb!
This is only indirectly related to eslint. The sorting logic is in a third-party rule react/jsx-sort-props.
You can open an issue in the plugin's repository:
https://github.com/yannickcr/eslint-plugin-react",2021-03-04T13:21:06Z,1,1.0,(II) Unrelated Repository
38,https://github.com/eslint/eslint/discussions/14068,2021-02-04T21:41:34Z,"Turns out this is probably a bug with typescript-eslint/parser, I'll open an issue there and follow up with them.",2021-02-04T22:17:00Z,1,1.0,(II) Unrelated Repository
39,https://github.com/badges/shields/discussions/5943,2020-12-13T17:56:33Z,"At the moment I don't think so. If I recall correctly the entire input is utilized as a single label within the graphql query so any attempts to specify multiple labels for the route parameter would just end up as a long/odd singular label.
I think it'd be reasonable to try to support this, though figuring out a good way of handling the badge label would be tricky with an open ended set of input GH labels",2020-12-13T22:59:03Z,1,,(III) Enhancement
40,https://github.com/badges/shields/discussions/5943,2020-12-13T17:56:33Z,"I am not acquainted with GitHub API (could have a look at it, I guess) and I'll assume that the limitation could come from there.
That said, if they allow filtering via querystring then it makes little sense that they wouldn't support it too.
If I source some time (ü§û) I'll have a look around.",2020-12-14T05:59:51Z,2,,(III) Enhancement
41,https://github.com/badges/shields/discussions/5943,2020-12-13T17:56:33Z,"It's a GraphQL query using the v4 API:

I'm not sure how that could best be mapped to an AND type filter on the labels off hand either",2020-12-14T18:11:12Z,3,,(III) Enhancement
42,https://github.com/badges/shields/discussions/5943,2020-12-13T17:56:33Z,"I appreciate I'm scope-creeping this a bit, but here's a bigger idea..
In the github front-end, it is possible to construct fairly nuanced issue/PR queries. For example:

is:open is:issue label:core label:bug author:app/sentry-io - open issues with the labels ""core"" and ""bug"" opened by sentry-io bot: https://github.com/badges/shields/issues?q=is%3Aopen+is%3Aissue+label%3Acore+label%3Abug+author%3Aapp%2Fsentry-io
is:pr is:closed label:npm-package review:approved author:chris48s - closed PRs labelled ""npm-package"" submitted by user ""chris48s""  with one or more approving reviews: https://github.com/badges/shields/pulls?q=is%3Apr+is%3Aclosed+label%3Anpm-package+review%3Aapproved+author%3Achris48s

If we're going to go down the route of extending these badges to allow more advanced queries, I think the ideal solution would actually be if we supported that same query syntax in its entirity. Then users can build a query through the GH frontend and once they're happy with it, pass the query to a badge URL in a querystring. One of the nice things about the Github V4 API (which didn't exist when these badges were first designed) is we can actually use that syntax directly in a GraphQL query. So the queries above translate to:

and

I think rather than gradually implement that syntax one feature request at a time, how about we implement one badge:
Github Issue (with arbitrary query): /github/issue-query?q=...
..and then we make our existing random mashup of github issue/PR variant badges redirects to preset queries on that general badge but we say ""no more presets"". Then any arbitrary query you can make through the GH builder can be a badge, we put this to bed once and for all and we can collapse this mess.

Thoughts?",2020-12-14T20:54:43Z,4,,(III) Enhancement
43,https://github.com/badges/shields/discussions/5943,2020-12-13T17:56:33Z,"@JFQueralt The corresponding graphql query for
https://github.com/TheIOFoundation/ProjectLockdown/issues?q=is%3Aopen+is%3Aissue+label%3A%22Need%3A+Position%22+label%3A%22Stage%3A+Ready%22
would be

@calebcartwright

Do the user friendly queries always map nicely 1:1 with their corresponding graphql queries?

That is a good question. As far as I'm aware, yes but unfortunately the docs are not totally clear so we should test. I'd be surprised if there is any divergence though.

What should the story with the badge labels be on the new badges

For the existing badges, we should retain the same labels. I think for the ""arbitrary search query"" badge I think we just have to give it a generic label like ""query"" or ""search"" and leave it to the user to pass a suitable ?label= arg. I don't think we can attempt to generically parse something like is:open is:issue label:core label:bug author:app/sentry-io into a useful label.

Would our redirectors need to tack on a ?label query param (conditionally to avoid stomping any already custom labels) to the new route?

Yes. I'd envisage that adding a ?label= would be part of the redirect. Another thing we could do is instead of changing the existing ones to a redirect would be to just have one shared fetch() function and simplify the code under the hood but keep the existing special cases serving a badge directly without issueing a redirect if we wanted (but still not add more special-cases).

Does this have any potential implications on our token query hits/rate limiting?

As long as we only return the count, it is a single node query so one rate limit point regardless of the query.",2020-12-15T20:19:53Z,5,,(III) Enhancement
44,https://github.com/badges/shields/discussions/5943,2020-12-13T17:56:33Z,"
it always impresses me how much of this knowledge you seem to keep in your head

üìö I cheated and read the docs üòÜ
I've made an issue for this based on the discussion: #5948",2020-12-16T19:57:40Z,6,1.0,(III) Enhancement
45,https://github.com/badges/shields/discussions/5943,2020-12-13T17:56:33Z,"We've now deployed the generic issue search badge so you can now make this badge (and many others) using a custom query:
 - https://img.shields.io/github/issues-search/TheIOFoundation/ProjectLockdown?query=is%3Aopen%20is%3Aissue%20label%3A%22Need%3A%20Position%22%20label%3A%22Stage%3A%20Ready%22
to customise the label:
 - https://img.shields.io/github/issues-search/TheIOFoundation/ProjectLockdown?query=is%3Aopen%20is%3Aissue%20label%3A%22Need%3A%20Position%22%20label%3A%22Stage%3A%20Ready%22&label=custom%20label
so I'm going to mark this as answered",2020-12-26T14:36:16Z,7,,(III) Enhancement
46,https://github.com/badges/shields/discussions/5943,2020-12-13T17:56:33Z,"Thanks for that!
I am testing it and it works like a charm. For reference, it works even if the labels have UTF emojis on them (which was my current concern after we ""beautified"" them these past days.
Sample:
https://github.com/TheIOFoundation/ProjectLockdown/issues?q=is%3Aopen+is%3Aissue+label%3A%22%F0%9F%96%96+Need%3A+Position%22

Truly appreciated, this is going to be of great help.",2021-01-11T17:08:12Z,8,,(III) Enhancement
47,https://github.com/badges/shields/discussions/5321,2020-07-15T21:17:20Z,A new development: sideway/joi#2411,2020-07-20T15:45:57Z,1,,(III) Enhancement
48,https://github.com/badges/shields/discussions/5321,2020-07-15T21:17:20Z,"There's an interesting chain of dependencies here.
We depend on joi-extension-semver (which needs to be updated to use joi instead of @hapi/joi in order for us to move), but joi-extension-semver depends on @types/hapi__joi which needs updating before we can do that.
Looks like DefinitelyTyped/DefinitelyTyped#46241 is the first domino that needs to fall so I've subscribed to updates on that PR.",2020-07-29T18:20:51Z,2,,(III) Enhancement
49,https://github.com/badges/shields/discussions/5321,2020-07-15T21:17:20Z,"I think now as of version 17.2, Joi now distributes TS types in the package so the fact that DefinitelyTyped/DefinitelyTyped#46241 didn't happen now doesn't matter, which then in-turn unblocks all this ü§û
I'll have a look at it...",2020-09-28T19:05:03Z,3,,(III) Enhancement
50,https://github.com/badges/shields/discussions/5321,2020-07-15T21:17:20Z,maybe this should have been an issue not a discussion. I sort of want to be able to close it now,2020-09-29T19:23:06Z,4,1.0,(III) Enhancement
51,https://github.com/KaTeX/KaTeX/discussions/2616,2020-10-28T07:30:47Z,This will require code changes to the auto-render extension.  Can you file an issue for this?,2020-12-11T22:16:17Z,1,1.0,(III) Enhancement
52,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,"I don't follow, are you getting an error when you are trying to import from Swipper 7?
For example:

or
",2021-09-17T08:15:52Z,1,,(III) Enhancement
53,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,,2021-09-17T14:39:14Z,2,,(III) Enhancement
54,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,"Shouldn't it be?
",2021-09-17T15:08:46Z,3,,(III) Enhancement
55,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,"No, that comes directly from their docs and the react component inherits swiper core. At least thats my understanding.",2021-09-17T16:10:52Z,4,,(III) Enhancement
56,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,I still don't understand what the problem here is.,2021-09-17T17:30:03Z,5,,(III) Enhancement
57,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,"It can‚Äôt find the module, app breaks. I have to use version 6 for it to work. It looks like meteor can‚Äôt use ESM packages. I‚Äôll setup a meteor app only loading that component.",2021-09-17T17:49:12Z,6,,(III) Enhancement
58,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,"here is the repo with version 7
Server

Client Side
",2021-09-17T19:18:54Z,7,,(III) Enhancement
59,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,"OK, I see now!
Yeah, that is indeed not working. Right now workaround would be to import from the files directly like this:

But that is only a stop gap solution.
@zodern @renanccastro @filipenevola
The issue here is that in package.json the exports are defined under exports prop, in this case like this:
",2021-09-18T08:31:07Z,8,,(III) Enhancement
60,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,"Even TypeScript barely just added support for recognizing package.json exports fields. Meteor's turn now.
The only solution right now is to import the files directly until Meteor adds support for it as well.
Keep one thing in mind about this workaround though: importing files directly will work in Meteor, but will fail in Node apps, or in Webpack which also follows the latest Node ESM spec. If you have some code in package A, for example, and it imports files directly from some package B, this will work in Meteor, but it will throw an error in Node or Webpack apps.",2021-10-04T04:49:57Z,9,,(III) Enhancement
61,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,This is a duplicate of #10906,2021-10-06T00:48:37Z,10,,(III) Enhancement
62,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,"Some notes from me digging around this:
Babel plans to become ESM package in Babel 8: https://babeljs.io/docs/en/roadmap#babel-8
There is this esm package which should make things work: https://www.npmjs.com/package/esm
But Node should supporting this already: https://nodejs.org/docs/latest-v14.x/api/esm.html",2021-10-06T11:25:47Z,11,,(III) Enhancement
63,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,Is this something that only needs an upstream (upcoming) update of TypeScript?,2021-10-25T09:07:15Z,12,,(III) Enhancement
64,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,"I don't think that will be it. I think the problem here for me is to pin the issue down. Meteor already supports what is commonly known as JavaScript modules.  What we are talking about here is a new feature which allows developers to specify their exports under export param in package.json which we can't process here. Given that we have special handling for things like inline imports, maybe we need to update other parts as well. Any thoughts @zodern @renanccastro ?",2021-10-25T13:55:12Z,13,,(III) Enhancement
65,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,"Here is the relevant docs from Node.js: https://nodejs.org/api/packages.html#packages_exports
TypeScript is implementing this in 4.5: https://devblogs.microsoft.com/typescript/announcing-typescript-4-5-beta/#packagejson-exports-imports-and-self-referencing",2021-11-19T14:21:14Z,14,,(III) Enhancement
66,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,"I just ran into this issue, specifically the desire for export conditions (see this Node documentation). I'm using the solid-js package, which offers a regular main entry point, but also uses exports to define specific exports when in ""development"" mode with additional debugging code.
So when implementing support for exports, it'd be really sweet for meteor run to enable the ""development"" condition, while meteor build would not.",2021-12-31T19:29:25Z,15,,(III) Enhancement
67,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,Found a related issue in Reify with comment from @benjamn : benjamn/reify#329,2022-02-13T07:49:41Z,16,,(III) Enhancement
68,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,"
There is this esm package which should make things work: https://www.npmjs.com/package/esm

The esm package is out of date and does not support Node ESM spec, so it will fail to import various Node ESM packages from node_modules.

Node should supporting this already: https://nodejs.org/docs/latest-v14.x/api/esm.html

Node supports it, but code in Meteor that passes through Meteor's build system ecmascript by @benjamn won't work with Node ESM format. Meteor needs to

update ecmascript to support it (reify issue in the previous comment), and
make it easy to not use ecmascript on the server so that native Node ESM can be used instead

No matter what, if we're bundling code for the client, then we need to support Node ESM format to be compatible with packages that are moving forward to Node ESM.
Package authors should avoid the exports field of package.json so as to be compatible with both TypeScript and Meteor.",2022-02-17T20:00:08Z,17,,(III) Enhancement
69,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,"In my opinion, this should not be a GitHub discussion, but an issue. This is fairly critical, not a discussion topic for debate, and as more packages become Node ESM-flavored on npm, Meteor is going to lose compatibility with those packages.
At some point, the lack of support will be considered a bug, and it should be acted on in order to keep Meteor relevant.",2022-03-16T02:54:53Z,18,1.0,(III) Enhancement
70,https://github.com/meteor/meteor/discussions/11727,2021-09-16T19:06:26Z,"Hi, you might want to take a look at ""file-type"", this is an example of a package that do not work with Meteor: https://www.npmjs.com/package/file-type
However to be completely fair, many packages may have weird exports and are not supported by many bundlers. For instance, @apollo/client doesn't load correctly in Next.js, and other Webpack 5-based bundlers, when it's a dependency of another ESM modules (like a package that exposes some hooks based on Apollo), because it doesn't have exports map.",2022-03-29T07:12:52Z,19,,(III) Enhancement
71,https://github.com/meteor/meteor/discussions/11769,2021-11-17T10:37:49Z,"I don't think we show this message without any explanation or error detail.
Did you reproduce it?
It seems more an issue (and maybe an invalid one) than a feature request.
I think you can convert to an issue and ask a reproduction. In case you can't reproduce with a simple test using an invalid import.",2021-11-17T17:19:50Z,1,1.0,(IV) Clarification Request
72,https://github.com/babel/babel/discussions/13912,2021-11-01T20:11:23Z,"Can you update browserslists to the latest version? The browserslists comes with a node-releases package which tells browserslists the currently known node versions.
My guess here is that if node v14 works for you, then the node-releases may be out-of-dated and browserslists thinks that node >= 16.0.0 is unknown node versions, which causes Babel fallbacks to applying all transforms.
You can also add debug: true to the preset-env options, which will print the resolved browsers targets.",2021-11-01T20:25:10Z,1,,(IV) Clarification Request
73,https://github.com/babel/babel/discussions/13912,2021-11-01T20:11:23Z,I opened #13913 to track this because I can reproduce it in our repo.,2021-11-01T20:31:31Z,2,1.0,(IV) Clarification Request
74,https://github.com/babel/babel/discussions/13912,2021-11-01T20:11:23Z,"@JLHwung Is browserslists a dependency of Babel? yarn list browserslists reports nothing in my repo. I've tried updating all my Babel deps to their latest versions but I still can reproduce the error.
Running it with debug: true for node>=16.0.0 reports this:

And node>=14.0.0 reports this:

So I think you're right: Babel doesn't seem to recognize node>=16.0.0 as a valid target and it's adding a lot of unnecessary plugins.",2021-11-01T20:35:07Z,3,,(IV) Clarification Request
75,https://github.com/babel/babel/discussions/13912,2021-11-01T20:11:23Z,@JLHwung I tried re-installing dependencies and it seems to be fixed now. node>=16.0.0 is recognized by Babel as a valid target. Thanks for your help!,2021-11-01T20:47:17Z,4,,(IV) Clarification Request
76,https://github.com/babel/babel/discussions/11785,2020-07-03T09:34:59Z,"@sbusch Thanks for the detailed repro! This is certainly a Babel bug. I have come up with a minimal REPL example
Though your example is syntactically correct, as a workaround, you can change First to a class method.

Unfortunately GitHub does not support converting discussion into a bug report. Can you file a bug report? Thanks!",2020-07-03T20:46:45Z,1,1.0,(I) Reporting a Bug
77,https://github.com/appium/appium/discussions/15850,2021-09-15T05:15:36Z,feature requests should go to the issue tracker. general usage questions can go here.,2021-09-15T05:17:15Z,1,1.0,(III) Enhancement
78,https://github.com/appium/appium/discussions/15504,2021-06-15T05:14:02Z,"Do you want to say client-side issue?
So, the client should raise an error if some capabilities are not for iOS then.
Please create an issue in the proper client repository.
The decision will depend on the client's design.",2021-06-16T22:54:45Z,1,1.0,(II) Unrelated Repository
79,https://github.com/appium/appium/discussions/15447,2021-06-01T08:08:23Z,"i checked the page source , the element  below  can be  found  , which indicate that element exist
",2021-06-01T09:19:39Z,1,,(IV) Clarification Request
80,https://github.com/appium/appium/discussions/15447,2021-06-01T08:08:23Z,"Please make this an issue instead, and attach the requested logs, etc.",2021-06-01T17:39:32Z,2,1.0,(IV) Clarification Request
81,https://github.com/Automattic/mongoose/discussions/10516,2021-07-30T09:29:35Z,Please open an issue and follow the issue template. It looks like you might have mixed versions of Mongoose and MongoDB.,2021-07-30T15:51:56Z,1,1.0,(IV) Clarification Request
82,https://github.com/Automattic/mongoose/discussions/10516,2021-07-30T09:29:35Z,"This seems like mongodb / @types/mongodb 4.x is installed, try downgrading & pinning to 3.6.x",2021-08-23T10:32:31Z,2,,(IV) Clarification Request
83,https://github.com/Automattic/mongoose/discussions/10013,2021-03-11T13:50:09Z,"The approach you specified will make sure there aren't multiple Category documents that have the same locale, name, but one Category document can still have duplicate locale, name. Try mongoose-unique-array, and open an issue on that repo with a repro script if that doesn't work üëç",2021-03-18T19:05:38Z,1,1.0,(II) Unrelated Repository
84,https://github.com/chartjs/Chart.js/discussions/10050,2022-01-06T05:24:33Z,"This will have to be added to the typings file so this will be fixed before next release, (I should have time tonight to fix it)",2022-01-06T10:37:05Z,1,,(IV) Clarification Request
85,https://github.com/chartjs/Chart.js/discussions/10050,2022-01-06T05:24:33Z,Thanks @LeeLenaleee . Do you want me to create an issue from this discussion for tracking the change?,2022-01-06T20:18:32Z,2,1.0,(IV) Clarification Request
86,https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/59536,2022-03-29T09:45:17Z,"Thanks for the discussion about ""three"", some useful links for everyone:

npm
DT
Related discussions

Pinging the DT module owners: @joshuaellis, @Methuselah96.",2022-03-29T09:45:18Z,1,,(II) Unrelated Repository
87,https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/59536,2022-03-29T09:45:17Z,Please open this issue // create a PR in three-ts-types,2022-03-29T10:33:11Z,2,1.0,(II) Unrelated Repository
88,https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/58464,2022-01-27T05:37:06Z,"Thanks for the discussion about ""react"", some useful links for everyone:

npm
DT
Related discussions

Pinging the DT module owners: @johnnyreilly, @bbenezech, @pzavolinsky, @ericanderson, @DovydasNavickas, @theruther4d, @guilhermehubner, @ferdaber, @jrakotoharisoa, @pascaloliv, @Hotell, @franklixuefei, @Jessidhia, @saranshkataria, @lukyth, @eps1lon, @zieka, @dancerphil, @dimitropoulos, @disjukr, @vhfmag, @hellatan, @priyanshurav.",2022-01-27T05:37:10Z,1,,(IV) Clarification Request
89,https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/58464,2022-01-27T05:37:06Z,"Thanks for opening the issue. This actually hides quite a lot of bugs in this repository.
This is currently caused by our bivariance hack. But I can't reproduce why we needed it here. Or maybe it was only required for older TypeScript version.
I opened #58936 with a fix to get some more eyes on it. Maybe somebody remembers if we still need the bivariance hack.",2022-02-23T19:19:55Z,2,1.0,(IV) Clarification Request
90,https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/58395,2022-01-24T09:32:32Z,"Thanks for the discussion about ""ember"", some useful links for everyone:

npm
DT
Related discussions

Pinging the DT module owners: @chriskrycho, @jamescdavis, @dfreeman.",2022-01-24T09:32:33Z,1,,(II) Unrelated Repository
91,https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/58395,2022-01-24T09:32:32Z,"@mydea can you move this over to typed-ember/ember-cli-typescript, please? It's much easier for us to deal with issues there. Thanks.",2022-01-24T16:32:24Z,2,1.0,(II) Unrelated Repository
92,https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/58395,2022-01-24T09:32:32Z,Sure thing!,2022-01-25T11:59:08Z,3,,(II) Unrelated Repository
93,https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/58273,2022-01-18T10:31:53Z,"Thanks for the discussion about ""node"", some useful links for everyone:

npm
DT
Related discussions

Pinging the DT module owners: @microsoft, @DefinitelyTyped, @jkomyno, @alvis, @r3nya, @btoueg, @smac89, @Touffy, @DeividasBakanas, @eyqs, @Hannes-Magnusson-CK, @hoo29, @kjin, @ajafff, @islishude, @mwiktorczyk, @mohsen1, @n-e, @galkin, @parambirs, @eps1lon, @westy92, @SimonSchick, @ThomasdenH, @WilcoBakker, @wwwy3y3, @samuela, @kuehlein, @bhongy, @chyzwar, @trivikr, @yoursunny, @qwelias, @ExE-Boss, @peterblazejewicz, @addaleax, @victorperin, @ZYSzys, @nodejs, @LinusU, @wafuwafu13.",2022-01-18T10:31:55Z,1,,(II) Unrelated Repository
94,https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/58273,2022-01-18T10:31:53Z,"Im not sure if I understood the implications right, but I also opened an issue in node-fetch regarding the same issue.
I hope thats correct, if not please help me connect the right dots üòÑ",2022-01-18T10:44:19Z,2,1.0,(II) Unrelated Repository
95,https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/58273,2022-01-18T10:31:53Z,"I think this is due to a fact, both Node and dom types are kept in sync. Thanks to this same api can be used without causing an errors (in theory). This requires using declaration merging and keeping in sync Node types with standard dom lib. For now it seems it does not take any param (I know MDN takes any object as the token):
https://github.com/microsoft/TypeScript/blob/main/lib/lib.dom.d.ts#L1900-L1909
This can be proper question for TS itself",2022-01-18T20:23:01Z,3,,(II) Unrelated Repository
96,https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/58219,2022-01-16T16:41:25Z,"Thanks for the discussion about ""workerpool"", some useful links for everyone:

npm
DT
Related discussions

Pinging the DT module owners: @Alorel, @sgkim126, @forivall.",2022-01-16T16:41:26Z,1,,(III) Enhancement
97,https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/58219,2022-01-16T16:41:25Z,"The latest @types/workerpool package released is 6.1.0, 5 months ago. If there are new features missing, please submit an issue to add those or feel free to submit a PR.",2022-01-18T22:24:02Z,2,1.0,(III) Enhancement
98,https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/57054,2021-11-08T16:33:33Z,"Thanks for the discussion about ""three"", some useful links for everyone:

npm
DT
Related discussions

Pinging the DT module owners: @joshuaellis, @Methuselah96.",2021-11-08T16:33:35Z,1,,(II) Unrelated Repository
99,https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/57054,2021-11-08T16:33:33Z,"We have a repo over at three-TS-types, please make an issue there, or better please submit a PR to resolve the issue ‚ò∫Ô∏è",2021-11-08T16:38:02Z,2,1.0,(II) Unrelated Repository
100,https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/56778,2021-10-25T23:03:18Z,"Thanks for the discussion about ""jasmine-ajax"", some useful links for everyone:

npm
DT
Related discussions

Pinging the DT module owners: @lgrignon, @jgonggrijp.",2021-10-25T23:03:20Z,1,,(I) Reporting a Bug
101,https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/56778,2021-10-25T23:03:18Z,I opened an issue for this.,2021-10-26T11:39:26Z,2,1.0,(I) Reporting a Bug
102,https://github.com/ohmyzsh/ohmyzsh/discussions/10186,2021-09-12T20:37:02Z,"This is a bug, probably due to using some kind of alternative to the compinit call that Oh My Zsh makes. I've opened #10190 to track this.",2021-09-15T15:53:45Z,1,1.0,(I) Reporting a Bug
103,https://github.com/ohmyzsh/ohmyzsh/discussions/9852,2021-04-22T12:51:12Z,"This is a gitstatus issue. The error tells you where to find support for it:

If you need help, open an issue and attach this whole error message to it:

",2021-04-22T16:57:01Z,1,1.0,(II) Unrelated Repository
104,https://github.com/ohmyzsh/ohmyzsh/discussions/9837,2021-04-18T07:04:27Z,"Those are powerlevel9k files, you need to open an issue there though I don't think you'll get much support since it's archived. They're open file descriptor because of the way the theme works, I don't think there's anything wrong with it, only that it's complaining about it. Here's some more information a quick google search brought up: https://groups.google.com/g/uk.comp.os.linux/c/KLG0HZPtKas?pli=1.",2021-04-18T18:03:47Z,1,1.0,(II) Unrelated Repository
105,https://github.com/gulpjs/gulp/discussions/2508,2020-10-26T20:26:32Z,"@Janatbek I'm not seeing any hidden content when logged out on Safari, but I know that Medium does some shady stuff.
We'd be happy to move our blog over to our new website, but no one has taken on the task to figure out how to do that with Docusaurus v2 alpha. Is that something you'd want to take on? I can create an issue and assign it to you.",2020-10-26T20:31:40Z,1,1.0,(IV) Clarification Request
106,https://github.com/handlebars-lang/handlebars.js/discussions/1798,2021-12-21T12:05:03Z,"@yespire As a workaround, you can replace your variables with variables , something like this:
https://handlebarsjs.com/playground.html#format=1&currentExample=%7B%22template%22%3A%22%7B%7B%3Epartial%7D%7D%5Cn%7B%7Bfirstname%7D%7D%20%7B%7Blastname%7D%7D%5Cn%22%2C%22partials%22%3A%5B%7B%22name%22%3A%22partial%22%2C%22content%22%3A%22Partial%3A%5Cn%22%7D%5D%2C%22input%22%3A%22%7B%5Cn%20%20firstname%3A%20%5C%22%7B%7B%20firstname%20%7D%7D%5C%22%2C%5Cn%20%20lastname%3A%20%5C%22%7B%7B%20lastname%20%7D%7D%5C%22%2C%5Cn%7D%5Cn%22%2C%22output%22%3A%22Partial%3A%5Cn%7B%7B%20firstname%20%7D%7D%20%7B%7B%20lastname%20%7D%7D%5Cn%22%2C%22preparationScript%22%3A%22%5Cn%22%2C%22handlebarsVersion%22%3A%224.7.7%22%7D
When the partials are assembled, you can provide the actual data for those variables.
If you still want to add something like h.assemblePartials(), please open another issue or a PR.",2021-12-21T13:20:14Z,1,1.0,(IV) Clarification Request
107,https://github.com/handlebars-lang/handlebars.js/discussions/1798,2021-12-21T12:05:03Z,"@jaylinski
Thanks for the suggestion, but rendering variables into variables or {{varirable}} are not ideal.
Are you suggesting create a ""feature"" issue ?",2021-12-22T08:43:56Z,2,,(IV) Clarification Request
108,https://github.com/handlebars-lang/handlebars.js/discussions/1798,2021-12-21T12:05:03Z,"Cool, will do.
assemblePartials() can solve some of the other request(s) / discussion(s), for example:
#1788",2021-12-22T10:26:34Z,3,,(IV) Clarification Request
109,https://github.com/socketio/socket.io/discussions/3905,2021-05-05T11:49:28Z,"Hi, thanks for the heads-up.
The project is indeed currently not maintained, I've opened an issue about this here: socketio/socket.io-p2p#72",2021-05-05T21:57:48Z,1,1.0,(II) Unrelated Repository
110,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Just wanted to second that, trying to implement file uploading using API routes. I can get the file to upload but then need to be able to access it again to upload it to S3 bucket.",2019-08-07T12:03:41Z,1,,(III) Enhancement
111,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"I second this! Also, being able to read directories is very important for my company's usage as we keep our data like team members and blog posts in a content directory so we're looking for a way to require all files in the directory.",2019-08-12T19:46:05Z,2,,(III) Enhancement
112,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,The above PR will fix this! ‚òùÔ∏è üôè,2019-08-12T20:43:58Z,3,,(III) Enhancement
113,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"How about fs.writeFile is that possible? For example, create and save a JSON file based on a webhook that was posted on an /api/route",2019-08-30T05:45:18Z,4,,(III) Enhancement
114,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Hey @marlonmarcello, this is going to be possible. Stay tuned üòä",2019-08-30T05:59:04Z,5,,(III) Enhancement
115,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,It's this already solved?,2019-09-15T15:42:24Z,6,,(III) Enhancement
116,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Not yet, you can subscribe for #8334",2019-09-16T09:55:22Z,7,,(III) Enhancement
117,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,@huv1k Many thanks!,2019-09-16T12:15:27Z,8,,(III) Enhancement
118,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,Is there a way to help this move forward more quickly?,2019-10-03T15:32:39Z,9,,(III) Enhancement
119,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Worth noting: if you're using TypeScript, you can already import a JSON file as a module directly (make sure resolveJsonModule is true in tsconfig.json).  E.g.:

The shape of the JSON object is also automatically used as its type, so autocomplete is really nice.",2019-10-18T23:40:53Z,10,,(III) Enhancement
120,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Workaround I'm using:

and in the location you need the path

I know this doesn't solve the need to reference files with paths relative to the current file, but this solves my very related use case (reading image files from a /public/images folder).",2019-10-30T01:45:03Z,11,,(III) Enhancement
121,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Saw in the PR this has changed a bit - any update on what the current plans are (or aren't)? Sounds like there are some strategies you don't want pursued, mind listing them + why so contributors can give this a shot?",2019-10-30T22:32:57Z,12,,(III) Enhancement
122,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,This is blocking the usage of nexus with Next.js. It would be great to see this prioritized again.,2019-12-10T15:27:28Z,13,,(III) Enhancement
123,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"
Workaround I'm using:

and in the location you need the path

I know this doesn't solve the need to reference files with paths relative to the current file, but this solves my very related use case (reading image files from a /public/images folder).

Awesome Man. Worked for me.",2020-01-10T07:40:55Z,14,,(III) Enhancement
124,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"I've been using the new getStaticProps method for this (in #9524). The method is currently marked as unstable but there seems to be good support from the Next.js team on shipping it officially.
e.g.:
",2020-01-10T17:18:53Z,15,,(III) Enhancement
125,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,@ScottSmith95 Do you have some public source project where you're using this? Curious about what it would look like.,2020-01-11T14:22:14Z,16,,(III) Enhancement
126,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"The project is not open source, yet but I am happy to share more of my config if you have more questions.",2020-01-14T23:24:41Z,17,,(III) Enhancement
127,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@ScottSmith95 I have all the questions üòõ

Where in your project do you store the data-files? (outside/inside src?)
What does a next.js page component using them look like?
Is it hard-coded paths only, or can you load a file based on path parameters?
How does build/deployment work, especially if it's not hard-coded paths?
",2020-01-16T14:49:02Z,18,,(III) Enhancement
128,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@Svish We store data files in /data within our project. (Pages are in /pages, not /src/prages.) This page component looks like this (props are sent to the Home component which is the default export):

For more advanced pages, those with dynamic routes, we grab this data like so:

Deployment goes really smoothly, with dynamic routes, getStaticPaths() becomes necessary. I encourage you to check out the RFC for the documentation on that, but here's an example of how we handle that by gathering all our team member data and passing it to Next.js.
",2020-01-16T17:39:49Z,19,,(III) Enhancement
129,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@ScottSmith95 Looks promising! A couple of follow-up questions if you have time:

What you're doing here is for static site generation? I.e. when using next export?
Have I understood it correctly, that getStaticPaths returns a list of path parameters, which is then (by next) fed, one by one, into getStaticProps for each render?
Can you use getStaticProps without getStaticPaths, for example for a page without any parameters?
Can you use getStaticProps in _app? For example if you have some site wide config you'd like to load or something like that?
",2020-01-16T20:30:51Z,20,,(III) Enhancement
130,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,@Svish #9524,2020-01-16T22:25:50Z,21,,(III) Enhancement
131,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"What about the apis?? Those hooks are for pages, but what about apis?",2020-01-17T01:41:04Z,22,,(III) Enhancement
132,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"I'm confused. I was able to set the _dirname as an env variable in the next config. Therefore I was able to access the filesystem from the API, but it only worked locally. After deploying it to now, I got an error. Any ideas why it won't work after deployment?",2020-02-01T10:12:46Z,23,,(III) Enhancement
133,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@josias-r the main issue is usually that the files to be read are not included the deployment, but it depends on how you include them and which types of files they are (js/json is usually fine, but other file types like .jade will require alternative ways of dealing with his, like using a separate @now/node lambda/deployment for reading/handling those files).
If you can explain more about the error, maybe someone can help you.",2020-02-01T10:16:43Z,24,,(III) Enhancement
134,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@BrunoBernardino It was actually referring to JSON files inside my src folder. But it's actually even the fs.readdirSync(my_dirname_env_var) method that already fails in deployment. So that dir doesn't seem to exist at all after deployment. Here is what I get when I try to access the full path to the json vis my API:

And as I mentioned, this works locally when I build and then run npm start.",2020-02-01T11:32:58Z,25,,(III) Enhancement
135,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@josias-r Thanks! Have you tried doing the fs.readdirSync with a relative path (no variables) instead (just to debug the deployment)? I've found that to usually work, and if so, you can write that piece of code (just reading the file, not storing it anywhere) somewhere in an initialization process (getInitialProps or something), so that the deployment process picks up that it needs that file, and then keep reading it with the var in the actual code/logic. It's not neat, but it works until this is supported. I believe that also using __dirname works in some cases.",2020-02-02T09:10:37Z,26,,(III) Enhancement
136,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@BrunoBernardino I was able to build a file tree starting from the root-relative path ./.  What I got was the following JSON (without the node modules listed):
",2020-02-02T16:32:17Z,27,,(III) Enhancement
137,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Your JSON file seems to be missing there, did you try including it via the code like I suggested above? The main problem is that the optimizations the deployment runs don‚Äôt always pick up dynamic paths, I believe, so forcing a static path has worked for me in the past (not necessarily for the actual code running, but to make sure the relevant files are included). Does that makes sense?",2020-02-02T19:42:58Z,28,,(III) Enhancement
138,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@BrunoBernardino I've switched to a non API solution. Since I dynamically want to require files from a folder and I only need the content of these files, I'm able to use the import()  method. I just didn't want to do it this way, because it seems hacky, but it's essentially doing the same thing my API endpoint would have done.
... I tried putting the file into the static folder but that didn't work either. But I hope accessing the filesystem will be possible in the future.",2020-02-03T09:35:58Z,29,,(III) Enhancement
139,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"I've also had to resort to hacky solutions, but hopefully this will land soon and more people will start seeing Next as production-ready as these use cases become supported ""as expected"".",2020-02-03T09:41:14Z,30,,(III) Enhancement
140,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"

Workaround I'm using:

and in the location you need the path

I know this doesn't solve the need to reference files with paths relative to the current file, but this solves my very related use case (reading image files from a /public/images folder).

Awesome Man. Worked for me.

It works perfectly on local development, though it does not seem to work when deploying to now.

I understand that the public folder gets moved to the route so I tried to force it to search in the base folder when on production but still got the same result:
",2020-02-05T06:31:02Z,31,,(III) Enhancement
141,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@PaulPCIO the problem you're experiencing there is because it's not a .json, .js, or .ts file. The files under /public are ""deployed"" to a CDN but not to the lambda (AFAIK), so for that case you need either a dedicated lambda (@now/node) deployment with includeFiles, or, if you only need that single file, convert it to base64 and use that as a var (in a dedicated file or not).",2020-02-05T07:18:36Z,32,,(III) Enhancement
142,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Thanks @BrunoBernardino expected as much, I will use the base64 method",2020-02-05T09:55:43Z,33,,(III) Enhancement
143,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,It's some resolution to the __dirname in deployed environment??,2020-02-06T22:59:18Z,34,,(III) Enhancement
144,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,@NicolasHz can you elaborate? I didn‚Äôt quite understand your question.,2020-02-07T09:52:32Z,35,,(III) Enhancement
145,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@BrunoBernardino Looking at the last comments, including mine, I'm pretty sure that the ""map _dirname in the next config"" hack doesn't work in deployment. Even w/ js and JSON files. At least for now deployment, that doesn't count for custom deployments probably.",2020-02-07T10:12:46Z,36,,(III) Enhancement
146,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@BrunoBernardino  I'm not able to use some variables poiting to the local path on the deployed env. __dirname it's undefined once deployed, and I'm unable to read a file from my apis scripts.",2020-02-07T11:19:14Z,37,,(III) Enhancement
147,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Got it @NicolasHz . Yeah, you'll need to resort to one of the solutions above, depending on which kind of file you need to read/access.",2020-02-07T18:31:55Z,38,,(III) Enhancement
148,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Just confirming, the config.js is not working on deployments.",2020-02-13T03:48:57Z,39,,(III) Enhancement
149,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Workaround I'm using:

and in the api definition where i need the path(allPosts folder contains all blogs in markdown format and it is located in project root )

It is working perfectly on local development.
But it is giving this error when deploying to zeit now.
",2020-03-30T06:22:06Z,40,,(III) Enhancement
150,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@sjcodebook like @BrunoQuaresma said, that workaround only works locally. I'm still using a separate @now/node deployment for lambdas to access the filesystem, and call that file via a request from the app itself (or generate whatever static result I need before deploying). Kinda insane, but it works.",2020-03-30T06:48:01Z,41,,(III) Enhancement
151,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Hi @BrunoBernardino... Do you mean a separate project with a custom node server?
However I don't understand why there's an ""includeFiles"" setting if then it's impossible to access them ü§î",2020-04-15T18:46:38Z,42,,(III) Enhancement
152,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@valse it can be on the same project. Here's a snippet of my now.json:

That way I can call them via something like:

from inside a next api page, assuming I have a lambdas/email.ts file which handles sending emails and reading from template files like pug.
I hope that helps!",2020-04-15T18:57:40Z,43,,(III) Enhancement
153,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Also, ""includeFiles"" only works for @now/node (maybe others, but not @now/next)",2020-04-15T18:58:10Z,44,,(III) Enhancement
154,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@BrunoBernardino looks like if using node functions, it now can't read ESM!
this is what happens when I try to import a list of mdx pages:
code

the error I get:
",2020-05-04T10:19:28Z,45,,(III) Enhancement
155,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@talentlessguy I'm not on the Zeit/Vercel team, just a happy customer. Seems like that might be better suited to their customer support, as I see a few potential issues just from that snippet:

You might want to use just nothing or __dirname instead of process.cwd() for base path. I haven't used the latter in lambdas, but the others, so I'm not sure if that's an issue or not
You're importing NextApiRequest and NextApiResponse as types, but this should be running from @now/node"", right? So the types should be imported like:



You're importing/reading from pages/... but are you including them via includeFiles? What does your now.json look like?
",2020-05-04T10:58:48Z,46,,(III) Enhancement
156,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@BrunoBernardino
I can't use __dirname because it is always /, process.cwd() instead, shows the real path
I accepted ur fixes and it worked:
lambdas/posts.ts

now.json

error I get:

Looks like typescript node function can't treat .mdx as a module :(",2020-05-05T15:18:32Z,47,,(III) Enhancement
157,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Alright, so it seems you found the problem. Try reading the file contents and parsing them instead of importing directly. I‚Äôve never seen an import like that work, and it seems like something that would only work with some Babel magic, which you‚Äôre also welcome to use instead of plain TS.",2020-05-05T17:55:02Z,48,,(III) Enhancement
158,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@BrunoBernardino you're right, but it's not plain ts... I have the target set to esnext and module to esnext also, it should be able to import everything... but somehow it doesn't
anyways it's not related to the issue, gonna google it somewhere",2020-05-05T18:26:00Z,49,,(III) Enhancement
159,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"No worries. A couple of tips might be in https://mdxjs.com/advanced/typescript and https://mdxjs.com/getting-started/webpack which might make it so the @now/node deployment needs to be tweaked to use it. Anyway, their support should be of help.",2020-05-05T19:04:59Z,50,,(III) Enhancement
160,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,any movement on this? It would be great to be able to include html email templates for use in API Routes. Right now I am including them in JS files but I am not a particular fan of this hack.,2020-05-12T07:03:05Z,51,,(III) Enhancement
161,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Another hack is to use webpack raw-loader to embed them into js.


Then use templates.verify as a string.",2020-05-27T17:44:34Z,52,,(III) Enhancement
162,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,There's an issue going on with next-i18next that seems to be related to this one (vercel/vercel#4271) . Basically now doesn't put the .json files located inside /public/static/locales/ into the serverless function. Can anyone provide a workaround until the feature discussed here is added to next?,2020-05-31T18:10:47Z,53,,(III) Enhancement
163,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,@borispoehland have you tried the import/require workarounds from above? That should work.,2020-05-31T20:29:15Z,54,,(III) Enhancement
164,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"

@borispoehland have you tried the import/require workarounds from above? That should work.

@BrunoBernardino I don't know what exact comment you mean.

Can you give me an example of somehow importing all the .json files inside public/static/locales into the serverless function? And where to do this (in what file)?
I'm using next (as you stated earlier, includeFiles isn't compatible with @now/next, idk if this has any impact on my problem).
Besides, because next-i18next is kind of a blackbox to me (thus I don't want to import the files from there), I search for a way to entirely import them so that next-i18next can directly access them (in other comments above, sometimes only the PROJECT_DIRNAME was defined inside the next.config.json and the import had to be done manually. This is not what I try to reach). Like in  vercel/vercel#4271, I just want now to take my .json files into the serverless function somehow.",2020-06-01T06:36:30Z,55,,(III) Enhancement
165,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@borispoehland in any file inside pages/api (or that gets called by one there), do something like #8251 (comment)
You don't need to do anything with the import. The point is that the webpack vercel runs will then see those files need to be included, and it should work.
I hope that makes sense.",2020-06-01T07:04:33Z,56,,(III) Enhancement
166,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"
@borispoehland in any file inside pages/api (or that gets called by one there), do something like #8251 (comment)
You don't need to do anything with the import. The point is that the webpack vercel runs will then see those files need to be included, and it should work.
I hope that makes sense.

@BrunoBernardino the problem with this approach is that I have lots of json files. Doing the import manually for every file is kind of cumbersome. Is there a easier way to tell now: ""Hey, please pick up all json files inside that directory recursively""? Thanks in advance
Edit: Even manually importing json files results in the same error than before. I'm going to open a new issue for this, I guess",2020-06-01T07:36:02Z,57,,(III) Enhancement
167,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"I opened a new issue for my problem, in case someone is interested in joining the discussion. Thanks for now, @BrunoBernardino !",2020-06-01T08:28:13Z,58,1.0,(III) Enhancement
168,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Another option / workaround to enable the ability to use __dirname as you would normally expect it to behave is to adjust the webpack config.
By default, webpack will alias various Node globals with polyfills unless you tell it not to:
https://webpack.js.org/configuration/node/
And the webpack default settings are to leave __dirname and __filename alone, i.e. not polyfill them and let node handle them as normal.
However, the Next.js webpack config doesn't use / reflect the webpack defaults 
All of that said, I have used the below custom Next config plugin to adjust the webpack config.

IMPORTANT: this works for my use case. It has not been tested in a wide range of environments / configurations nor has it been tested against all of the Next.js unit/integration tests. Using it may have unintended side-effects in your environment.
Also, Next may have specific reasons for not using the webpack default settings for __dirname and __filename. So again, the code below may have unintended side-effects and should be used with caution.

Also, the below plugin has been designed for use with the next-compose-plugins package: https://github.com/cyrilwanner/next-compose-plugins
But should work as a normal plugin as well: https://nextjs.org/docs/api-reference/next.config.js/custom-webpack-config
",2020-06-03T17:53:34Z,59,,(III) Enhancement
169,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"I implemented the solution by @jkjustjoshing, and while it works great locally, it does not work when I deploy the app to Vercel.
I get the following error:

My code:

Here's a link to the file: https://github.com/bengrunfeld/trend-viewer/blob/master/pages/api/graphql-data.js",2020-07-13T20:15:08Z,60,,(III) Enhancement
170,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@bengrunfeld yes, your solution only works locally.
I had a similar problem lately (wanted to read a file in a API route) and the solution was easier than expected.
Try path.resolve('./public/ts-data.csv')",2020-07-13T20:20:46Z,61,,(III) Enhancement
171,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,@borispoehland Thank you SO much!! Your solution worked beautifully!,2020-07-14T04:30:34Z,62,,(III) Enhancement
172,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@bengrunfeld no problem, I also found it out on coincidence (@BrunoBernardino ;)). It's the solution to everyone's problem here, I guess.",2020-07-14T04:33:53Z,63,,(III) Enhancement
173,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Please note, you still need to set next.config.js. I deleted the file after I saw that @borispoehland's solution worked, and received a similar error.
Then I reset it to @jkjustjoshing's solution above, deployed again to Vercel, and it worked.
",2020-07-14T06:50:19Z,64,,(III) Enhancement
174,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"
Please note, you still need to set next.config.js. I removed it after I saw that @borispoehland's solution worked, and received a similar error.
I reset it to @jkjustjoshing's solution above, deployed again to Vercel, and it worked.


@bengrunfeld Really? Maybe you're still using the PROJECT_ROOT approach at another point in the code, because in my project it works without it. How does the error look like?",2020-07-14T06:53:08Z,65,,(III) Enhancement
175,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"When deploying to Vercel, how do I write a readFile in a Page that will work both in SSG and SSR/Preview mode?
Demo repository of where it does not work: https://github.com/mathdroid/blog-fs-demo
https://blog-fs-demo.vercel.app/",2020-07-26T03:11:09Z,66,,(III) Enhancement
176,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@mathdroid try moving readFile and readdir inside the getStaticProps and getStaticPaths functions, respectively, otherwise the code might run in the browser.
Importing fs should be fine on top, though.
Let us know how that works.",2020-07-26T07:04:51Z,67,,(III) Enhancement
177,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,@borispoehland Thanks for the wonderful solution. Did not expect path.resolve() to /public would work both locally and on Vercel üëÄ! You're my savior for the day. üëç,2020-08-03T00:22:33Z,68,,(III) Enhancement
178,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@borispoehland  i tried your solution inside a serverless functionbut still get:
ENOENT: no such file or directory, open '/var/task/public/posts.json'

i tried with our without the next.config.js

Maybe your solution does not work on serverless functions?",2020-08-12T09:04:58Z,69,,(III) Enhancement
179,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"
@borispoehland  i tried your solution inside a serverless functionbut still get:
ENOENT: no such file or directory, open '/var/task/public/posts.json'

i tried with our without the next.config.js

Maybe your solution does not work on serverless functions?

I don't know why it doesn't work on your end... Sorry",2020-08-12T09:10:12Z,70,,(III) Enhancement
180,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Ok i made it work for read using @bengrunfeld  code but unfortunately you cannot write:
[Error: EROFS: read-only file system, open '/var/task/public/posts.json']
So no way to update a cache to avoid too much database calls :(",2020-08-12T09:51:02Z,71,,(III) Enhancement
181,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@neckaros have you tried using my approach to read a file other than .json, e.g. a .jpg file?",2020-08-12T10:31:06Z,72,,(III) Enhancement
182,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"
Ok i made it work for read using @bengrunfeld  code but unfortunately you cannot write:
[Error: EROFS: read-only file system, open '/var/task/public/posts.json']
So no way to update a cache to avoid too much database calls :(

@neckaros you should be able to write and read from S3 (or some other, external filesystem), but I usually use redis for quick, cached things that can be volatile. https://redislabs.com keeps it ""serverless"", and I've got production-ready code examples in https://nextjs-boilerplates.brn.sh if you want.",2020-08-12T13:20:48Z,73,,(III) Enhancement
183,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@borispoehland i could read but not write from serveless function. But I ended up having it working by refresh my cache in the incremental builds (revalidate) instead of on add new content . Which I guess is not a bad pattern. Thanks for your help!
@BrunoBernardino thanks i will have a look. Really looking to a fully free hobbyist solution that does not break once you have a few users :)",2020-08-13T06:53:00Z,74,,(III) Enhancement
184,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"
Really looking to a fully free hobbyist solution that does not break once you have a few users :)

Copy that. RedisLabs and Vercel did that for me. üíØ",2020-08-13T14:34:34Z,75,,(III) Enhancement
185,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"After some digging I got writing files working with the extended os package...

reading a file works with @subwaymatch solution
const logoPath = path.resolve('./public/logo.png')",2020-08-25T06:45:48Z,76,,(III) Enhancement
186,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"
After some digging I got writing files working with the extended os package...

reading a file works with @subwaymatch solution
const logoPath = path.resolve('./public/logo.png')

Nice, are you able to read back the contents of this file? Is the directory accessible and permanent?",2020-10-01T11:27:42Z,77,,(III) Enhancement
187,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@marklundin With a function named tmpdir I doubt it's permanent, but if this works, then it would be good to know how temporary actually tmpdir is, yeah... ü§î",2020-10-01T11:58:50Z,78,,(III) Enhancement
188,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Any updates on this? I'm wondering why it works in getInitialProps, but not in API routes ü§∑‚Äç‚ôÇÔ∏è
My current workaround
",2020-10-13T20:16:06Z,79,,(III) Enhancement
189,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,currently having this issue in API routes too,2020-10-14T07:47:00Z,80,,(III) Enhancement
190,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"
currently having this issue in API routes too

There are a few working solutions here, what problem are you having, specifically?",2020-10-14T12:25:17Z,81,,(III) Enhancement
191,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"I'm struggling to get this working even with suggestions from this thread. My use-case is I'm writing a guide and want to show the source-code for the component alongside the component itself. My method for doing this is using fs to load the component's jsx file inside getServerSideProps and passing the string value of the file contents as a prop.
I was feeling over the moon about having it working locally, but then when I went to deploy it, the joy has gone :(
Please see: https://github.com/ElGoorf/i18next-guide/blob/fix-example-components/pages/plurals.jsx",2020-10-17T00:38:38Z,82,,(III) Enhancement
192,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@ElGoorf your problem is that the public files are on an edge, and the functions are on a lambda. Now, @vercel/next still doesn't allow for includeFiles, so the easiest way for you to get it working would be to use a lambda function with it.
Here's some sample code that helped others here: #8251 (comment)",2020-10-17T06:03:20Z,83,,(III) Enhancement
193,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Thanks @BrunoBernardino I didn't realise I'd missed the ""x hidden items load more..."" and thought I was going crazy from the thread losing meaning!
Unfortunately, I struggled with your solution, as it's the first time I've heard of Edge/Lambda, however, I found @balthild's solution was closer to what I was originally after before trying the node.fs method: #8251 (comment)",2020-10-17T14:59:06Z,84,,(III) Enhancement
194,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Great! Did you get it working? Or are you still having issues?
I'm not sure Vercel even uses that terminology, but by Edge I mean CDN, where static files are served from, and by lambda I mean the ""backend"" functions that get called from the API routes, which are isolated like AWS Lambda functions.",2020-10-17T17:12:27Z,85,,(III) Enhancement
195,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Hey,
Any update on writing to files using next.js on vercel? I can read no problem. Using the const logoPath = path.resolve('./public/logo.png')
I'm attempting to overwrite the public/sitemap.xml file (due to the size limits on vercel) I can only return it without error as a static file in the public folder. I have previously implemented the sitemap with zlib and streaming the response but it seems to wait until the stream is finished and then return it. This doesn't hit the size limitation error, but unfortunately it's very slow. I'm open to any suggestions people might have. The sitemap is built from an API call to a separate backend and needs to be updated regularly.
Things I have attempted :

Zipping and streaming the xml - works but very slow.
Building and returning sitemap from an api function, unfortunately this hits the size limit.
Reading static xml file from public folder (works) regardless of size, but not updatable.
Test writing to this file, doesn't work. Test writing to any file/folder doesnt work
Test returning static xml file from ""api"" function, size error. This works locally.
Test returning static xml file from ""page"" getServerSideProp size error. This works locally.
Would appreciate any ideas at all?
",2020-10-23T15:57:55Z,86,,(III) Enhancement
196,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Hey @emomooney, I don't imagine Vercel ever allowing to write files in a function (even for caching), since the main ""advantage"" of serverless is its statelessness, and that would add state to it, so I think you'll need to use the edge/cdn for it.

I have previously implemented the sitemap with zlib and streaming the response but it seems to wait until the stream is finished and then return it.

I'm curious if you were just experiencing this slowness for subsequent calls, or just the first, for the cold start? I imagine this was an API call to Vercel via a next.js api function, or a dedicated lambda, similar to what I do here.
If it was and it was still too slow, is your ""separate backend"" outside of Vercel? If so, you can potentially use it to build a sitemap.xml file and vercel --prod it into a domain, basically ""caching"" the file to be readable and accessible, and you'd just need to update the robots.txt to link the sitemap to another domain/subdomain.",2020-10-24T06:31:34Z,87,,(III) Enhancement
197,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Also just ran into this issue, and this one becomes extra annoying when your next app is part of a monorepo setup, since ./ can mean very different things depending on the environment you're running the API handler in.",2020-12-03T16:01:13Z,88,,(III) Enhancement
198,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"I'm trying to read a directory (pages directory) in an API route.
When I try @jkjustjoshing's workaround and do readdirSync(join(serverRuntimeConfig.PROJECT_ROOT, './pages')), I get this error in Vercel Functions realtime logs:

Which presumably doesn't work because those files aren't being copied into the serverless environment?
Is there a way to do this?",2020-12-23T16:48:54Z,89,,(III) Enhancement
199,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,@remjx it's not currently possible. What are you trying to do? Is it something you can do before deploying? Or can it be deployed as a separate @vercel/node function/build?,2020-12-23T16:55:47Z,90,,(III) Enhancement
200,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@BrunoBernardino I have something like this:

I don't want a User to be able to be created with the name ""blog"" because it conflicts with an existing route. So I'd like to be able to read the pages directory so I can automatically add ""blog"" to the list of off-limits usernames.

Is it something you can do before deploying?

Good idea. I'm now generating a .json file in the /public folder during build but am still getting an ENOENT error when I try to read the file.
I don't understand what's going on in your workaround to read files. Is there documentation for these configuration options?",2020-12-23T17:54:28Z,91,,(III) Enhancement
201,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"
@BrunoBernardino I have something like this:

I don't want a User to be able to be created with the name ""blog"" because it conflicts with an existing route. So I'd like to be able to read the pages directory so I can automatically add ""blog"" to the list of off-limits usernames.

Is it something you can do before deploying?

Good idea. I'm now generating a .json file in the /public folder during build but am still getting an ENOENT error when I try to read the file.
I don't understand what's going on in your workaround to read files. Is there documentation for these configuration options?

I know this isn't exactly what you'd like to achieve, but have you thought about prepending a ""user"" in front of the route?
/pages/user/[userName].jsx
That way, you don't have to worry about conflicting usernames, especially not when new pages are added in the future
Edit: I thought about it for a short time and I'm sure now that you have to prepend at least something to the route. Otherwise, let's assume that your project is successful and you have many users. In the future, you then want to add a new page: /pages/about.jsx. To prevent conflicts, that would mean that you possibly have to delete an existing user account of the user named ""about"". I don't think that you want this race condition to be possible to occur, so I think the smartest way is to prevent a conflict by prepending something in front of the slug.",2020-12-23T18:17:59Z,92,,(III) Enhancement
202,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@remjx

Good idea. I'm now generating a .json file in the /public folder during build but am still getting an ENOENT error when I try to read the file.

Yes, public/* files are deployed to an edge/CDN, not available to the serverless function. You should be able to generate that .json file inside the pages directory and simply import it or require it (make sure your tsconfig.json supports it, maybe also jest if you're using it), and the file will be available.

I don't understand what's going on in your workaround to read files. Is there documentation for these configuration options?

Yes, but it's always changing and it's ""deprecated"" now: https://vercel.com/docs/configuration#project/builds",2020-12-23T18:42:27Z,93,,(III) Enhancement
203,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,@BrunoBernardino moving the .json file to /pages and importing it works. Thank you!,2020-12-23T20:41:03Z,94,,(III) Enhancement
204,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Did anyone manage to be able to read from their filesystem in getServerSideProps? I tried @jkjustjoshing's suggestion, but it only works locally and not when deployed to Vercel.
Reproducible example: https://github.com/robertcoopercode/with-mdx-remote-app
Related GitHub discussion: #22853",2021-03-07T19:04:17Z,95,,(III) Enhancement
205,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@robertcoopercode Maybe this code example helps (it used to be d deployed to Vercel, though now it's not). I think you need __dirname or process.cwd()",2021-03-07T20:05:22Z,96,,(III) Enhancement
206,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"Just noticed this thread and wanted to share a short note.
I've been able to read successfully files located in the public dir from serverless functions using fs.readFile/fs.readDir:

Today I noticed that enabling Webpack 5 breaks this behaviour (no clue why), causing the function to throw:
",2021-04-24T12:04:18Z,97,,(III) Enhancement
207,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@robertcoopercode how did you manage to solve this issue? I am accessing the filesystem using getServerSideProps and process.cwd() which works fine locally but it is still failing on Vercel for me with the following error:
",2021-04-28T07:43:27Z,98,,(III) Enhancement
208,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,"@fernandoabolafio my code example from above worked in Vercel up until very recently (I'm no longer deploying to it, but you should be able to clone and deploy to test). If that no longer works, maybe they changed something.",2021-04-28T08:25:59Z,99,,(III) Enhancement
209,https://github.com/vercel/next.js/discussions/32236,2019-08-05T18:13:45Z,@BrunoBernardino thanks for your answer. I just found this: https://vercel.com/support/articles/how-can-i-use-files-in-serverless-functions. It is an official note from Vercel saying that accessing the filesystem from pages SSR isn't working. It is actually pointing to this thread as a reference.,2021-04-28T08:50:56Z,100,,(III) Enhancement
210,https://github.com/vercel/next.js/discussions/12246,2020-04-27T16:41:59Z,"As a follow-up: I also saw this discussion #11945, but the answer doesn't help me in anyway because I do not want the error page to be static.",2020-04-27T16:42:53Z,1,,(III) Enhancement
211,https://github.com/vercel/next.js/discussions/12246,2020-04-27T16:41:59Z,This can't be proper behavior. I created an issue for it: #12256,2020-04-27T19:24:54Z,2,1.0,(III) Enhancement
212,https://github.com/vercel/next.js/discussions/12246,2020-04-27T16:41:59Z,"I was able to solve it by changing the getServierSideProps function to
",2020-04-28T13:52:08Z,3,,(III) Enhancement
213,https://github.com/vercel/next.js/discussions/12246,2020-04-27T16:41:59Z,"same issue here, can't solve it easily with initial props
I have the same need because I am localizing my 404 page
works fine otherwise, a 404 or a 500 is handled by the error.tsx, I don't see the point of trying to generate a 404 static page",2020-11-30T16:16:22Z,4,,(III) Enhancement
214,https://github.com/vercel/next.js/discussions/12246,2020-04-27T16:41:59Z,Any updates on this? I'm getting the same error for /500 page,2021-04-29T15:18:16Z,5,,(III) Enhancement
215,https://github.com/vercel/next.js/discussions/12246,2020-04-27T16:41:59Z,I have similar error on prod build. I don't like the fact that Next.js doesn't report any errors during dev and then when you try to compile for prod a lot of stuff breaks. If prod doesn't compile dev shouldn't compile too.,2021-12-31T15:45:23Z,6,,(III) Enhancement
216,https://github.com/vercel/next.js/discussions/12325,2020-04-29T20:42:02Z,,2020-04-29T22:23:24Z,1,,(III) Enhancement
217,https://github.com/vercel/next.js/discussions/12325,2020-04-29T20:42:02Z,"Any hints on how to do what the op asked? I'm having the same problem and simply modifying the _document.js will not work to change the  attributes per page(route), since

Document is only rendered in the server, event handlers like onClick won't work

As mentioned in the caveats.",2020-05-06T09:22:38Z,2,,(III) Enhancement
218,https://github.com/vercel/next.js/discussions/12325,2020-04-29T20:42:02Z,I have the same question. react-helmet has 'bodyAttributes' and 'htmlAttributes' that are very useful for getting the right attributes in place per route in SSR. Is there a way to tap into this with the next/head?,2020-06-12T00:55:47Z,3,,(III) Enhancement
219,https://github.com/vercel/next.js/discussions/12325,2020-04-29T20:42:02Z,"How about using withRouter and then extracting the current route/path to do the comparison and inject properties based on the current router/path?
const { router: { pathname, query, asPath } = this.props ?",2020-06-12T01:45:49Z,4,,(III) Enhancement
220,https://github.com/vercel/next.js/discussions/12325,2020-04-29T20:42:02Z,@srikanth912 That's a good trick! The downside to this is that the logic is now in multiple places ‚Äî while the rest of the page meta info is in the  component.,2020-06-12T02:09:25Z,5,,(III) Enhancement
221,https://github.com/vercel/next.js/discussions/12325,2020-04-29T20:42:02Z,"This seems like a missing feature, no? It seems like refactoring from react-helmet should be relatively straightforward ü§î.",2020-07-07T18:37:40Z,6,,(III) Enhancement
222,https://github.com/vercel/next.js/discussions/12325,2020-04-29T20:42:02Z,"if you use something like a wrapper, you can use componentDidMount
`class Container extends React.Component{

}`",2021-02-20T03:37:12Z,7,,(III) Enhancement
223,https://github.com/vercel/next.js/discussions/12325,2020-04-29T20:42:02Z,Can you make this an issue not a discussion? It really IS a missing feature. I will continue using react-helmet-async instead because I am setting classes on body to hide certain elements on the page based on the route.,2021-03-01T15:02:07Z,8,1.0,(III) Enhancement
224,https://github.com/vercel/next.js/discussions/12325,2020-04-29T20:42:02Z,,2021-03-15T16:29:03Z,9,,(III) Enhancement
225,https://github.com/vercel/next.js/discussions/12325,2020-04-29T20:42:02Z,"@mimshins
For best results, use both _document.js and _app.js to ensure that your server side rendered pages have the correct body class (or any other attribute on body or html) and that these classes updated correctly when user navigates between pages.



Here is the post with full explanation.",2021-08-01T18:01:22Z,10,,(III) Enhancement
226,https://github.com/vercel/next.js/discussions/32582,2021-12-15T06:25:54Z,I have the same error,2021-12-15T10:40:16Z,1,,(II) Unrelated Repository
227,https://github.com/vercel/next.js/discussions/32582,2021-12-15T06:25:54Z,"
I have the same error

I was fixed this error by downgrade the firebase version to ""firebase"": ""9.4.0"",",2021-12-15T11:06:03Z,2,,(II) Unrelated Repository
228,https://github.com/vercel/next.js/discussions/32582,2021-12-15T06:25:54Z,"

I have the same error

I was fixed this error by downgrade the firebase version to ""firebase"": ""9.4.0"",

Didn't work for me.",2021-12-15T16:44:29Z,3,,(II) Unrelated Repository
229,https://github.com/vercel/next.js/discussions/32582,2021-12-15T06:25:54Z,I had the same problem spent almost 6 hours debugging the issue eventually I removed the old firebase version and installed yarn add firebase@9.4.0  it worked. Don't know what's the problem though but it seems with the new version of firebase.,2021-12-16T12:51:56Z,4,,(II) Unrelated Repository
230,https://github.com/vercel/next.js/discussions/32582,2021-12-15T06:25:54Z,"
I had the same problem spent almost 6 hours debugging the issue eventually I removed the old firebase version and installed yarn add firebase@9.4.0 it worked. Don't know what's the problem though but it seems with the new version of firebase.

when I downgrade to firebase@9.4.0 Im getting error like ""app.firestore is not a function"" here is my firebase file
",2021-12-16T18:53:01Z,5,,(II) Unrelated Repository
231,https://github.com/vercel/next.js/discussions/32582,2021-12-15T06:25:54Z,"This doesn't sound like Next.js related. Moving to discussions. If you think this is wrong, please open a new bug report with a reproduction we can investigate. üôè",2021-12-16T19:03:10Z,6,1.0,(II) Unrelated Repository
232,https://github.com/vercel/next.js/discussions/32582,2021-12-15T06:25:54Z,"I'm experiencing the same problem, downgrading didn't help.
Looks like the same error other folks are having with the firebase-js-sdk library (this firebase.proto file that can't be found).
[this comments in the relevant issue] (firebase/firebase-js-sdk#3541 (comment)) Seems to be relevant but i'm afraid i'm out of my league:

As a workaround, you should exclude any firebase package including firestore from being bundled when doing SSR. Can you try the solution I provided for a similar issue? Does it solve your problem?

is it possible to do such a thing with vercel?",2021-12-17T09:37:34Z,7,,(II) Unrelated Repository
233,https://github.com/vercel/next.js/discussions/32582,2021-12-15T06:25:54Z,Can confirm that downgrading did the trick for me,2021-12-17T18:34:36Z,8,,(II) Unrelated Repository
234,https://github.com/vercel/next.js/discussions/32582,2021-12-15T06:25:54Z,I had the same issue and I had to downgrade it to firebase@9.1.2 .,2021-12-22T12:13:41Z,9,,(II) Unrelated Repository
235,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"
Why is this not doable with webpack() extension?
transpileModules sounds better
Will we accept regexps?
",2017-01-09T05:38:12Z,1,,(III) Enhancement
236,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"
Why is this not doable with webpack() extension?

I hope you mean custom webpack config. That's doable. But this sits in a existing loader. Getting that is somewhat harder.

transpileModules sounds better

Awesome. I'll update.

Will we accept regexps?
Yep. sure.
",2017-01-09T05:41:46Z,2,,(III) Enhancement
237,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"Hey,
As I'm starting my own website I'm trying new techs like Lerna/Next/Styled... and would be happy to provide early feedback on this.
I've opened a duplicate issue where I tried to import/transpile a CRA-based module in my NextJs module but didn't know how to make the transpilation happen (note that I'd like to keep my module runnable as a standalone)
I've also noticed that Babel, also based on Lerna, is transpiling each modules before exposing them, but it looks to me better to do like @arunoda suggest and let the client app do the transpiling.
I'd like to have a single babel config for my client and share that config with all my decoupled modules. That's probably not so easy if I want to keep ability to run my modules as standalone, outside of Next runner
My current test project is here: https://github.com/slorber/playground/ I'll try to upgrade it as soon as there's a fork/PR. @arunoda are you working on it?",2017-01-09T13:25:21Z,3,,(III) Enhancement
238,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@slorber currently we are focusing on 2.0 release and we are fine tuning stuff and finding bugs as possible as we can.
I haven't started work on this but we can do this just after 2.0.",2017-01-09T13:34:01Z,4,,(III) Enhancement
239,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"Ok so I'll make a fork. I'm already running against 2.0.0 beta because I'm not building a critical website and I don't think webpack 1.13 resolve jsnext:main/module field.
I'm not a bundler expert but I think I'd rather use ""module"" field of package.json no? ""main"" seems for already transpiled code as far as I know. But as the webpack config allows to include/exclude transpilation I'm not sure it's relevant. Any recommendation on which of the 3 fields I'd rather use?",2017-01-09T14:43:17Z,5,,(III) Enhancement
240,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@slorber I think webpack only supports main just like NPM. You can use that.
We can check for the filepath in the exclude function in our next.conf.js",2017-01-09T15:01:17Z,6,,(III) Enhancement
241,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"Hmm according to what I've seen in practice against Next 2.x I've seen module works (but fails later at runtime because not transpiled) while jsnext:main did not work (as far as I remember). But it's supposed to be supported.
Anyway, jsnext:main or module does not seem to be the solution to this problem so for company-internal modules just enabling transpilation is probably enough",2017-01-09T15:27:37Z,7,,(III) Enhancement
242,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"The community has not agreed on one approach right? For example, I was able to use react-youtube the other out of the box with no problems. I'm assuming a big number of modules transpile before publish?
Ref: https://github.com/rauchg/blog/blob/master/components/post/youtube.js",2017-01-09T18:17:40Z,8,,(III) Enhancement
243,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"Yes that makes sense to always transpile before publish because you don't know who/how the module will be consumed and you don't want to force the client to setup appropriate babel settings for your lib. That's what Rollup suggest: to publish the module transpiled in different ways so that bundler can decide which to use.
But for company internal packages, the transpilation settings might be the same across several project (like a babel preset) and it makes sense to me to let the client bundler to transpile all the company dependencies",2017-01-09T18:54:47Z,9,,(III) Enhancement
244,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"Very much agree @slorber - this would be very handy for internal modules if you're breaking your project up and isolating things as much as possible.
And @rauchg / @arunoda supporting RegExp's would be really nice, so you could have one entry that catches all the company internal modules, using say the NPM org namespace:
",2017-01-09T20:17:08Z,10,,(III) Enhancement
245,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,Beautiful suggestion @philcockfield,2017-01-09T20:17:44Z,11,,(III) Enhancement
246,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"Hey maybe it could be worth offering some presets. It looks to me most tools (Lerna/npm link...) rely on symlinks so why not something as simple as:
",2017-01-10T00:27:00Z,12,,(III) Enhancement
247,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"The more I use next.js in earnest, and build out a rich library of modules around it, the more this feature becomes important.  It's becoming a real PITA replicating the babel compilation step in my internal modules.
üöÄü§ñ",2017-01-12T01:33:12Z,13,,(III) Enhancement
248,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,I'm working on this today :),2017-01-12T04:13:02Z,14,,(III) Enhancement
249,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,@philcockfield give this a try: #749,2017-01-12T10:30:53Z,15,,(III) Enhancement
250,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"thanks @arunoda
So as commented on your PR if this does not support symlinks the feature will be a bit limited because it won't work with npm link or Lerna, but only for npm modules that are not transpiled (right? I don't see any other usecase unless you commit modules inside /node_modules)
Why not supporting symlinks? is it harder to support?
Also I wanted to test your branch on my app, but I'm not sure what's the best way to do that. Is there any known procedure so we can easily test a branch and it's not too painful for the tester? I've tried some stuff like:

npm install https://github.com/arunoda/next.js.git#add-706 : fails because the next /bin folder is empty on github repo
git clone of the fork inside /node_modules: not much success (but it might be because of my specific Lerna settings)

What's the best way to test a fork currently?",2017-01-13T10:39:49Z,16,,(III) Enhancement
251,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"If you're looking at doing this with next.config.js: module.exports = { webpack: (config, then config.module.rules has a few things, looks like you need to change one of these rules, or add one?:

Looking forward to the simpler syntax suggested.",2017-03-24T19:13:31Z,17,,(III) Enhancement
252,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"Sorry for my ignorance I cant see what the resolution of this issue is? We would love to be importing es6 into our codebase, we need the tree-shaking .
Is there a PR on this?",2017-04-22T03:29:24Z,18,,(III) Enhancement
253,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,@andrewmclagan This issue is still open and has a related PR that probably won't satisfy all (like LernaJS users),2017-04-23T16:00:54Z,19,,(III) Enhancement
254,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,What's the status of this? Are there any other ways to make next's webpack to transpile files imported from node_modules ?,2017-05-15T18:39:51Z,20,,(III) Enhancement
255,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,@slorber i will take a look at the PR. Contribute our use-case.,2017-05-16T03:42:01Z,21,,(III) Enhancement
256,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"I am facing kind of similiar problem. Trying to use get-urls package. Works find with dev but when i compile it. I got error from uglify

Is there any workaround for this please?",2017-06-20T00:41:20Z,22,,(III) Enhancement
257,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,Arunoda will work on it sometime here. He has done before in #749,2017-06-26T19:29:32Z,23,,(III) Enhancement
258,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"I'd love to see this feature implemented. As @philcockfield mentioned, it's a common scenario to build up a library of modules that depend on Next.js transpilation, and it'd be great to be able to share components among projects.",2017-07-05T13:46:39Z,24,,(III) Enhancement
259,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,This is not only needed for tree shaking. Also for babel plugins like styled-jsx. So if you have a module (like a library) that uses a babel plugin the best solution is to include the ES6 source code and allow your app to transpile it from node_modules. Of course next already includes styled-jsx by default.,2017-08-08T17:09:30Z,25,,(III) Enhancement
260,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"Here's what I did

I basically replaced each exclude with a custom function.
I do not know what I am doing wrong, but I just cannot make it work.
I need the contents of node_modules/mycomponents to also be transpiled by Next.js
It doesn't even work if I completely override all excludes with an empty array

Please help me :)
Thanks",2017-08-30T11:22:50Z,26,,(III) Enhancement
261,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"Hey guys ( @thealjey ) I've been transpiling jsnext:main powered modules for months by now.

use the following resolver:
https://github.com/damianobarbati/react-app/blob/master/config/webpack.config.js#L66
https://github.com/damianobarbati/react-app/blob/master/config/webpack.config.js#L203
Basically it says: if jsnext:main is in package.json then transpile the specified entrypoint, otherwise import what's in main
the following will help when using npm-linked modules:
https://github.com/damianobarbati/react-app/blob/master/config/webpack.config.js#L168

I'm not using next.js but I hope it helps.",2017-08-30T11:29:33Z,27,,(III) Enhancement
262,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@damianobarbati no, unfortunately it does not
Configuring webpack directly to transpile whatever is not difficult, but I am struggling to make this work in the context of Next.js",2017-08-30T11:48:33Z,28,,(III) Enhancement
263,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"hey all, anyone have found a solution?
i have a local ES6 linked node module i need to import in my project but i cant get the webpack voodoo right !",2017-09-14T15:11:02Z,29,,(III) Enhancement
264,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"I'm sure there's a better way, but we run everything through babel on build:
next build && babel .next/*.js --out-dir . --presets=es2015,react",2017-09-14T17:55:30Z,30,,(III) Enhancement
265,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,Did this die? I'm looking for a way to transpile a custom module and seems like it's still not possible.,2017-10-20T22:57:52Z,31,,(III) Enhancement
266,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,@mattfelten it's on the roadmap for v5 üëç,2017-10-21T06:58:26Z,32,,(III) Enhancement
267,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,Does anyone have an example of a workaround for this?,2017-11-11T17:44:14Z,33,,(III) Enhancement
268,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@timneutkens Is there any timeline for this? Appreciate that's often an impossible question but we're trying to determine our stack at work as of now and this is a pretty big blocker for us! :)
Workaround suggestions also valid.",2017-11-14T18:16:44Z,34,,(III) Enhancement
269,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@thealjey realise this is an old comment but your solution probably didn't work because there is an include specified as well which would need to be overridden.
Update: looked into this strategy but it's just not sane given all the different loaders for different module directories within next.js' internal configuration. This will need to be first-class.",2017-11-14T18:42:30Z,35,,(III) Enhancement
270,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@chrisui my (temporary) solution was to use babel-plugin-module-resolver, configured like this - ""plugins"": [[""module-resolver"", {""root"": [""./""]}]]
it is by no means a perfect solution, but, since everything else failed, it works for now
thanks to that I do not need to write a bunch of ../ with every import
this might actually be a better solution to some, though it certainly doesn't help with reusability",2017-11-15T07:19:16Z,36,,(III) Enhancement
271,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@thealjey could you give an example?
I have a project setup where I try this to no avail...
https://github.com/jamesgorrie/nappy
I'd happily try get a PR in as this would make our life so much easier, but there are a few questions like: Should next.js support transpiling of certain modules or should this be up to the transpiler, but the next.js follows the module resolution more strictly. Not sure who to ask or where to start here as new to next.js.",2018-01-12T19:49:24Z,37,,(III) Enhancement
272,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"
it's on the roadmap for v5 üëç

@timneutkens did this make it into v5?",2018-02-06T14:47:52Z,38,,(III) Enhancement
273,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,wondering to know.,2018-02-07T16:51:48Z,39,,(III) Enhancement
274,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,Just look at where its merged. this was merged 8 days ago. 5.0.0 was released 2 days ago. from the canary branch where this is merged into...,2018-02-07T18:32:09Z,40,,(III) Enhancement
275,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"Does anyone have an example on how this can be implemented? Is it supposed to work like this, as mentioned above?

or does it look different?",2018-02-15T06:29:58Z,41,,(III) Enhancement
276,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,#3732,2018-02-15T10:20:45Z,42,,(III) Enhancement
277,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"I'm confused. @timneutkens The abovementioned link is to a PR that is still open. Has this NOT been merged in v5 yet?
EDIT: Never mind, this is just a PR to highlight the example.",2018-02-15T12:39:29Z,43,,(III) Enhancement
278,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"It's an example, you can use the example without it being merged. transpileModules is something we'll tackle later on.
As a general rule of thumb: When an issue is open it's not released.",2018-02-15T12:44:03Z,44,,(III) Enhancement
279,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@brianyingling I've turned the example into a plugin for an interim solution (v5 only).
It's working for us at the moment, until the more robust, official solution is put in place.
https://www.npmjs.com/package/@weco/next-plugin-transpile-modules",2018-02-15T16:09:54Z,45,,(III) Enhancement
280,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"I would love to see an example of this for a single module in the application codebase.
For example, I have a module that I use both server and client side. I haven't been able to get any of the above examples to work, either by factoring the module into its own separate module and yarn linking it, or by hacking the webpack rules.
Here's a simple repro: https://github.com/statico/nextjs-with-async-lib

@timneutkens tells me this is because I'm using async/await in the shared module. I guess my solution might be to remove async/await and change everything to .then()-style callbacks.",2018-04-21T03:42:24Z,46,,(III) Enhancement
281,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"OK, I found a fix that works for me.
First, I added the config.resolve.symlinks = false setting to my next.config.js configuration per #3018 (comment)

Then I put my shared library ‚Äî a .js file that uses CommonJS exports and async/await keywords ‚Äî in a subdir of the application called shared:


And finally I added a postinstall script to link it all together when anyone does a yarn install in the main application:

Now my Mocha tests pass on the server side, my custom Koa server starts up fine, and there's no more crazy Cannot assign to read only property 'exports' of object '#<Object>' in my NextJS pages.",2018-04-21T04:32:17Z,47,,(III) Enhancement
282,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"I had this same issue when upgrading to NextJs 5.1.0. One or two of the node modules in next were not transpiling fat arrow functions and throwing errors in IE11.  I had previously been through setting up individual polyfills and in the end I opted to target those modules files with babel-polyfill in my next.config.js with this:

Hope this helps someone.",2018-06-11T11:48:42Z,48,,(III) Enhancement
283,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"ESM works like a charm.
With a custom Next.js server in index.js, I can run this command to start the server and esm kicks in perfectly, resolving ES modules in Lerna-symlinked project packages.
",2018-06-22T07:56:19Z,49,,(III) Enhancement
284,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@curran cool, can it replace babel-node ?",2018-06-22T09:43:19Z,50,,(III) Enhancement
285,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,@curran I would avoid doing that in production,2018-06-22T09:45:21Z,51,,(III) Enhancement
286,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@blackbing I don't know.
@thealjey Why is that?",2018-06-22T10:09:42Z,52,,(III) Enhancement
287,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"In case anyone is looking for a quick and easy solution, here's what I did. I created a subdirectory, shared/, with any code we want to run on both the backend via standalone Node script and client via NextJS. It has its own package.json and declares its name as @myproject/shared.
Then, in the main (parent) project, I added a postinstall script to package.json like this: cd shared && yarn -s unlink >/dev/null 2>&1 ; yarn -s link && yarn -s && yarn link @myproject/shared ‚Äî then run yarn at least once, and change your imports to import { whatever } from '@myproject/shared/somefile'
This way the shared code works without any crazy transpilation steps, plus you don't have to re-run yarn/npm each time you make an update since yarn link makes a symlink.",2018-06-22T18:34:07Z,53,,(III) Enhancement
288,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"For those using TypeScript, @weco/next-plugin-transpile-modules should not work. I created a fork to handle Next's withTypescript: https://github.com/KeitIG/next-plugin-transpile-modules
I still need to figure out how to do things properly when we need to have server-side code in TypeScript too though.",2018-08-09T09:07:47Z,54,,(III) Enhancement
289,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,Any news on this?,2018-08-25T21:00:47Z,55,,(III) Enhancement
290,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,@bogdansoare I am using https://github.com/KeitIG/next-plugin-transpile-modules,2018-08-27T07:30:52Z,56,,(III) Enhancement
291,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"And yet another one by me, in the following gist. It handles TypeScript, and also specific packages of a @scope, rather than all packages. https://gist.github.com/trusktr/44400d0d016c506629b4f914799dc9cd",2018-09-20T23:56:40Z,57,,(III) Enhancement
292,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"I just put together a simple working example that uses esm and lerna
https://github.com/curran/nextjs-esm-example
/cc @jdalton",2018-09-30T14:34:59Z,58,,(III) Enhancement
293,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"Personally got this working with the following next.config.js:

It babels everything in node_modules, which I needed in order to achieve IE 11 compatibility...",2018-11-09T19:11:30Z,59,,(III) Enhancement
294,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"I'd also appreciate a solution for this, struggling with adding non-transpiled npm packages to my project. Had to dowload them to vendor/ for now :(
Really annoying",2019-01-07T13:25:57Z,60,,(III) Enhancement
295,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,@bel0v I believe you should already be able to accomplish this with next-plugin-transpile-modules. This issue should likely be closed. cc/ @timneutkens,2019-01-07T13:30:29Z,61,,(III) Enhancement
296,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"I'd still like to investigate alternative solutions.
Recently Jamie wrote a very detailed thread about the issue of compiling node_modules: https://twitter.com/jamiebuilds/status/1080840492525350912",2019-01-07T13:45:44Z,62,,(III) Enhancement
297,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"I read the thread by Jamie, though I would also like to share Henry Zhu and Babel's take on this situation and solution.
https://babeljs.io/blog/2018/06/26/on-consuming-and-publishing-es2015+-packages
(Not disagreeing with Tim, just thought I'd share, many pros and cons. Might help Tim in investigating alternative solutions)",2019-01-07T13:55:30Z,63,,(III) Enhancement
298,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"Yeah we've been talking with many people about this issue the past half year, including Henry üòÑ",2019-01-07T14:05:11Z,64,,(III) Enhancement
299,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"Concerns about transpiling node_modules notwithstanding, wanting to transpile your own packages in a monorepo is a very common requirement, to which these concerns do not apply",2019-01-07T17:10:06Z,65,,(III) Enhancement
300,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,@dcalhoun I've tried it but unfortunately I still get unexpected token error. There is an open Next 7 issue on this plugin which might be related,2019-01-07T19:18:38Z,66,,(III) Enhancement
301,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@bel0v
You should read the FAQ ;) there's a solution to this problem: https://github.com/martpie/next-plugin-transpile-modules#i-have-trouble-making-it-work-with-nextjs-7
I've been using this plugin on multiple projects, and it gets the job done nicely. The Next 7 issue is weird, I am not sure if this is coming from Next or Babel, I opened an issue here anyway: #5393",2019-01-07T19:21:55Z,67,,(III) Enhancement
302,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,@martpie yeah I believe I've tried that.. anyways I'll give it another try,2019-01-07T19:24:47Z,68,,(III) Enhancement
303,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@martpie we've started using next7 with a consistent babel.config.js, and yarn workspaces, I might see if I can setup a simple example.",2019-01-07T20:19:35Z,69,,(III) Enhancement
304,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"I have forked basic example here
https://github.com/bel0v/learnnextjs-demo
in it, I installed an untranspiled dependency (wired-elements), got a build error Unhandled Rejection (SyntaxError): Unexpected token { and tried to fix it suggested way.
I'm thinking maybe I need some additional babel plugins for it to work.. ü§î",2019-01-07T20:40:25Z,70,,(III) Enhancement
305,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@bel0v in the FAQ again, there is an explanation on why Lerna setups do not work (TL,DR; you are probably using is wrong)",2019-01-07T22:08:35Z,71,,(III) Enhancement
306,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@martpie ah, got it! Didn't realise the third-party package was setup with Lerna. Thanks",2019-01-08T09:48:37Z,72,,(III) Enhancement
307,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"It seems https://twitter.com/jamiebuilds has been suspended, so can't read the thread there anymore. #3018 Got closed in reference to this issue, so I'm wondering what the alternative approaches being considered are?
Do these represent the state of the art / best practices of next.js for these use-cases atm?
https://github.com/curran/nextjs-esm-example
https://github.com/wellcometrust/next-plugin-transpile-modules
https://github.com/martpie/next-transpile-modules
https://github.com/zeit/next.js/tree/canary/examples/with-yarn-workspaces",2019-03-09T14:49:50Z,73,,(III) Enhancement
308,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"So, if you, like me, are working on a project that has to support IE11, you really have to transpile all of the code inside node_modules/. In Next.js 7.x I was using the following setup, which worked great.
Unfortunately, it stopped working in Next.js 8.x with errors that modules failed to import other modules because they didn't have a default export. I then came up with the below config for Next.js 8.x, which only transpiles the code in node_modules/ with @babel/preset-env, and no other plugins.
This is combined by setting my browserlist property in the package.json:

Next 7.x
next.config.js

Next.js 8.x
next.config.js

Unfortunately, I haven't figured out how to use @babel/plugin-transform-runtime with this setup yet, so it will probably spit out quite a few helpers in the code üòû hopefully gzip takes care of it üòÜ üòÖ

I think it would be awesome if Next.js could give us an option to correctly transpile node_modules/ to work with whatever browserlist you have. It seems like any large sites that have corporate users kind of are dependent on this to properly support older browsers.",2019-05-21T10:33:50Z,74,,(III) Enhancement
309,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"As the maintainer of next-transpile-modules (based on the awesome work of @jamesgorrie), I am happy to help anyone facing this issue here.
I've been working on professional projects for more than a year with this plugin, and so far it played nicely.
Native support from Next.js would of course be awesome and I would be happy to help integrating this feature into the next package. I know Tim had some ideas he wanted to try, but anyway.
Cheers!",2019-05-21T11:20:33Z,75,,(III) Enhancement
310,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@martpie I quickly looked at your project, but didn't find a quick way to transpile all modules, is that possible? ‚ò∫Ô∏è
Also, I see that you are picking options.defaultLoaders.babel and using that as the babel loader. When doing that with Next.js 8.x I had the problem that some modules would fail to be properly recognised as a CJS module after that, and then other libs would fail to import them, e.g:

That's why I switched to providing a custom babel config for node_modules/, which only transpile the code using preset-env, and skips the Next.js-specific transforms. What do you think of this approach?
Cheers üçª",2019-05-21T12:24:57Z,76,,(III) Enhancement
311,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@LinusU Maybe try transpileModules: ['(.*?)'] and tell me if it works?
But it may not be working in a future major release, so be careful.
More generally, I don't recommend (read ""highly discourage"") to transpile the whole node_modules folder, it will take forever to compile and packages should provide ES3-compatible code (so IE11 compatible).
Only transpile the module you need to! (like lodash-es, local modules etc...)",2019-05-21T13:00:18Z,77,,(III) Enhancement
312,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"
packages should provide ES3-compatible code (so IE11 compatible).

This is not the reality I've seen though, and I actually don't agree. The module authors will never know exactly which browsers I'm targeting, and if they ship older code they will potentially penalize users that are targeting modern browsers.

it will take forever to compile

It's a bit slow at startup for me, but after that, it seems to be cached and when making changes to a specific page I see near-instant reloads.

Only transpile the module you need to!

This would require me to know exactly which packages are compatible with IE11 and which aren't, as well as keeping this information up to date anytime any dependency (even transient dependencies) changes. I don't see how this is realistic ü§î",2019-05-21T13:30:51Z,78,,(III) Enhancement
313,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"The important thing is that ESM entry points that are provided in package.json module are commonly ES5 with ES6 imports/export for tree shaking. So this is the job for a bundler (Webpack) and not transpiler (Babel), unless stated otherwise. A lot of well-mainatained packages already have ESM entry points, e.g. redux/es for Redux that was mentioned by OP.",2019-07-30T18:43:27Z,79,,(III) Enhancement
314,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"
If you're looking at doing this with next.config.js: module.exports = { webpack: (config, then config.module.rules has a few things, looks like you need to change one of these rules, or add one?:

Looking forward to the simpler syntax suggested.

Works fine for me
",2019-08-06T07:12:53Z,80,,(III) Enhancement
315,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"I ran into this issue using a Lerna mono repo and was scratching my head as to what the cause was. Since the error is coming from webpack it doesn't give good details besides that it's missing a loader, which isn't helpful. Thankfully I found this github issue!
I'm going to leave my solution here for anyone else searching for this issue and is also using Lerna:
Create a prepublish script for the shared package that transpiles the source into a dist directory and tell Lerna to point to the dist directory when linking:

Now when you lerna bootstrap it'll run the prepublish script and transpile the source so Next can consume it.",2019-10-28T03:03:51Z,81,,(III) Enhancement
316,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,If you're using lerna you can make symlinks to get transpiled using next-transpile-modules. How to use that package with lerna is written at the bottom of the documentation.,2019-11-06T06:42:08Z,82,,(III) Enhancement
317,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"For anyone searching for sharing code across NextJs apps, I just like to report that @LinusU's solution worked for me when trying to share React components and utils between multiple NextJs apps across my mono repo:

I'm using the latest version of NextJs at the time of this post.",2019-12-26T11:27:14Z,83,,(III) Enhancement
318,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@Lwdthe1 I tried your code and initially got this error:

Did some tweaking and ended up with this:

But the ran into another error:

which seems to have been faced before in #2850 and #883.
So it does seem like the only solution is: https://github.com/martpie/next-transpile-modules#but-i-really-need-to-make-it-work-with-lerna",2020-01-01T11:12:24Z,84,,(III) Enhancement
319,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"From what I've heard there will be RFC presented soon how Next.js is planning to solve this issue, but if someone needs to fix it right now, I've published on npm my solution from #10098 which you can use by putting following in package.json:

and following to next.config.js:

(in my case I needed all turf files to be precompiled with babel)",2020-01-15T11:29:18Z,85,,(III) Enhancement
320,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"This issue have any progress?
I use next.js 9.2.0, but babelIncludeRegexes option not working",2020-02-12T02:06:13Z,86,,(III) Enhancement
321,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"
This issue have any progress?

next-transpile-modules aims to solve this problem exactly, did you give it a try?",2020-02-12T06:55:27Z,87,,(III) Enhancement
322,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"Hi @martpie,
Already solve my problem .babelrc file edit. I reference this issue
Thx",2020-02-13T03:42:33Z,88,,(III) Enhancement
323,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@martpie I am using next-transpile-modules but still, I am facing below error while I am trying to build the application. I am using monorepo with shared codebase. Trying to access components from shared like '@myapp/shared/components/componentname.js'. I am using nextjs 9.x and custom next.config.js.
Error
`
Module parse failed: Unexpected token (12:4)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
| const Spinner = props => {
|   const renderDefaultSpinner = (spinnerClass, { ...others }) => (
>     <div className=""spinner"" {...others} />
|   );
|

Build error occurred
Error: > Build failed because of webpack errors
`

next.config.js
const withTM = require('next-transpile-modules')(['@myapp']); module.exports = withPlugins([withTM, withBundleAnalyzer], { ... }
Please help what I am doing wrong here.",2020-02-14T10:12:03Z,89,,(III) Enhancement
324,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,@raghav1086 Can you open an issue on the repo? ;) it will avoid noise for people out here.,2020-02-14T17:23:10Z,90,1.0,(III) Enhancement
325,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"+1
I have a src/ directory for my project and lib/ for a starter framework that exports some common utils/wrappers that I reuse throughout a few different nextjs apps (my starting point)
lib does not get noticed when I start the dev server. any components from lib/ don't go through the loader and give an error",2020-02-22T00:56:06Z,91,,(III) Enhancement
326,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"I used a variation of @Lwdthe1's solution (#706 (comment)) to fix the src and lib issue in my comment above. Basically the same thing except this uses config.resolve.modules instead of looping through the aliasPathsToResolve array.
",2020-02-22T14:05:43Z,92,,(III) Enhancement
327,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"What's the working solution for lerna, nextjs, and babel these days?
I'm trying to avoid pre-transpiling my libraries before import, and I've hit a brick wall with every solution here. Here's what I can't get working:

next-transpile-modules.
resetting the preset-env settings.
updating the next-babel-loader include and exclude rules to pass/fail respectively.
",2020-03-31T15:27:51Z,93,,(III) Enhancement
328,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,@mikestopcontinues next-transpile-modules worked out of the box for me with TypeScript.,2020-04-01T03:39:26Z,94,,(III) Enhancement
329,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@calebmpeterson and @martpie (I see you! üëÄ). I circled back to the plug, and the problem seems to be that there's no way to reference sub-modules. For instance, pattern '@mono/components' won't support importing '@mono/components/Div' or whatever. And specifying '@mono/components/Div' as the pattern doesn't work either... not that I would want to do that for every shared component. I also tried reverse engineering the regex generation to create match patterns, and while the output regex works, something else is going on under the hood that isn't.
Ideally, I would just like to specify '@mono` to take care of everything, and leave my package.json to be the single source of truth for what each of my apps depends on. Similarly, I would like to avoid maintaining index files that import/export everything in every single one of my libs just to be able to access sub-modules.",2020-04-01T15:52:44Z,95,,(III) Enhancement
330,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"To circle back, I believe the current issue could be entirely resolved if there were some way to pass rootMode: 'upward' through next-babel-loader, so that babel could handle the transpiling logic. Maybe this opens up other Next-related issues, but the root of the problem seems to be the atypical way Next is tangled into webpack and babel. Surely, there's a way to leave babel-loader separate from Next's additional logic?",2020-04-01T15:58:08Z,96,,(III) Enhancement
331,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,Just an update on the next-transpile-modules front. I had misdiagnosed the error. No import works using this method (index or submodule) if you need a custom .babelrc config. The custom settings just don't get applied to the required code. This is again a rootMode: 'upward' issue.,2020-04-02T13:25:50Z,97,,(III) Enhancement
332,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"@mikestopcontinues You need to use babel.config.js (global config) with next-transpile-modules, and not .babelrc (local config), it is explained in the FAQ ;)",2020-04-02T13:28:56Z,98,,(III) Enhancement
333,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,@martpie You have no idea how embarrassed I am. I had to have read that line a dozen times the last few weeks and never bothered to click through to the issue. That totally worked. Thanks!,2020-04-02T13:59:13Z,99,,(III) Enhancement
334,https://github.com/vercel/next.js/discussions/32223,2017-01-09T03:39:05Z,"next-transpile-modules broke React for me. It now throws that I use invalid hooks, while I transpiled THREE example module",2020-04-10T20:26:14Z,100,,(III) Enhancement
335,https://github.com/vercel/next.js/discussions/13682,2020-06-02T17:13:27Z,"I have a similar issue, explained there:
#13646",2020-06-03T10:54:58Z,1,,(II) Unrelated Repository
336,https://github.com/vercel/next.js/discussions/13682,2020-06-02T17:13:27Z,I am seeing this on my end as well today - lighthouse scores for various pages on my website dropped from ~90 to ~75.,2020-06-03T15:28:28Z,2,,(II) Unrelated Repository
337,https://github.com/vercel/next.js/discussions/13682,2020-06-02T17:13:27Z,"I opened an issue on LightHouse.
GoogleChrome/lighthouse#10904",2020-06-03T15:36:47Z,3,1.0,(II) Unrelated Repository
338,https://github.com/vercel/next.js/discussions/13682,2020-06-02T17:13:27Z,"Hey everyone Lighthouse maintainer here üëã
This is working as intended in Lighthouse. It is a new audit in 6.0 that highlights files that have a considerable amount of unused JavaScript. In that URL that's highlighted, about 70% of the main chunk is unused. You can explore each line in detail using the ""Coverage"" panel in DevTools.

screenshot of the coverage panel highlighting unused portions of the main chunk related to animations
It is somewhat inevitable that some subset of JavaScript will be unused when using someone's library. They will have built features that you simply don't need. It's not important to obsess over 100% usage as that will be virtually impossible, but when it's a rather large amount of unused bytes, it's worth taking a look to see what you might be able to split out or if you really need the library.
Also worth noting that this new audit highlighting unused javascript in no way impacts the Lighthouse score. It is only suggesting one potential approach to help improve performance. Opportunities never impact the score and the score changes are a result of the new metrics that were added in 6.0, LCP and TBT.",2020-06-03T15:54:18Z,4,,(II) Unrelated Repository
339,https://github.com/vercel/next.js/discussions/13682,2020-06-02T17:13:27Z,"Hi,
I would like a Plugin that would actually do that on my website.
Would anyone have a Plugin to indicate?
Need a plugin that really tires the css and th JS unused on the page.
That I can fulfill LightHouse's requests.
I'm using Wordpress, currently the Plugin wich is W3 Total Cache.
Thanks for all
Tito",2020-06-25T18:27:22Z,5,,(II) Unrelated Repository
340,https://github.com/vercel/next.js/discussions/24091,2021-04-15T09:14:12Z,"Ideally there would be an allowlist and ignorelist for query parameters either on a global or per-page basis.
An allowlist would be helpful since every third-party service linking to the site could add tracking parameters (social media, newsletter tools, affiliate links etc....)",2021-05-09T19:06:42Z,1,,(III) Enhancement
341,https://github.com/vercel/next.js/discussions/24091,2021-04-15T09:14:12Z,Anyone else having this issue and a potential solution? Dynamic query parameters from third parties are really pushing my site towards vercel's computation limit üò±,2021-05-13T12:03:58Z,2,,(III) Enhancement
342,https://github.com/vercel/next.js/discussions/24091,2021-04-15T09:14:12Z,"I have opened a issue #27638 about this, waiting help",2021-08-03T13:19:48Z,3,1.0,(III) Enhancement
343,https://github.com/vercel/next.js/discussions/24091,2021-04-15T09:14:12Z,See #27638 (comment),2021-09-30T07:13:00Z,4,,(III) Enhancement
344,https://github.com/vercel/next.js/discussions/17213,2020-09-18T22:13:27Z,Any update on this issue?,2020-12-02T18:46:58Z,1,,(III) Enhancement
345,https://github.com/vercel/next.js/discussions/17213,2020-09-18T22:13:27Z,Maybe posting this as an issue (not a discussion) will draw more attention?,2020-12-30T10:11:52Z,2,1.0,(III) Enhancement
346,https://github.com/vercel/next.js/discussions/17213,2020-09-18T22:13:27Z,"This one tripped me up - when using next dev, it wasn't working as I'd expect (must be due to the browser not thinking it's a fresh page load with Fast Refresh, maybe?). When I ran next build && next start and also when deployed to prod, it worked!",2021-04-09T19:52:56Z,3,,(III) Enhancement
347,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"I'd absolutely love to see this working too, along with explanations/documentation/example about it.
Note that next/prefetch doesn't yet really allow offline behaviour, because it doesn't prefetch data: #740
Not directly related to Next.js but I also wonder how much data can actually be kept offline (e.g if a webapp has videos etc -- is there some hard limit in the browser? And what about mobile?), how the user could specifically ask for one thing to be pre-downloaded for later, etc. I also previously mentioned things here: #24 (comment) (before next/prefetch was a thing).",2017-01-23T12:08:31Z,1,,(III) Enhancement
348,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"There are varying data limits in different platforms, browsers and versions. You can test the limits in the ""Browser storage abuser"": https://demo.agektmr.com/storage/
The standardized method which is intended for offline storage and caching is IndexedDB. It is now supported even in iOS Safari (v10), but there it has performance issues. Otherwise it has wide support now: http://caniuse.com/#feat=indexeddb
E.g. PouchDB still uses WebSQL instead of IndexedDB on Safari. pouchdb/pouchdb#5572
Same with localForage: localForage/localForage#604
PouchDB has a nice summary of data limits: https://pouchdb.com/faq.html#data_limits (slightly out of date)
And this even older article also mention how to handle some out of storage errors and other aspects regarding mobile browsers https://www.html5rocks.com/en/tutorials/offline/quota-research/
You can also query for your current quota and request more persistent storage in some browsers: https://jakearchibald.com/2014/offline-cookbook/#cache-persistence
Another way would be to use long cache expiration values and immutable cache control together with service workers. This would easily allow user specified caching, just by making a http request for each selected resource. This would also work quite nicely in old browsers. But to be able to maintain and manually delete various caches to avoid limits would only be possible in browsers supporting service workers.
https://developer.mozilla.org/en-US/docs/Web/API/Cache
https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers
Just remember, when you run out of space, the browser can evict an entire origin at a time until it is within limits:
https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Browser_storage_limits_and_eviction_criteria",2017-01-23T14:39:24Z,2,,(III) Enhancement
349,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"Another useful article by Addy Osmani: https://medium.com/dev-channel/offline-storage-for-progressive-web-apps-70d52695513c#.9vja3t8gp
Apparently there is also a Storage api being worked on: https://storage.spec.whatwg.org/
This allows actually persistent storage:
""Traditionally, as the user runs out of storage space on their device, the data stored with these APIs gets lost without the user being able to intervene. However, persistent boxes cannot be cleared without consent by the user. This thus brings data guarantees users have enjoyed on native platforms to the web.""",2017-01-23T15:28:58Z,3,,(III) Enhancement
350,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,IMO making a site/app work offline involves a lot of decisions a framework shouldn't take by itself. I'll work on an example on a site working offline with a service worker but there are different techniques for different kind of apps.,2017-01-24T14:59:01Z,4,,(III) Enhancement
351,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"thanks @impronunciable . Do you plan to use webpack-offline or something else?
what kind of decisions are you talking about? I think we can divide the problem in two main issues:


Static assets caching: Like js, HTML, images, ... this is almost already implemented, at least in the offline flavor and with the exclusion of /static, and given that we are using react it should have one preferred implementation, via webpack-offline and service workers.


Data caching: state, queries, volatile data, .... pose more concerns, as it at least requires to presume how the users will load data. Maybe we could show how to preserve state with redux, and then people will put data in redux as they prefer. Or maybe we could use GraphQL/Apollo which should cover such a case by caching queries and mutations.

",2017-01-24T16:17:23Z,5,,(III) Enhancement
352,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@servermeta it really depends on your case. I'm finishing implementing an aggressive caching strategy without using plugins, just a custom server and a strategy from https://serviceworke.rs/",2017-01-24T16:18:38Z,6,,(III) Enhancement
353,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"I have it working here. Battled a lot with Offline-Plugin, had some issues with the .next directory then i switched to sw-precache-webpack-plugin, ignored .next directory and served all assets to the sw",2017-01-24T19:22:23Z,7,,(III) Enhancement
354,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"thank you @ooade , well done, you saved me a lot of time.
Anyhow I see that state does not persist between refreshes, reloads. I'll try to think how to add this feature.",2017-01-24T21:08:58Z,8,,(III) Enhancement
355,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"thank @ooade . By localhost you mean a local db, like mongodb, or localstorage?
I think we should divide the problem: offline data retrieving should be left to the dev, while we could preserve redux state.  Check this:
https://github.com/rt2zz/redux-persist
with this we can store state in localstorage, so it can persist between refreshes, reloads, tabs and sessions.",2017-01-26T15:58:42Z,9,,(III) Enhancement
356,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"Hey folks. My team at Google work on a few Service Worker libraries (with Webpack plugins) like https://github.com/GoogleChrome/sw-precache and https://github.com/GoogleChrome/sw-toolbox used on React/Webpack heavy sites like Lyft, Housing.com, Flipkart etc.
If Next decides to explore offline support we would be happy to share some pointers. I think there's great opportunity for prescribing patterns like PRPL out of the box, given code-splitting is already being done. Production-only Service Worker caching would be a neat addition.
In addition to giving you instant repeat loads for those pages, it would also opt you early on into V8's code caching so your parse/compile times for repeat visits would be lower than today.
Feel free to holler if any of this is interesting @rauchg :)",2017-02-15T21:31:10Z,10,,(III) Enhancement
357,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,@addyosmani offline support is one of our top priorities post 2.0 stable,2017-02-15T22:06:00Z,11,,(III) Enhancement
358,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@rauchg any estimation regarding 2.0 stable release date?
We're about to kick off a full on production and we would love to use Next.js
I will appreciate any type of estimation, days / weeks / months...
Thank you so much!",2017-02-17T18:42:47Z,12,,(III) Enhancement
359,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,@Ajar-Ajar 2.0.0 was released today.,2017-03-27T13:40:52Z,13,,(III) Enhancement
360,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,@rauchg is the offline-first support going to be tracked here or are you going to create another issue for it?,2017-03-31T09:53:24Z,14,,(III) Enhancement
361,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,Please also see the newly open-sourced redux-offline by @jevakallio. Would be awesome to have a next + redux-offline example.,2017-03-31T10:30:09Z,15,,(III) Enhancement
362,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"So do we have any info on how to achieve this, I been trying to do it the next.config.js and installing the offline-plugin, but I could not get it to work. Next is an awesome project but it would be super complete(and cooler) if it had this feature(Offline-first )out of the box!",2017-04-21T00:22:19Z,16,,(III) Enhancement
363,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,@saulflores95 Using @ooade's NextSimpleStarter's way did work for me :),2017-04-21T06:49:32Z,17,,(III) Enhancement
364,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,@AugustinLF NextSimpleStarter doesn't offer offline capabilities. ooade/NextSimpleStarter#23 (comment),2017-04-21T07:33:32Z,18,,(III) Enhancement
365,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@sedubois For anyone coming in and reading this, that's a bit of an overstatement. To be fair, it does have some offline capabilities with the use of sw-precache and sw-toolbox. My app works offline solely with those two tools, but the initial state of my app doesn't change. If I was trying to be specific, I might say that it does not offer offline solutions for constructing state beyond what was initially sent down the wire.",2017-04-21T15:29:59Z,19,,(III) Enhancement
366,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@timmywil,do you have a GitHub repo of your nextjs offline capable app? Thanks.",2017-05-06T18:48:46Z,20,,(III) Enhancement
367,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"I just created a (beta) version of next supporting offline using appcache, which is needed for Safari. Please have a look at http://github.com/ssured/nownextmicro",2017-05-12T13:33:53Z,21,,(III) Enhancement
368,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"Hey all, I added offline support to my boilerplate.
https://github.com/Sly777/ran
It's a little bit buggy. So that's why It's named as ""experimental"" üòÑ Anyway, I hope it helps.",2017-06-26T16:35:45Z,22,,(III) Enhancement
369,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,@rauchg Is this feature still a priority?,2017-09-02T19:43:50Z,23,,(III) Enhancement
370,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@rauchg  With next.js 4.0 beta released, are there any chances of offline first support being in the roadmap for that version?",2017-10-22T08:51:55Z,24,,(III) Enhancement
371,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,I would ask for news of the feature ^^,2018-01-25T22:51:23Z,25,,(III) Enhancement
372,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"Next.js 5.0 has been released (congratulations!)  but there is no mention of offline support , is there a new roadmap you would like to share ? thanks for the amazing job done so far",2018-02-06T10:39:06Z,26,,(III) Enhancement
373,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@idhard actually, we may not going to support offline support by default.
(But things might change)
But we are in the process of making sure Next.js doesn't do any magic. So, you'll be able to use direct webpack plugins and loaders as is.
Next 5 is the step one.",2018-02-06T12:16:22Z,27,,(III) Enhancement
374,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@idhard I think it'd be counter intuitive for blanket offline support, some apps definitely won't want that feature to be enabled.
On my personal website I'm using this https://github.com/zeit/next.js/tree/canary/examples/with-sw-precache and we're also going to be using ^ in production at Eaze once iOS 11.3 is released.",2018-02-06T17:41:57Z,28,,(III) Enhancement
375,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@hanford yeah similar discussion has been done on CRA and end up removing support of webworkers by default (facebook/create-react-app#2554 (comment)), however i still think webworkers and PWA are going to be the defacto solution for offline support , so would be good to know if Next's team has some plan of adding an official support , like pre fetched pages.",2018-02-06T18:40:52Z,29,,(III) Enhancement
376,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@idhard yeah, kind of an interesting dilemma for the core team. I've been really happy with the sw-precache plugin i mentioned above.
my personal website is using the sw-precache webpack plugin, along with serving a manifest.json from the static directory. If you're curious, the code is over here .. the commits are a little sloppy, but i added offline support and the manifest json within the last week.",2018-02-06T18:45:15Z,30,,(III) Enhancement
377,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@hanford what happens in iOS 11.3, will it have service workers? Would you have any reference with more info?",2018-02-07T07:15:18Z,31,,(III) Enhancement
378,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@hanford @idhard we tried service workers way before CRA and had a lots of issues.
That's why we decided to build a prefetching solution purely with traditional web caching tech.
It works amazing well. A new set of improvements are coming soon.
Yes of course offline is a place we need SW.
But it's very unstable and hard to use API. Things could go wrong and break your site.
So, we may not want to do it ourselves.
But we want to allow users to use things like sw-precache via Next.js plugin (or simply adding a set of webpack loaders and plugins)",2018-02-07T08:08:17Z,32,,(III) Enhancement
379,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,@sedubiois see https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_11_1.html for Apples plans on iOS Safari. Service Workers are announced,2018-02-07T09:51:24Z,33,,(III) Enhancement
380,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"Yep @ssured @sedubois service workers are landing in Mobile Safari in iOS 11.3 which is pretty exciting! I'm on the iOS 11.3 Beta 2 and there are numerous bugs, (service workers don't get recognized properly when the website is added to the homescreen, but I'm confident apple will fix these before the public release)
I think what @arunoda is suggesting is that Next.js current caching strategy (cache-control headers, etags, etc) is much more stable than service workers. Service workers do enable some really neat new functionalities though, especially getting finer grain control over network requests (returning cached content early) .. But what Next.js works everywhere and considerably less overhead .. (unregistering service workers is a total pain)",2018-02-07T17:24:21Z,34,,(III) Enhancement
381,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@ssured @sedubois I made a little plugin that works the same way as the plugins that Zeit launched the other day .. it should alleviate offline next apps and be pretty straight forward plugging in to your existing apps
Let me know if you have any feedback! https://github.com/hanford/next-offline",2018-02-07T22:54:39Z,35,,(III) Enhancement
382,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@hanford  thanks for making our life a bit easier
@arunoda While the plugin support in next.js 5 is awesome, wouldn't it be much more beneficial for community if all the plugins are hosted in main next.js repo plugins folders, just as all the examples are, instead of an auxiliary repo ? Most developers visit main repo, and thus, potential plugin developers would have much more incentive to create pull request, thereby saving community time wastage due to repetition and inevitable plugin ecosystem fragmentation arising as a result of separate repos.",2018-02-08T06:31:39Z,36,,(III) Enhancement
383,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"For anyone else still deciding on what to do moving forward, I also made use of the sw-precache webpack plugin with relative ease (example, again).",2018-02-08T07:05:53Z,37,,(III) Enhancement
384,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"I was using my own solution but have switched to the solution provided by hanford. I had to make a few modifications in next.config.js to stop the plugin auto registering the service worker, but it seems to be working well.
I now just need to figure out how I can get this working with my custom server. For example I have a route setup as article/:slug. When I visit one of these urls the service worker is trying to dispatch a document for that url. Anybody know how I can stop that and make it serve article instead? This is related to settings in Workbox I guess.",2018-02-19T19:10:51Z,38,,(III) Enhancement
385,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"Should we still be expecting any integration of service workers or offline support in future NextJS releases? Looks like some people were previously saying it was a priority feature, but this issue has been open for over a year and a half...",2018-08-07T15:26:15Z,39,,(III) Enhancement
386,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@caribou-code I can't speak for the Zeit team on their plans for Next.js, but I wrote this awhile ago: https://github.com/hanford/next-offline that allows you to automatically generate a service worker that will work offline.
I've used it in several applications and it's worked pretty well. Under the hood it's utilizing googles workbox, which is a very exciting project: https://developers.google.com/web/tools/workbox/
Some examples where I use next-offline:

https://github.com/hanford/trends
https://github.com/hanford/personal-website
",2018-08-07T15:55:49Z,40,,(III) Enhancement
387,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@hanford I was just using next-offline before posting on here and it's pretty good! In fact it's the only solution I've managed to implement so far that actually works. Good work!
However, I did really want to get a solution working with sw-precache-webpack-plugin because there's an example of this in the NextJS repo, although I can't work out how to configure it to cache and serve all my Next files through the service worker. That plugin seems to be quite popular as well.",2018-08-07T16:06:17Z,41,,(III) Enhancement
388,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"I created NextSimpleStarter a year ago to help resolve this issue. But, it came to my notice that sw-precache alone won't be able to meet most offline requirements so we recently moved to using workbox which solves most of them.
Although, I am yet to update it to current standards(icon sizes and so on), which I will fix in few days. Feel Free to give it a trial. Drop an issue if you don't find it satisfying.",2018-08-07T17:11:38Z,42,,(III) Enhancement
389,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@hanford This looks great. It runs for me in development mode but there's no service worker in that mode. I can't tell from your readme how to make it work in production mode and with a service worker and without a node server. I also deploy my app to Netlify and I've been using next export. My app is totally static. I have no problem not using next export if that's a problem. I'll do whatever's most performant and doesn't cost anything. It's a hobby app, so I'm flexible.
@ooade This looks great too, but I got an error when starting it. Changing ""serverless"" to ""server"" per your instruction fixed that error but then I got the following error
",2019-07-03T14:32:18Z,43,,(III) Enhancement
390,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@dancancro you should definitely be able to use next-offline while also using next-export
Mind opening an issue in next-offline with some steps to reproduce so I can take a deeper look?",2019-07-03T20:18:02Z,44,1.0,(III) Enhancement
391,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@hanford I can do that if you want but I did nothing special and I'm not suggesting anything's broken about the starter. The steps to reproduce the problem are simply your instructions. The only problem is that I don't know how to run it in production mode. Judging from this condition a service worker is not supposed to be registered in dev mode, so what happened for me is expected behavior. I just need some instructions - how to run it in production mode, and if next export is possible, then how to run static, server-rendered code in production mode with next export.",2019-07-03T21:39:15Z,45,,(III) Enhancement
392,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"@dancancro I understand, but that discussion shouldn't be happening here, this is certainly not an issue with Next.js itself.
Please open an issue over here and I'd be happy to take a look / answer questions you might have.
The community doesn't benefit if we have a discussion in an unrelated issue/repo",2019-07-03T21:47:40Z,46,,(III) Enhancement
393,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,"I recently created an easy to use zero config PWA plugin for Next.js: next-pwa
Checkout the example here",2019-07-09T20:33:32Z,47,,(III) Enhancement
394,https://github.com/vercel/next.js/discussions/861,2017-01-23T10:23:38Z,next-offline VS next-pwa comparison can be found in the discussions: #13810,2020-12-12T19:17:15Z,48,,(III) Enhancement
395,https://github.com/vercel/next.js/discussions/19055,2020-11-11T13:45:11Z,Probably related to #11448 and #12343.,2020-11-12T17:34:45Z,1,,(I) Reporting a Bug
396,https://github.com/vercel/next.js/discussions/19055,2020-11-11T13:45:11Z,"I experience the same bug for a whole last year.
This definitely won't be fixed from Discussions and we should open a new issue.",2020-12-15T07:09:27Z,2,1.0,(I) Reporting a Bug
397,https://github.com/vercel/next.js/discussions/19055,2020-11-11T13:45:11Z,Created issue #20203,2020-12-15T15:36:22Z,3,,(I) Reporting a Bug
398,https://github.com/vercel/next.js/discussions/19501,2020-11-24T22:14:18Z,"Are you dual deploying to both?
It sounds like this is an issue with Netlify's support for Next.js. You might have better luck opening an issue here so the maintainers know üëç",2020-11-25T01:39:59Z,1,1.0,(II) Unrelated Repository
399,https://github.com/vercel/next.js/discussions/19315,2020-11-19T13:58:12Z,"Hi, thanks for the information this does appear to be a bug and I opened an issue here to track it",2020-11-19T17:38:38Z,1,1.0,(I) Reporting a Bug
400,https://github.com/vercel/next.js/discussions/18395,2020-10-28T15:20:23Z,"There's currently no way to disable the inline styles, and we're exploring on relying on them even heavier in the future for performance optimizations. Could you open a Next.js issue to discuss this further, though?",2020-10-28T17:26:28Z,1,1.0,(IV) Clarification Request
401,https://github.com/vercel/next.js/discussions/16256,2020-08-17T12:09:10Z,"Hi, I opened a new issue to track this here, thanks for reporting this it is being investigated!",2020-08-17T19:02:08Z,1,1.0,(IV) Clarification Request
402,https://github.com/vercel/next.js/discussions/15553,2020-07-28T05:25:44Z,"Could you try pairing down a smaller, reproducible example that you could share? If you can, this would be a great candidate for an issue.",2020-07-28T13:39:45Z,1,1.0,(IV) Clarification Request
403,https://github.com/vercel/next.js/discussions/15296,2020-07-18T20:44:27Z,You might consider moving this to an issue üëç,2020-07-18T21:34:46Z,1,1.0,(IV) Clarification Request
404,https://github.com/vercel/next.js/discussions/13056,2020-05-18T17:18:01Z,"I've also found this and if i understand it correctly it should even work ""out-of-the-box"" now?
#6205",2020-05-18T17:44:44Z,1,,(III) Enhancement
405,https://github.com/vercel/next.js/discussions/13056,2020-05-18T17:18:01Z,"@olaj  I have this code, I am not sure if it's the thing you need but take a look

config-jest/cssTransform.js



jest.config.js


test command:
",2020-05-18T18:56:59Z,2,,(III) Enhancement
406,https://github.com/vercel/next.js/discussions/13056,2020-05-18T17:18:01Z,"Sorry for the slow reply here but now i just tested with:
https://github.com/vercel/next.js/tree/canary/examples/with-typescript-eslint-jest
Then modified the .babelrc to
{ ""presets"": [""next/babel""], ""env"": { ""production"": { ""plugins"": [""styled-jsx/babel""] }, ""development"": { ""plugins"": [""styled-jsx/babel""] }, ""test"": { ""plugins"": [""styled-jsx/babel-test""] } } } 
Then i created a snapshot. And i still get all the ""jsx-124"" on all of the elements.
<h1 class=""jsx-1639065953 title"" > Welcome to  <a class=""jsx-1639065953"" href=""https://nextjs.org"" > Next.js! </a> </h1> <p class=""jsx-1639065953 description"" > Get started by editing  <code class=""jsx-1639065953"" > pages/index.tsx </code> </p>
Am I missing something?",2020-06-02T10:19:10Z,3,,(III) Enhancement
407,https://github.com/vercel/next.js/discussions/13056,2020-05-18T17:18:01Z,"It looks like Next automatically includes the styled-jsx/babel-test plugin when your NODE_ENV=test: #7747
And I believe your .babelrc should be formatted similar to this in order to load the plugin:

Also here is a previous issue discussing this #6205",2020-06-04T00:49:17Z,4,,(III) Enhancement
408,https://github.com/vercel/next.js/discussions/13056,2020-05-18T17:18:01Z,"@olaj Take a look at my Jest configuration, I bet you'll learn quite a few things.
https://github.com/UnlyEd/next-right-now/tree/v2-mst-aptd-gcms-lcz-sty
It uses Jest, snapshots, TS and more!",2020-06-08T22:04:00Z,5,,(III) Enhancement
409,https://github.com/vercel/next.js/discussions/13056,2020-05-18T17:18:01Z,"I went ahead and opened this issue, I'm getting the same error as @olaj
vercel/styled-jsx#649",2020-06-28T15:58:11Z,6,1.0,(III) Enhancement
410,https://github.com/vercel/next.js/discussions/11530,2020-03-31T20:15:42Z,This is an issue with next-auth. That repo is not maintained or recommended by us so please create an issue in their repo instead üôè,2020-03-31T20:37:44Z,1,1.0,(II) Unrelated Repository
411,https://github.com/vercel/next.js/discussions/11530,2020-03-31T20:15:42Z,"Hi @shea256
I am the lead maintainer of next-auth
I can confirm, as @lfades says, that this problem is indeed an issue next-auth v1 and not with to Next.js or now.sh. NextAuth.js v1 was created for now.sh v1 and is not compatible with now.sh from Vercel today and does not take advantage of features in recent versions of Next.js.
There is some good news though!
You might want to check out next-auth.js.org for the beta of v2 or check out next-auth-example.now.sh for a demo.

Supports Next.js 9+ and Serverless
Much easier to set up and use than v1
Supports many popular providers, including Auth0
Install it will npm next-auth@beta

NextAuth.js v2 is an open source community project. It's currently in beta and the current release candidate is looking good so far and we expect to release v2 out of beta in later this week. ü§û",2020-06-08T13:23:05Z,2,,(II) Unrelated Repository
412,https://github.com/vercel/next.js/discussions/13675,2020-06-02T15:36:09Z,"FWIW, in order to carry on dev, I've moved these Context providers into a <Layout> component that's included on every page; however, that's obviously not ideal as it reloads the Context with every page transition. And like this, it works with no errors.
This has left me wondering: what's special about _app.js that's causing this to fail?",2020-06-02T16:01:39Z,1,,(II) Unrelated Repository
413,https://github.com/vercel/next.js/discussions/13675,2020-06-02T15:36:09Z,"Damn and blast... @jamesmosier I've also done next build && next start locally and it works fine, which must mean that there must be something weird going on with the ""Next on Firebase"" starter that I used here
I guess I originally thought that it might have been a Next issue as react-modal works elsewhere in the app (and elsewhere in statically generated pages in the same app ‚Äì just not those in _app.js).
I'll open an issue on that repo. Thanks for your support! üëç",2020-06-02T19:31:53Z,2,1.0,(II) Unrelated Repository
414,https://github.com/vercel/next.js/discussions/12155,2020-04-23T22:48:33Z,"I‚Äôm assuming that the data comes from a headless CMS, so shouldn‚Äôt you be using getStaticProps instead of getServerSideProps? It‚Äôs in their docs:
https://nextjs.org/docs/basic-features/data-fetching#when-should-i-use-getstaticprops",2020-04-28T21:04:11Z,1,,(III) Enhancement
415,https://github.com/vercel/next.js/discussions/12155,2020-04-23T22:48:33Z,"I am getting the same error, one that is incredibly hard to debug, but thank @LassiterJ  for enlightening me to what was happening.
In my getServerSideProps function, context.params is overwritten. Simply put, when the page makes a request (ex: /static/image.png) stemming from <img src='/static/image.png' /> the context.params in my getServerSideProps are overwritten to {param1name: 'static', param2name: 'image.png'}
I created an issue here: #13566",2020-05-29T22:51:36Z,2,1.0,(III) Enhancement
416,https://github.com/vercel/next.js/discussions/11704,2020-04-06T17:16:21Z,Please open this bug on their issue tracker. It's not related to Next.js!,2020-04-13T18:21:00Z,1,1.0,(II) Unrelated Repository
417,https://github.com/vercel/vercel/discussions/6744,2021-09-21T01:43:26Z,Hey! Would you mind opening an issue on that repo instead?,2021-09-21T01:48:44Z,1,1.0,(II) Unrelated Repository
418,https://github.com/vercel/vercel/discussions/5147,2020-09-04T15:34:01Z,"Oh, it's not just me.  This is driving me loopy! :)",2020-09-14T10:00:11Z,1,,(II) Unrelated Repository
419,https://github.com/vercel/vercel/discussions/5147,2020-09-04T15:34:01Z,"Please create an issue in the Hyper.js repository: https://github.com/vercel/hyper
We are also looking for maintainers üòÉ",2020-09-15T13:00:15Z,2,1.0,(II) Unrelated Repository
420,https://github.com/vercel/vercel/discussions/4799,2020-07-07T12:12:20Z,"Hello,
This seems like a platform issue, indeed. Please reach out to https://vercel.com/support/request for further assistance.",2020-07-07T21:51:57Z,1,,(I) Reporting a Bug
421,https://github.com/vercel/vercel/discussions/4799,2020-07-07T12:12:20Z,I've had the same issue with using fallback: true in getStaticPaths with the Nextjs framework. The only workaround I've found is to use fallback: false instead. Has anyone else figured out a different workaround that works with fallback: true?,2020-07-08T16:28:57Z,2,,(I) Reporting a Bug
422,https://github.com/vercel/vercel/discussions/4799,2020-07-07T12:12:20Z,"@paulogdm thanks, I did so.
@pcwa-ahendricks yeah, I figure that out too. I opened an issue in NextJS repo: vercel/next.js#14923
I was told by support that I may need to wait for this PR #4803 üòõ",2020-07-08T16:46:17Z,3,1.0,(I) Reporting a Bug
423,https://github.com/vercel/vercel/discussions/4799,2020-07-07T12:12:20Z,Thanks for update @eddyw . That PR looks promising.,2020-07-08T17:09:45Z,4,,(I) Reporting a Bug
424,https://github.com/parcel-bundler/parcel/discussions/7618,2022-01-28T13:59:00Z,"No, it should return the same code each time. If not, that's a bug. If you have a reproduction, you could file an issue.",2022-01-31T02:47:16Z,1,1.0,(I) Reporting a Bug
425,https://github.com/parcel-bundler/parcel/discussions/4992,2020-08-08T02:05:34Z,"Currently that's impossible as the way it works is that a thrown error will result in the next resolver getting a chance to resolve the asset as an error usually means that it can't resolve it.
We might add a flag or something similar to it that we can use like the MODULE_NOT_FOUND in the standard node resolver, so we know what kind of error occurred although not entirely sure what the best approach for this is.",2020-08-08T07:14:08Z,1,,(III) Enhancement
426,https://github.com/parcel-bundler/parcel/discussions/4992,2020-08-08T02:05:34Z,"
not entirely sure what the best approach for this is.

Making the return type Promise<Diagnostic | ?ResolveResult> (for the cases where the default resolver throws) and making throwing errors actually fail the build?",2020-08-08T16:49:46Z,2,,(III) Enhancement
427,https://github.com/parcel-bundler/parcel/discussions/4992,2020-08-08T02:05:34Z,"Thanks. Even though it's not the answer I was hoping for, it's definitely helpful. In case it helps to hear our use case, we are creating bundles of untrusted, third-party code (which we call extensions). We want to allow the third-party code to import/require other files that the third-party provided but not any arbitrary file on the server. We also want the third-party code to be able to import/require certain npm packages, but not others. I was hoping to set up my resolvers in my .parcelrc like this: ""resolvers"": [""parcel-resolver-limit-extension-dependencies"",""@parcel/resolver-default""], where parcel-resolver-limit-extension-dependencies would be able to fail the build if the extensions depended on something that isn't allowed.
I'll probably either try to call @parcel/resolver-default directly from parcel-resolver-limit-extension-requires if the thing being required is allowed OR I'll write a babel plugin that detects imports/requires and fails the build if an infraction is found (throwing an error from a Babel plugin does fail the build).",2020-08-11T15:52:53Z,3,,(III) Enhancement
428,https://github.com/parcel-bundler/parcel/discussions/4992,2020-08-08T02:05:34Z,@DeMoorJasper @mischnic Is this being tracked somewhere already or should I create an issue for it?,2020-08-20T16:14:56Z,4,1.0,(III) Enhancement
429,https://github.com/gpbl/react-day-picker/discussions/1149,2020-04-14T03:52:46Z,@Eric24 thanks for your suggestion! This should go in the next major release. Do you think a timezone prop would work?,2020-04-17T10:55:40Z,1,,(IV) Clarification Request
430,https://github.com/gpbl/react-day-picker/discussions/1149,2020-04-14T03:52:46Z,"Yes, timezone would certainly make sense as a prop; the other option is tz, which is pretty common.
By default, the component would work as it does now (using the browser's timezone), but if defined, it just uses the prop value to explicitly set the timezone of the passed-in date value.",2020-04-17T12:41:43Z,2,,(IV) Clarification Request
431,https://github.com/gpbl/react-day-picker/discussions/1149,2020-04-14T03:52:46Z,hey guys i badly need this.. is there any update for this ? . or do you have part-time of solution how to fix it ?,2020-09-25T09:53:18Z,3,,(IV) Clarification Request
432,https://github.com/gpbl/react-day-picker/discussions/1149,2020-04-14T03:52:46Z,or do you guys know whats the timeline for this ? if thats far i can replace it with a datepicker with supports timezone for now.,2020-10-02T06:23:01Z,4,,(IV) Clarification Request
433,https://github.com/gpbl/react-day-picker/discussions/1149,2020-04-14T03:52:46Z,"Any update on this?
I see that the issue ""Ability to set timezone #1010"" is marked as done in the ""DayPicker v8"" project. But that component doesn't seem to support this still.",2021-06-15T11:33:59Z,5,,(IV) Clarification Request
434,https://github.com/gpbl/react-day-picker/discussions/1149,2020-04-14T03:52:46Z,Any updates on this feature? Is this something that we can help with a Pull Request?,2022-01-26T17:05:48Z,6,,(IV) Clarification Request
435,https://github.com/gpbl/react-day-picker/discussions/1149,2020-04-14T03:52:46Z,@mauriciosoares it would be nice to know in details how it should work as this issue is rather old. Would you mind to open a feature request? https://github.com/gpbl/react-day-picker/issues/new/choose,2022-01-27T15:28:54Z,7,1.0,(IV) Clarification Request
436,https://github.com/stylus/stylus/discussions/2667,2022-03-17T05:10:39Z,@RheingoldRiver I think you should report your issue to https://github.com/openstyles/stylus ?,2022-03-17T05:54:20Z,1,1.0,(II) Unrelated Repository
437,https://github.com/Jermolene/TiddlyWiki5/discussions/6010,2021-08-30T18:39:36Z,Hi @jc-ose ... I think it would be best to raise an issue at: https://github.com/reidgould/tiddlywiki-dropboard  ... That's the original github repo.,2021-08-31T14:41:26Z,1,1.0,(II) Unrelated Repository
438,https://github.com/Jermolene/TiddlyWiki5/discussions/6010,2021-08-30T18:39:36Z,Thanks @jc-ose that's helpful. I've an idea what might be the problem. Can you describe how Dropboard doesn't work? Could it be described as a matter of the screen not updating as expected?,2021-09-01T11:02:11Z,2,,(II) Unrelated Repository
439,https://github.com/Jermolene/TiddlyWiki5/discussions/6010,2021-08-30T18:39:36Z,"@pmario I will do that if there is still an issue after 5.2 is released. Right now I suspect that the new parsing tools are causing something odd to happen.
@Jermolene The issue I noticed is that in the rendered macro content, there are three closing </$set> tags showing up just below it now, which tells me wiki-text used by the plugin is being interpreted differently. So I don't think this is a screen updating issue but I could be wrong. This was tested in an empty prerelease file with only the plugin installed - in a tiddler where only the main macro (or in this case, transclude widget) needed to run the plugin is called. I also found that some widths no longer seem to be right on some of the divs created by the macro, but most of the core functionality of the plugin seems to still work more or less.
Because of all that, I believe there is something wrong with the way the wikitext provided by the dropboard plugin is being parsed in the new version. If that is expected based on the changes to TW, that's fine. But I think the goal has been to make it as backward compatible as possible, which is why I've asked about this here.
Here are some additional notes:
The way the plugin is setup, each board is rendered with the wiki-text: <$transclude tiddler=""$:/plugins/reidgould/dpbd/templates/view/Board"" mode=""inline"" />
In that tiddler that is rendered ($:/plugins/reidgould/dpbd/templates/view/Board), there's a lot of wiki-text content, including a lot of set widgets, so the issue is probably coming from there. I should have some time this weekend to take a deeper look into what's going on, but I may be limited in what I can do to determine why it is behaving differently between the the previous stable TW version and the 5.2 prerelease.
If you have something specific in mind you think I should be looking for, that would be helpful.
Anyway I hope this helps in some way.",2021-09-02T12:26:34Z,3,,(II) Unrelated Repository
440,https://github.com/Jermolene/TiddlyWiki5/discussions/6010,2021-08-30T18:39:36Z,"Hi @jc-ose

In that tiddler that is rendered ($:/plugins/reidgould/dpbd/templates/view/Board), there's a lot of wiki-text content, including a lot of set widgets, so the issue is probably coming from there. I should have some time this weekend to take a deeper look into what's going on, but I may be limited in what I can do to determine why it is behaving differently between the the previous stable TW version and the 5.2 prerelease.

That's very helpful, thank you. I can now duplicate the problem ‚Äì I copied the text of that tiddler to a new tiddler on https://tiddlywiki.com/prerelease, and saw the </$set> </$set> </$set> problem you referred to.",2021-09-07T21:14:27Z,4,,(II) Unrelated Repository
441,https://github.com/Jermolene/TiddlyWiki5/discussions/6010,2021-08-30T18:39:36Z,@Jermolene I don't have the opportunity to test or debug at present. However I am very confident this difference in parsing is arising from #5451 and that the widget parser now also used for macros is not as lenient of syntax errors.,2021-09-10T17:18:02Z,5,,(II) Unrelated Repository
442,https://github.com/Jermolene/TiddlyWiki5/discussions/5676,2021-05-10T04:15:13Z,"IMO the problem is the default search doesn't search in shadow tiddlers.  I think, this should be an issue and not a discussion",2021-05-10T08:48:57Z,1,1.0,(I) Reporting a Bug
443,https://github.com/Jermolene/TiddlyWiki5/discussions/5676,2021-05-10T04:15:13Z,"OK i did file the issue as suggested at #5678 (comment)
I hope this will help now some how
Thanks",2021-05-10T14:58:54Z,2,,(I) Reporting a Bug
444,https://github.com/webpack/webpack/discussions/15362,2022-02-09T17:11:53Z,"Not related to webpack, please open an issue in html-loader",2022-02-09T17:16:26Z,1,1.0,(II) Unrelated Repository
445,https://github.com/webpack/webpack/discussions/15362,2022-02-09T17:11:53Z,"
Not related to webpack, please open an issue in html-loader

@alexander-akait
But obviously any loader that have option values in function type will get this problem I guess?",2022-02-09T17:20:08Z,2,,(II) Unrelated Repository
446,https://github.com/webpack/webpack/discussions/15362,2022-02-09T17:11:53Z,"@alexander-akait
Here is my repo.
You can just npm run dev to check the preview.
And the problem is at webpack.config.ts line 209, I have commented about what the problem is , hope you can get what I am talking about.
repo:
https://github.com/mizok/webpack-inline-loader-sample/
webpack.config.ts:
https://github.com/mizok/webpack-inline-loader-sample/blob/master/webpack.config.ts",2022-02-09T18:29:34Z,3,,(II) Unrelated Repository
447,https://github.com/webpack/webpack/discussions/15334,2022-02-08T07:32:23Z,better ask in Angular Material or Kendo issue tracker..,2022-02-08T07:35:03Z,1,1.0,(II) Unrelated Repository
448,https://github.com/webpack/webpack/discussions/14906,2021-12-05T20:50:35Z,Can you open an issue? I think it is bug,2021-12-05T21:03:42Z,1,1.0,(I) Reporting a Bug
449,https://github.com/webpack/webpack/discussions/14055,2021-08-24T08:00:22Z,"Please open an issue in extract-loader, we can't fix it here",2021-08-24T10:08:23Z,1,1.0,(II) Unrelated Repository
450,https://github.com/webpack/webpack/discussions/13738,2021-07-07T03:40:51Z,"hm, make sense I think, feel free to open an issue",2021-07-12T10:08:19Z,1,1.0,(IV) Clarification Request
451,https://github.com/webpack/webpack/discussions/12250,2020-12-21T17:54:18Z,"Sounds good for improvements, I think this behavior can be default, can you open an issue?",2020-12-21T18:02:54Z,1,1.0,(III) Enhancement
452,https://github.com/mobxjs/mobx/discussions/3285,2022-02-09T15:29:50Z,"I've converted the discussion to an issue: #3286
Let's discussing it there üëç",2022-02-09T15:36:53Z,1,1.0,(IV) Clarification Request
453,https://github.com/mobxjs/mobx/discussions/2760,2021-01-28T18:39:28Z,"If you think you have found a bug, creating an issue is generally better than a discussion. Either way, can you provide runnable reproduction that we can inspect?",2021-01-28T20:03:20Z,1,1.0,(I) Reporting a Bug
454,https://github.com/mobxjs/mobx/discussions/2760,2021-01-28T18:39:28Z,"
‚Ä¶",2021-01-28T20:15:26Z,2,,(I) Reporting a Bug
455,https://github.com/mobxjs/mobx/discussions/2760,2021-01-28T18:39:28Z,"Since mobx 6.0 all functions are auto converted to action (unless you specify otherwise). Action fields were never observable.
Since mobx 6.1 these non-observable fields are not writable to prevent errors where you would assume that changing the value (function) would notify observers.
If the function is already an action, we simply ignore the field, sort of assuming it's already set-up properly... However I agree that may not be an ideal behavior as you end up in a similar situation which we want to prevent by making actions non-writable ... not entirely sure about this...
We are also considering that auto converted functions become both observable and actions... (therefore writable and additionally enumerable)",2021-01-28T20:41:24Z,3,,(I) Reporting a Bug
456,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"I don't think it's actually possible to access props with a class store or at least I don't know-how. The problem is that the class store doesn't share closure with the component.
What you can do is utilize useAsObservableSource to create an observable variant of props and pass that to a constructed class.


Fairly verbose if you ask me, but I don't think there is some other ""magical"" way. The useLocalStore basically does the same, but it's slightly easier. For a reference...

Frankly, I don't know why is everyone so hyped about class stores üòÜ",2019-08-02T15:33:02Z,1,,(IV) Clarification Request
457,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"Because contrary to current popular belief, classes are a fine choice for this.
Maybe something like this?

I'm assuming that the contents of the source reference returned on the first render will be updated every time useAsObservableSource is called? With hooks, you can never tell what the exact semantics are...",2019-08-02T18:10:42Z,2,,(IV) Clarification Request
458,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"Yea I suppose such hook will work. If you are asking about including such a hook to the library, I am don't think it's a good idea as it's very opinionated. At the moment you have a store that has a different constructor argument, you cannot use that. That can be important in case of dependencies on other stores. Besides, it's just 3 lines of code, no special handling or logic. Anybody who needs that can just copy that.

I'm assuming that the contents of the source reference returned on the first render will be updated every time useAsObservableSource is called? With hooks, you can never tell what the exact semantics are...

You are assuming right. With hooks, you can't tell much, but with MobX it's very important to have a stable reference so it's safe to assume you get that.

Because contrary to current popular belief, classes are a fine choice for this.

Would love to learn why. They are just more verbose in my eyes and require special handling due to decorators. I don't see any real benefit except it's defined ""outside of the component"". But you can as well have a custom hook for each store that utilizes useLocalStore and outcome is pretty much the same except its bit cleaner.",2019-08-02T19:11:11Z,3,,(IV) Clarification Request
459,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"You can also simply update whats necessary every render:
",2019-08-03T11:17:16Z,4,,(IV) Clarification Request
460,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"@urugator That sounds easier to you? :) We have MobX here and relying on imperative updates sounds fairly awkward. Besides, such operation is a side effect and as such should be in useEffect. That means it will be delayed. Suddenly, you have one value at component props and outdated value in the class instance.",2019-08-03T11:24:00Z,5,,(IV) Clarification Request
461,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"@FredyC It works exactly the same as useAsObservableSource:

It's impossible to get ""reactive props"" without imperative side effect (copying props to observables). We can do this because Mobx is synchronous, so once you call the setter (or Object.assign()) everything is up to date.
It is awkward, but no more than using useAsObservableSource or useLocalStore. Principle is really the same - copy props to a local observable and use it instead of props directly.
This is just a lot more transparent and easier to follow imo.
EDIT: note that you can store.setProps(props) similary to passing it to constructor, my point is that you don't need useAsObservableSource as it basically does the same thing, however I think the class preferably shouldn't know anything about props object",2019-08-03T11:42:29Z,6,,(IV) Clarification Request
462,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"
We can do this because Mobx is synchronous, so once you call the setter (or Object.assign()) everything is up to date.

Yea, but isn't also against ""don't change state during a render""? Moreover that MobX is a synchronous and changing state in the middle of rendering sounds like something must go wrong. And yet it obviously works, at least now, but I wonder if that will still work in Concurrent mode ü§î

It is awkward, but no more than using useAsObservableSource or useLocalStore.

The awkwardness in my eyes comes from the fact that you must adapt your store (and do it for each one) to accept some outside values. In the case of useLocalStore you get the source as an argument and you build the store with it. It feels much more natural and straightforward. Sure, you can derive the class and have it there, but that comes with some price as well.",2019-08-03T12:51:41Z,7,,(IV) Clarification Request
463,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"
Yea, but isn't also against ""don't change state during a render""

It's not kosher and hardly something to recommend.

In the case of useLocalStore

I am not advocating use of classes for local component state (and neither useLocalState).
In case of refactoring I would invest time into transforming local observable/computed/action into useState/useMemo/useCallback or moving it to (normalized) global app state (mobx class or whatever).
I don't see much of a point in refactoring to hooks, while making things more complicated (and actually still avoiding them).",2019-08-04T09:45:19Z,8,,(IV) Clarification Request
464,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"I am using MobX local store merely for its convenience as I don't need to bother with listing deps in effects and callbacks. That's a major selling point for me. I am not sure what ""complications"" you are mentioning. On the contrary, things are complicated with immutable state.",2019-08-04T09:52:36Z,9,,(IV) Clarification Request
465,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"
don't need to bother with listing deps in effects and callbacks

You need to bother with listing deps to useLocalStore
How does local store help with effects?
Action depending on props is a bad idea - that should be another rule to follow.
Remains computed, which is actually rarely needed (in a sense that provided optimization is effective).

complicated with immutable state

I have no issues with useState(() => observable({})) or useState(() => new Store())
But these can't be used if they depend on props - you either need ""hack"" or hooks, so I am suggesting hooks...",2019-08-04T13:14:34Z,10,,(IV) Clarification Request
466,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"The only reason I'm considering this (mechanical) refactor is because the ""new"" React is the only one getting new features (for example, there is no ability to access multiple contexts from the old react, while useContext can be invoked multiple times).
I'm absolutely fine with continuing to use classes otherwise; in addition, the new state management hooks provide significantly worse experience compared to MobX so I don't think they're an option.
For reference, the fully mechanical refactor is as follows:
Assuming the component MyComponent

you extract the render to a function
you do let thisState = useLocalState(props => new MyComponentState(props), props); at the top
you replace this with thisState in the render method
you rename the old MyComponent class into MyComponentState, remove extends React.Component from it and add a constructor(public props:MyComponentProps) {}

There is however the issue of double-rendering:
https://codesandbox.io/s/aged-snow-5u146
Try changing the props of the component by incrementing ""s.a""; two renders will be triggered, one by react due to a change in props, another due to useObserver being triggered by that change
I'm not sure how to avoid that one. By the time we get new props, we're already in a render cycle, so we can't really avoid one. In fact even the React docs recognize that this is not possible using hooks: https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-shouldcomponentupdate so it seems a more elaborate wrapper will be necessary to get the old functionality.",2019-08-04T13:16:47Z,11,,(IV) Clarification Request
467,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"@urugator the reason we use local observable and computed instead of local component state and ""useMemo"" is because they are an excellent fit. Typically components will receive a somewhat complex MobX model objects via props (for example a document item in a list of document items); however they need better refined / transformed data (a view if you will) suitable for presentation (defined via computeds, for example compute item summary string name from several item props) with additional stateful options of that particular view component (observables, e.g. whether the item details are expanded or not) for that view that can be modified (via actions like expandDetailedView triggered by a button)
Using observable and computed ensure that changes in the model will result with minimal and efficient recomputation of the view data; if the view consists of multiple pieces, it can also ensure that the smallest amount of DOM nodes re-render and update. useMemo and friends are absolutely inadequate and underpowered in comparison - they are not worth even considering.",2019-08-04T13:40:27Z,12,,(IV) Clarification Request
468,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"
issue of double-rendering:

Yes this is disadvantage of hooks, there is no way to bailout (I wonder whether we will use generators one day, yielding the effects instead of calling hooks).

useContext can be invoked multiple times

I used a HOC like: consume({ store1: Context1, store2: Context2 })(({ store1, store2 }) => {})
If the context value updates often (probably not with mobx, but it's common with immutable state), you may still want to put memo between useContext and actual component (or wrap render in useMemo).

useMemo and friends are absolutely inadequate and underpowered in comparison

Just keep in mind that reactive props is nothing but a state change inside derivation:

By moving props into constructor you will just move the problem one level up. Eventually you will realize that all deps must be provided upfront (which is kinda obvious considering computeds are argument-less), otherwise you need to memoize over arguments.
Memoization/diffing is perhaps slower (than binding), but allows you to have dynamic dependencies (deps unknown at the time of definition) and therefore dynamic component hierarchies.",2019-08-04T18:03:01Z,13,,(IV) Clarification Request
469,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"So far, hooks have been nothing but a disadvantage :) I have a feeling that they might end up being a huge failure: they are very easy to write but very hard to read (and especially to understand the semantics of what runs when) which seems to me like a recipe for disaster.

Would love to learn why. They are just more verbose in my eyes and require special handling due to decorators. I don't see any real benefit except it's defined ""outside of the component"". But you can as well have a custom hook for each store that utilizes useLocalStore and outcome is pretty much the same except its bit cleaner.

In TypeScript classes are the only construct that at the same time represent a type and a runtime object. This gives them many advantages, one of which is that they can enable easy, type-safe dependency injection by representing both the interface, the implementation and the DI token (e.g. you could supply them automatically via emitDecoratorMetadata by reading design:type or design:paramtypes which only work for classes)
They can also just replace interfaces + type-safe DI tokens without the implementation:

The ""easymode""  classes are still the most important ones, because for most of them you don't need to separate the interface from the implementation until needed.
In our ""framework"", through react context, we access the injector, which provides the application singletons as well as component level transients: hfour/h4bff#57
You can read more about the framework here: https://hfour.github.io/h4bff/#/ although the building blocks and the docs on how they fit together are not fully complete yet.",2019-08-04T21:37:09Z,14,,(IV) Clarification Request
470,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"So I think I managed to avoid the double-updating issue by making the props mutable and turning off the staleness notification for the reaction temporarily while assigning the new props:
https://codesandbox.io/s/trying-to-use-hooks-794py
This is absolutely fine, since the reaction is already ""scheduled to run"" - we're re-rendering the entire component after all.
Not yet sure whether its a good idea to pass on the observable props directly - I think it might be better to keep react props object semantics but implement another hook called useObservableProps(props) that simply fetches the already created observable props; only available in a hObserver style component of course.
edit: props are now immutable; useObservableProps hook provides a MobX observable reference of them which is already created by hObserver",2019-08-05T10:37:31Z,15,,(IV) Clarification Request
471,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"@urugator & @FredyC  I believe the above technique separates the ""props receiving"" phase from the ""computing the VDOM"" phase nicely. When the props change, mobx gets out of the way since the render is going to happen anyway and there is no need for reactions; in all other cases, mobx takes care of re-renders. If I had access to mobx internals I would describe this as ""reaction is already scheduled to run"" but without that bit disabling the event was my best idea.I believe this implementation mirrors the original mobx-react API and behavior more closely.
Do you think there is a place for useObservableProps in mobx-react(-lite)?",2019-08-08T20:44:47Z,16,,(IV) Clarification Request
472,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,@spion I am kinda failing to follow it here and what exactly are you proposing. How is it different from useAsObservableSource? Can we adapt that existing hook?,2019-08-08T20:55:30Z,17,,(IV) Clarification Request
473,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"Its different in that the component wrapper itself runs the hook to create an observable version of the props, and the useObservableProps only provides the mutable object that was already created by the wrapper. So you cannot use a different observable source.
What it does give you, however (that useLocalState doesn't) is the ability to prevent double-rendering. With useLocalState double rendering happens every time there is an update to the contents of the argument passed to it.
It has to be this way because the reaction needs to be disabled during the props update, and the props update needs to happen outside of the tracking region of the reaction otherwise disabling doesn't work
I tried implementing useAsObservableSource that temporarily disables the reaction, however if that's done during the tracking stage it messes up the state of the reaction:
https://codesandbox.io/s/trying-to-use-hooks-n469q
Click on a+=1 to update the props of the inner component, then on counter += 1. The second click will not trigger a render of Add. If you do the two steps again, counter+=1 will trigger a re-render the second time. Not sure why this happens (probably because its lowestNewObservingDerivationState gets messed up during tracking so onBecomeStale doesn't get called next time)",2019-08-08T21:23:55Z,18,,(IV) Clarification Request
474,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"Can you draft how would the useObservableProps looks like? I suppose the one from the sandbox, is not it? In case it is then I am sure we don't want anything depending on global variables with Concurrent mode coming.

And btw, the observer got changed in mobx-react-lite@2 (published under @next) to account for Concurrent mode, so you might want to experiment with that first.

I seem to have lost what is all the reason for it. Some kind of micro-optimization to avoid one extra re-render? I thought we were talking about props in class components in here :)",2019-08-09T07:13:41Z,19,,(IV) Clarification Request
475,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"Its not a micro-optimization if every single prop update causes two calls to the render function, is it?
I'm trying to write a hook version that gets similar behavior to the class based implementation of mobx-react; that includes:

support for class based state
support for fully observable props
single render when props update
",2019-08-09T10:59:35Z,20,,(IV) Clarification Request
476,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"@FredyC  The global variable cannot be in an incorrect state, since its not possible for concurrent react to interrupt the section where its available or run it in parallel with other sections:

Concurrent react can only postpone the full rendering of child components, it cannot interrupt a standard function call.
BTW thanks for pointing me to the updated code - I'll mess around with it and see if I can get it to do what I need :)",2019-08-10T18:03:40Z,21,,(IV) Clarification Request
477,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"
Its not a micro-optimization if every single prop update causes two calls to the render function, is it?

You know, I am fairly convinced that with MobX it doesn't happen that often to have props changing like crazy. Usually, you would be passing some stable store there. Sure, couple props might be needed to change from time to time, but imo it's not that often as it might seem. And if a component is really that convoluted to have several sources of re-render, it might be worth to rethink that and split up.

Concurrent react can only postpone the full rendering of child components, it cannot interrupt a standard function call.

Doesn't it also mean it can render several components at a time? I haven't really examined it that much, but ""concurrent"" sounds like ""parallel"" to me.
I think that automatically wrapping all props to observable might be overkill. It would be done no matter if you actually use those props. As such I don't think it should be the default behavior, but opt-in.
There is a hidden limitation. The useAsObservableSource needs a stable shape object. That means it would crash in case pass slightly different composition of props to an observed component. That's another argument why it shouldn't be the default behavior.
Also, I am kinda confused. In useObservableProps you are accepting props, but not doing anything with that. I guess some experimental leftover?
The name useObservableProps is slightly misleading as it doesn't use any hooks and as such can be called from anywhere (except it will fail with an error when done that).
Lastly, it feels somewhat opinionated. Personally, I am using useAsObservableSource not for props only, there are also values from context or even ""calculated values"" based on props. With your solution, I would gain some performance but lose that benefit.
I am not saying it cannot become part of mobx-react-lite, but it certainly needs a good test coverage to figure out pitfalls.",2019-08-10T19:24:58Z,22,,(IV) Clarification Request
478,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"
Also, I am kinda confused. In useObservableProps you are accepting props, but not doing anything with that. I guess some experimental leftover?

Yeah that part is suboptimal :( The issue is you need to either pass the props or the type of the props - otherwise typescript wont know what type of object to return.
Ordering rules don't apply for this ""non-hook"" so its not quite a hook, agreed. I thought it would be less confusing if it was presented as a hook
My first version was nicer because it simply presented a mutable, observable props object as the argument so there was no need of useObservableProps. Its quite clean, but potentially a huge change of behavior if the props object is passed as a whole anywhere, and it violates the ""frozen-in-time snapshot"" concept that hooks try to present.
I don't necessarily expect this to become a part of mobx-react or mobx-react-lite as it is - I wanted to bounce off a few ideas about observable props and class based stores and see if I can get help coming up with some API that approximates the class API but also makes sense in a hooks context. Its not easy!
To be honest I am surprised to hear that people aren't using mobx state in class components - was everyone using setState instead? Seems like such a natural extension for UI state like e.g. filter toggles, dropdown expansion, currently selected items etc... is everyone keeping that state outside the components too?",2019-08-10T20:59:29Z,23,,(IV) Clarification Request
479,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"
To be honest I am surprised to hear that people aren't using mobx state in class components - was everyone using setState instead? Seems like such a natural extension for UI state like e.g. filter toggles, dropdown expansion, currently selected items etc... is everyone keeping that state outside the components too?

The setState isn't inherently bad for simple stuff really. The class components are a bigger burden to treat that state properly imo. Duplicating code, no easy way to share common stuff, forgetting to clean up and a bunch of others.
Personally, I still sometimes opt for useState, mostly in cases where observer just feels like overkill. In conjunction with Immer, the useState becomes even easier for more robust stuff. The useState becomes annoying in a moment you need various setters to be passed around. Sure, there is a useReducer ... but no thanks :) With MobX this isn't a problem as the useLocalStore can carry actions included in a store. Or even class-based stores are fine in that matter.
I never liked decorators in classes and in the essence classes alone. It just did not feel right. So I was rather using recompose like crazy with 10+ compositions over the functional component. It was hell to debug that, but it certainly helped me to mentally shift to hooks faster because I wasn't used to classes anyway :)",2019-08-10T21:27:17Z,24,,(IV) Clarification Request
480,https://github.com/mobxjs/mobx/discussions/2531,2019-08-02T15:32:55Z,"I think we have exhausted the topic here with loads of useful information. For further questions, please open a new issue.",2020-04-22T15:35:46Z,25,1.0,(IV) Clarification Request
481,https://github.com/gatsbyjs/gatsby/discussions/32147,2021-06-28T16:34:28Z,"The problem was a typo in makeStyles css declaration. It was quite difficult to find, but now everything works fine.",2021-06-29T16:18:55Z,1,,(IV) Clarification Request
482,https://github.com/gatsbyjs/gatsby/discussions/32147,2021-06-28T16:34:28Z,I'm unsure if we can get a better error message but could you maybe create an issue with a small reproduction?,2021-06-30T05:35:13Z,2,1.0,(IV) Clarification Request
483,https://github.com/gatsbyjs/gatsby/discussions/31535,2021-05-21T17:35:09Z,My best guess is that this plugin is a bit outdated and may be incompatible with gatsby v3? I recommend you to open an issue in the correct repository though as we do not maintain it: https://github.com/Mike-Dax/gatsby-plugin-ffmpeg,2021-05-21T18:04:03Z,1,1.0,(II) Unrelated Repository
484,https://github.com/gatsbyjs/gatsby/discussions/30928,2021-04-16T15:02:57Z,"Hi!
I'm sorry but I can't follow the reproduction steps as to how you get the error you're seeing. I'm also not sure if this is actually a Gatsby bug as images are only downloaded when they exist so maybe you request it somewhere else?
The guide you're also following is a bit outdated (package version-wise) so you might also try it with Gatsby v3 and latest versions. Maybe reach out to the authors here? https://github.com/mariohernandez/gatsby_training",2021-04-19T08:31:17Z,1,,(IV) Clarification Request
485,https://github.com/gatsbyjs/gatsby/discussions/30928,2021-04-16T15:02:57Z,"Hello,
I'm trying to upgrade to v3 from v2 and seeing similar behaviour, also using Drupal.
Current working build, locally and in prod on v2 using the following packages:

But breaks when I upgrade to v3 packages

The following happens in console on the v3 packages when I run gatsby develop, as soon as a file that no longer exists is referenced the gatsby-source-drupal plugin is throwing and dying which doesn't happen in my current live version.
",2021-04-19T09:34:35Z,2,,(IV) Clarification Request
486,https://github.com/gatsbyjs/gatsby/discussions/30928,2021-04-16T15:02:57Z,"Okay, thanks both for the message!
I assumed this was a local issue so I moved it. If you can provide a minimal reproduction please open a new issue in our issue tracker with a link to that. The training you linked and the other output of packages is a bit more than a minimal reproduction.
This might be an issue with the Drupal source plugin, but to be sure we need to eliminate any other package that might cause this. Thanks!",2021-04-19T12:38:40Z,3,1.0,(IV) Clarification Request
487,https://github.com/gatsbyjs/gatsby/discussions/30928,2021-04-16T15:02:57Z,"Thanks @LekoArts, I'm trying to get a minimal repro working as easily as I can, as per your instruction, when I have it I'll open an issue. I did manage to reproduce it on a very basic starter in codepen so just need to get that shared.
@mcmadeline I've found a workaround in the mean time which may or may not be helpful to you.
In the gatsby-source-drupal config in gatsby-config.js I excluded all file--file content types using the disallowedLinkTypes. Then for each image field I added it in the filters as an include which means that only the files used in the published pages will be downloaded.
e.g.

It's a bit cumbersome and will need managing every time an image field is added or changed in any of the content types in Drupal, but hopefully that wont be too frequent.
Once I had in the exclude for file--file the CLI for Gatsby spat out all the places which were erroring which gave me the complete list of filters I needed to add (nearly 50 in my case!)",2021-04-22T10:58:14Z,4,,(IV) Clarification Request
488,https://github.com/ant-design/ant-design/discussions/31117,2021-06-24T07:02:27Z,"I will close this in favor of an issue: #31140
I managed to reproduce, so opened an issue.",2021-06-25T09:40:03Z,1,1.0,(IV) Clarification Request
489,https://github.com/quasarframework/quasar/discussions/12943,2022-03-26T06:00:38Z,"I can confirm the issue. Creating an issue from this discussion.
Scott",2022-03-26T06:30:23Z,1,1.0,(I) Reporting a Bug
490,https://github.com/quasarframework/quasar/discussions/12943,2022-03-26T06:00:38Z,"Vue CLI Plugin Quasar doesn't support Vue CLI 5 yet. Follow this issue for details/progress: quasarframework/vue-cli-plugin-quasar#52
Also keep in mind that Vue CLI is now in maintenance mode: https://github.com/vuejs/vue-cli/tree/v5.0.4#status",2022-03-26T10:16:18Z,2,,(I) Reporting a Bug
491,https://github.com/quasarframework/quasar/discussions/12943,2022-03-26T06:00:38Z,Released vue-cli-plugin-quasar v5.0.1 which has support for Vue CLI v5. https://github.com/quasarframework/vue-cli-plugin-quasar/releases/tag/v5.0.1,2022-03-28T13:37:31Z,3,,(I) Reporting a Bug
492,https://github.com/quasarframework/quasar/discussions/12000,2022-01-12T09:04:02Z,"You can temporarily solve the issue at hand by adding this class:

This will show the icon inside the toggle.",2022-01-12T10:16:17Z,1,,(IV) Clarification Request
493,https://github.com/quasarframework/quasar/discussions/12000,2022-01-12T09:04:02Z,"Please open a ticket on this.
Thanks.",2022-01-12T10:44:55Z,2,1.0,(IV) Clarification Request
494,https://github.com/quasarframework/quasar/discussions/12000,2022-01-12T09:04:02Z,Fix will be available in Quasar v2.4.8 and v1.17.3,2022-01-12T13:11:22Z,3,,(IV) Clarification Request
495,https://github.com/quasarframework/quasar/discussions/10729,2021-09-18T12:38:20Z,"@saeedsv
If you think this is a bug , please create an issue or a codepen to demo your problem",2021-09-18T16:21:11Z,1,,(I) Reporting a Bug
496,https://github.com/quasarframework/quasar/discussions/10729,2021-09-18T12:38:20Z,Only in Quasar v2 or in Quasar v1 also?,2021-09-18T16:23:13Z,2,,(I) Reporting a Bug
497,https://github.com/quasarframework/quasar/discussions/10729,2021-09-18T12:38:20Z,"@pdanpdan
I am not having this issue in Qv1  and Qv2(beta1)...",2021-09-18T16:47:33Z,3,,(I) Reporting a Bug
498,https://github.com/quasarframework/quasar/discussions/10729,2021-09-18T12:38:20Z,In that case please open an issue - it must be a regression. Thank you,2021-09-18T16:49:25Z,4,1.0,(I) Reporting a Bug
499,https://github.com/quasarframework/quasar/discussions/10704,2021-09-17T01:43:28Z,you can use QScrollArea for the green part.,2021-09-17T03:50:24Z,1,,(IV) Clarification Request
500,https://github.com/quasarframework/quasar/discussions/10704,2021-09-17T01:43:28Z,"Full Coding for the implemenation: https://codepen.io/cyfung1031/pen/wveyPwv
I have also created an issue to ask for adding this to the official docs as an example to use QLayout with QScrollArea #10720",2021-09-17T17:54:27Z,2,1.0,(IV) Clarification Request
501,https://github.com/serverless/serverless/discussions/10755,2022-02-24T23:58:05Z,Hello @dzorlu - I believe this might be a bug with websockets where the provisionedConcurrency alias is not properly recognized. Could you please report it as an issue?,2022-02-25T09:52:25Z,1,1.0,(I) Reporting a Bug
502,https://github.com/serverless/serverless/discussions/10755,2022-02-24T23:58:05Z,"Thank you @pgrzesik , I will.",2022-02-25T23:47:48Z,2,,(I) Reporting a Bug
503,https://github.com/serverless/serverless/discussions/10638,2022-01-14T16:47:38Z,"@orr-levinger We need a complete serverless.yml content and no plugins involved. There's a high chance that it's a plugin that's responsible for the issue you're observing, in such case bug report needs to go to the corresponding plugin repository.
Additionally please provide command name you're using for deployment and full generated output",2022-01-14T16:50:58Z,1,1.0,(II) Unrelated Repository
504,https://github.com/serverless/serverless/discussions/10638,2022-01-14T16:47:38Z,"
package.json:

This is the lambda

deploy command: npm run sls deploy
when invoking it i get cold start.
to be more specific when not calling the alias directly or the version but simply invoking the lambda by name.
if i invoke the alias: testProvisionedConcurrency-dev-testProvisionedConcurrency:provisioned
also if i invoke the version: testProvisionedConcurrency-dev-testProvisionedConcurrency:2
it works
must add that in my real app i use appsync as the front facing gateway
but i expect it to work when just invoking the lambda",2022-01-14T17:18:02Z,2,,(II) Unrelated Repository
505,https://github.com/serverless/serverless/discussions/10638,2022-01-14T16:47:38Z,"
to be more specific when not calling the alias directly or the version but simply invoking the lambda by name.
if i invoke the alias: testProvisionedConcurrency-dev-testProvisionedConcurrency:provisioned
also if i invoke the version: testProvisionedConcurrency-dev-testProvisionedConcurrency:2
it works

@orr-levinger this is exactly how it's expected to work. Note it's only an alias or specific version that can be provisioned. Framework creates provisioned alias, that's provisioned",2022-01-14T19:15:33Z,3,,(II) Unrelated Repository
506,https://github.com/serverless/serverless/discussions/10638,2022-01-14T16:47:38Z,"@orr-levinger
plz, try the serverless-provisioned-concurrency-autoscaling plugin to configure desired Provisioned Concurrency & Concurrency Autoscaling",2022-02-03T10:26:16Z,4,,(II) Unrelated Repository
507,https://github.com/statelyai/xstate/discussions/3022,2022-02-07T14:00:10Z,"I think that I might have solved it locally - I still need to do a more thorough investigation though and part of the fix is a somewhat bigger change to how actions are currently typed.
Could you report this as an issue?",2022-02-07T15:18:28Z,1,1.0,(IV) Clarification Request
508,https://github.com/statelyai/xstate/discussions/1773,2020-12-23T20:57:50Z,"You have to pass the address that could be used as the value of to down - there is no magical global namespace that you could just reach into. Currently, there is no easy way to obtain the address in the service creator though (you could create an issue about it so we could discuss adding it and track this) so you have to work around this by sending an event and grabbing its _event.origin.",2020-12-23T21:41:36Z,1,1.0,(IV) Clarification Request
509,https://github.com/statelyai/xstate/discussions/1833,2021-01-11T17:15:59Z,"You have a bug in your schema. Instead of this:

you should declare this:

Could you report this as an issue? I believe we could do a better job at surfacing this kind of problems to users.",2021-01-12T11:24:52Z,1,1.0,(III) Enhancement
510,https://github.com/statelyai/xstate/discussions/1833,2021-01-11T17:15:59Z,"TypeScript kinda did catch the problem, but it's obviously less clear from that message what's wrong.

I would highly recommend you to have a look at https://github.com/mattpocock/xstate-codegen that heavily improves typescript experiences with machines. The first benefit is that you don't to manually sync the StateSchema and a problem like this is shown more clearly.",2021-01-13T10:21:00Z,2,,(III) Enhancement
511,https://github.com/statelyai/xstate/discussions/1455,2020-09-12T16:04:37Z,Please see #1434 . It most likely answers your questions.,2020-09-12T17:31:12Z,1,,(IV) Clarification Request
512,https://github.com/statelyai/xstate/discussions/1455,2020-09-12T16:04:37Z,"Yeah, I think this may be an issue on our side - calling someActor.stop() currently does not notify the parent that the actor should be removed (and GC'd). I'll look into this. Do you want to make this an issue for tracking?",2020-09-12T18:05:01Z,2,1.0,(IV) Clarification Request
513,https://github.com/visgl/react-map-gl/discussions/1407,2021-03-19T16:08:24Z,"I was able to workaround this issue by wrapping the source + layer in a component and assigning a dynamic key to that component that changes whenever I need the source data to refresh. Not ideal solution though, so I'm going to open an issue and maybe we can build this functionality together!",2021-03-19T19:28:24Z,1,1.0,(IV) Clarification Request
514,https://github.com/invertase/react-native-firebase/discussions/6049,2022-02-03T18:02:05Z,"Further to the above, I've tried to use the firebaseAnalytics().setDefaultEventParameters() to set the instanceId, and it works for some events but not the events that trigger on install like 'first_open' or 'session_start'. The root of my problem is I'd like to set the Firebase instanceId as the cid for my GA 360 analytics within GTM. I'm fairly new to app react, and I've tried a few things, but no matter where I set the default props, I cant get any to be passed with these on install events. Any help would be greatly appreciated.",2022-02-04T14:23:35Z,1,,(IV) Clarification Request
515,https://github.com/invertase/react-native-firebase/discussions/6049,2022-02-03T18:02:05Z,@mikehardy I've raised an issue here: firebase/firebase-ios-sdk#9295,2022-02-04T17:21:59Z,2,1.0,(IV) Clarification Request
516,https://github.com/invertase/react-native-firebase/discussions/4221,2020-09-07T04:23:14Z,"You should probably open an issue and follow the template so we have all the information
For instance, you don't even specifically say it's android, I'm just guessing based on the other info provided.
Very strange it works in dev but not release though, that sounds like a project config issue vs a coding issue",2020-09-07T04:42:56Z,1,1.0,(IV) Clarification Request
517,https://github.com/invertase/react-native-firebase/discussions/4805,2021-01-21T02:55:52Z,"This is not the way to go about filing a bug report in this repository, sorry. If you have an issue, please open an issue following the template. Please make sure you have up to date versions, and provide a self-contained App.js that reproduces the problem (including any necessary data creation) when dropped in a clean project. 99% of the time, the act of reducing the problem to a reproducible example on a clean project shows a coding error and that's the answer - when it doesn't, we have a clean basis to reproduce it and issue a fix. Thanks",2021-01-21T12:12:00Z,1,1.0,(I) Reporting a Bug
518,https://github.com/invertase/react-native-firebase/discussions/4635,2020-12-02T15:27:51Z,"You opened a discussion, but this is an issue is it not? I'll need the information from the issue template in order to help, so please open an issue
Prior to trying that though, you'll want to make sure you are using fully up to date versions (v10.1.0 here, firebase-ios-sdk 7.1.0, firebase-android-sdk 26.1.0) and you've got a clean build (npx react-native-clean-project)
You may also try a clean scripted skeleton project where you can reproduce without interference from project-specific issues: https://github.com/mikehardy/rnfbdemo/blob/master/make-demo.sh",2020-12-02T17:05:48Z,1,,(IV) Clarification Request
519,https://github.com/invertase/react-native-firebase/discussions/4635,2020-12-02T15:27:51Z,"@mikehardy I have opened an isssue here. #4638
will close this discussion",2020-12-02T18:33:35Z,2,1.0,(IV) Clarification Request
520,https://github.com/apollographql/apollo-client/discussions/7930,2021-03-31T04:17:33Z,"@thusharprakash Thanks for opening this discussion, and sorry to hear you‚Äôre having trouble. Can you reopen this as an issue so we can track it? Also, if you provide a running reproduction (on codesandbox, or as a GitHub repository), I‚Äôll get to it even faster!",2021-04-03T04:16:42Z,1,1.0,Others
521,https://github.com/apollographql/apollo-server/discussions/5777,2021-10-03T16:03:40Z,Hi üëã  ! Looks like this is an apollo-android issue? I'll move this discussion to an issue there. First time I try this in production üòÖ  . Finger crossed it'll land in the correct repo with all the comments :),2021-10-06T08:21:21Z,1,1.0,(II) Unrelated Repository
522,https://github.com/react-navigation/react-navigation/discussions/9801,2020-04-27T16:41:36Z,Read the docs,2020-04-28T05:38:39Z,1,,(IV) Clarification Request
523,https://github.com/react-navigation/react-navigation/discussions/9801,2020-04-27T16:41:36Z,"This removes the tab and shows only indicator

This removes the tab bar completely including the indicator
",2020-06-18T09:22:52Z,2,,(IV) Clarification Request
524,https://github.com/react-navigation/react-navigation/discussions/9801,2020-04-27T16:41:36Z,Is there is a way to get it back after hiding it?,2021-07-29T02:21:39Z,3,1.0,(IV) Clarification Request
525,https://github.com/react-navigation/react-navigation/discussions/9801,2020-04-27T16:41:36Z,"Hey! This issue is closed and isn't watched by the core team. You are welcome to discuss the issue with others in this thread, but if you think this issue is still valid and needs to be tracked, please open a new issue with a repro.",2021-07-29T02:21:51Z,4,,(IV) Clarification Request
526,https://github.com/react-navigation/react-navigation/discussions/9801,2020-04-27T16:41:36Z,"@Kulothungan16 I added a dynamic tabBarOptions that is dependent on a state. Something like this.
",2021-08-07T03:59:29Z,5,,(IV) Clarification Request
527,https://github.com/react-navigation/react-navigation/discussions/9801,2020-04-27T16:41:36Z,"@johnjoshuadablo Thanks you very much
Another question, Is it possible to get the route name in MaterialTopBar like
",2021-08-07T05:03:47Z,6,,(IV) Clarification Request
528,https://github.com/aws/aws-cdk/discussions/13069,2021-02-16T04:23:02Z,"Hey @dhirajkhodade ,
The CodeDeployServerDeployAction passes its underlying CodeDeploy DeploymentGroup through the resource property. So the account and region of the Action will be decided by the account and region of the DeploymentGroup.
Thanks,
Adam",2021-02-16T16:24:20Z,1,,(IV) Clarification Request
529,https://github.com/aws/aws-cdk/discussions/13069,2021-02-16T04:23:02Z,"Notice that the error message talks about an Application. You might have to do:
",2021-02-19T22:23:58Z,2,,(IV) Clarification Request
530,https://github.com/aws/aws-cdk/discussions/13069,2021-02-16T04:23:02Z,"I'm glad you figured it out @dhirajkhodade üôÇ.
Would you mind opening us an issue about the use case you ran into? I feel like going

should automatically create the Application owning the Deployment Group also with PhysicalName.GENERATE_IF_NEEDED.",2021-03-02T01:08:32Z,3,1.0,(IV) Clarification Request
531,https://github.com/ardatan/graphql-tools/discussions/3885,2021-11-17T04:47:33Z,I don't think this is related to GraphQL Tools. GraphQL Tools here is only responsible of building your schema. Maybe you should create an issue on Apollo's repo,2021-11-17T08:37:19Z,1,1.0,(II) Unrelated Repository
532,https://github.com/kamilkisiela/apollo-angular/discussions/1727,2021-11-11T17:09:34Z,"that's a good thing to add to the docs.
It is also not apollo-angular specific but apollo-client, maybe you can open an issue there, start with a simple example and get help from the community to create an example?",2021-11-13T13:36:42Z,1,1.0,(II) Unrelated Repository
533,https://github.com/microsoft/react-native-windows/discussions/9803,2022-04-07T11:05:29Z,Looks like this may be an issue in the dependencies script. Created this issue to track it: #9807,2022-04-07T18:24:04Z,1,1.0,(I) Reporting a Bug
534,https://github.com/microsoft/react-native-windows/discussions/9803,2022-04-07T11:05:29Z,The issue is fixed. Thank you so much üôÇ,2022-04-07T19:15:32Z,2,,(I) Reporting a Bug
535,https://github.com/microsoft/react-native-windows/discussions/8645,2021-09-17T20:10:25Z,"There's a big thread here about an effort to make the hover states (and other mouse-centric things) more unified across all platforms. There are options to do what you want in RNW today, but they're underdocumented (for example compared to the keyboard props). The lack of documentation on these props is tracked here.
There are some running examples in this repo, like this. But I don't see anything proper on the samples repo. I've opened an issue to track the lack of a sample that covers this.
@rectified95 FYI",2021-09-17T23:32:11Z,1,1.0,(IV) Clarification Request
536,https://github.com/prisma/prisma/discussions/12839,2022-04-15T12:10:43Z,"Hey @FentonA üëã ,
This seems like a bug to me. Could you fill out a bug report with more details?",2022-04-18T21:51:53Z,1,1.0,(I) Reporting a Bug
537,https://github.com/prisma/prisma/discussions/11172,2022-01-14T17:16:49Z,"If you're filtering items that can be fetched via include without custom logic, you can filter out the required items via array.filter() but since what you're doing is basically multiple level inclusion, that isn't an implemented feature yet.
You could ask for this in an issue as a feature request though.",2022-01-15T15:54:31Z,1,1.0,(IV) Clarification Request
538,https://github.com/prisma/prisma/discussions/12455,2022-03-21T15:57:03Z,"Hey @blchelle üëã,
This looks like a great idea for a feature request. Feel free to convert this discussion to an issue or create one from scratch. Our engineers will pick it up from there.
I'm curious, what is your use case for seeding a production environment?
Thanks!",2022-03-21T19:42:59Z,1,1.0,(III) Enhancement
539,https://github.com/prisma/prisma/discussions/12080,2022-02-28T23:13:07Z,"No, that sounds like a real bug on our side.
Did the CLI prompt you to submit an error report? If so, can you share the ID it gave you (or do this again to report the error, then share the ID)? Can you please also turn this into a bug report issue and supply all the information the template asks for? Then we can try to reproduce this as well and properly put it into our engineering process. Thanks!",2022-03-01T08:42:17Z,1,1.0,(I) Reporting a Bug
540,https://github.com/prisma/prisma/discussions/11603,2022-02-03T20:12:18Z,"Hello,
Currently, it is not possible to configure that behaviour. I suggest you to open a feature request about this here: https://github.com/prisma/prisma/issues/new?assignees=&labels=&template=feature_request.md&title=",2022-02-04T09:30:23Z,1,1.0,(III) Enhancement
541,https://github.com/prisma/prisma/discussions/11608,2022-02-04T01:07:44Z,"Hello,
That sound like a bug to me in 3.9. Can you please report the issue here with the code that you are using: https://github.com/prisma/prisma/issues/new?assignees=&labels=kind%2Fbug&template=bug_report.yml",2022-02-04T09:55:32Z,1,1.0,(I) Reporting a Bug
542,https://github.com/prisma/prisma/discussions/11572,2022-02-02T15:14:58Z,I am interested in this too.,2022-02-02T15:40:43Z,1,,(III) Enhancement
543,https://github.com/prisma/prisma/discussions/11572,2022-02-02T15:14:58Z,"Thanks a lot for raising this @vertti! I've checked with our engineers and it seems like we can probably improve the situation, so I created an issue here: #11577
You can also safely delete anything in the .cache directory if you want to save some space already üôè",2022-02-02T17:20:04Z,2,1.0,(III) Enhancement
544,https://github.com/prisma/prisma/discussions/11572,2022-02-02T15:14:58Z,"I asked similar question in this topic: #11178
You can clear the yarn cache in Dockerfile but it still will be 200MB. If you plan to keep ""prisma"": ""^3.8.0"" as dev dependency you will need separate container for migration and seed, but to my calculation that wont save much space, although I tried it out only with yarn on the host and not in Docker, I didn't spend too much time on this. You can see my first post for details.",2022-02-02T22:14:02Z,3,,(III) Enhancement
545,https://github.com/prisma/prisma/discussions/8452,2021-07-26T18:53:28Z,"As MongoDB is in preview, there is some functionality missing - but of course we want to get it on par with other databases in Prisma as soon as possible.

Raw query support in MongoDB is tracked here: #8270
For JSON filters I could not quickly find an issue, so I suggest you open a new one with the required information.
",2021-07-28T11:36:03Z,1,1.0,(IV) Clarification Request
546,https://github.com/prisma/prisma/discussions/10755,2021-12-18T08:48:34Z,"I'm seeing the same error. This error mentions my ""Trip"" table, which is the first table in my schema despite the fact that my update is on a different table altogether.
Just starting to look for a solution.
",2021-12-21T18:22:56Z,1,,(I) Reporting a Bug
547,https://github.com/prisma/prisma/discussions/10755,2021-12-18T08:48:34Z,"After more experimentation, I'm finding that the error happens on a table that is in a 1 to many relationship with the table that I'm trying to update. The query completes successfully after I remove this relationship.
I'm continuing to experiment with why this relationship is leading to this error.",2021-12-21T18:36:15Z,2,,(I) Reporting a Bug
548,https://github.com/prisma/prisma/discussions/10755,2021-12-18T08:48:34Z,"I tracked the error down to the query that is causing it. Asking #7292 (comment) for help, as that thread is being actively watched.",2021-12-21T19:43:49Z,3,,(I) Reporting a Bug
549,https://github.com/prisma/prisma/discussions/10755,2021-12-18T08:48:34Z,Can you turn this into a standalone issue please @sbkl? Then we can properly follow up and investigate. Thanks.,2021-12-22T08:42:49Z,4,1.0,(I) Reporting a Bug
550,https://github.com/prisma/prisma/discussions/11133,2022-01-13T01:09:32Z,"There isn't any yet, and I've seen a lot of requests for them, you could open an issue asking for this as a feature.",2022-01-15T16:03:38Z,1,1.0,(III) Enhancement
551,https://github.com/prisma/prisma/discussions/10857,2021-12-24T06:38:39Z,That looks like a bug. Can you open a bug issue please and include all the information the template asks for? Thanks.,2021-12-24T21:49:30Z,1,1.0,(I) Reporting a Bug
552,https://github.com/prisma/prisma/discussions/10759,2021-12-18T20:04:16Z,"I ran into this issue even with a fresh (reset, empty), local database, when trying to add a different new model, and still got a weird migration error, so I've filed a bug report at #10769 instead.
In fact, this seems to be an issue to do with a named constrain bug posted at @ #8940 recently.",2021-12-19T21:19:49Z,1,1.0,(I) Reporting a Bug
553,https://github.com/prisma/prisma/discussions/10488,2021-11-29T14:10:33Z,"This doesn't sound right and it's definitely a bug. Could you please open an issue and share your directory structure in the monorepo and which directory you are running prisma generate from? Ideally, even a Git repository with minimal example that mimics your monorepo layout and triggers this bug. Thanks!",2021-11-29T16:39:12Z,1,1.0,(I) Reporting a Bug
554,https://github.com/prisma/prisma/discussions/10423,2021-11-24T16:58:12Z,"Can you open a bug report for this please and fill the issue template? We need information like the OS, the Prisma version used and so on to be able to debug this. Thanks.",2021-11-24T20:04:55Z,1,1.0,(IV) Clarification Request
555,https://github.com/prisma/prisma/discussions/10150,2021-11-07T17:20:46Z,"Can you please open an issue with this information and supply all the information the bug issue template asks for? This should just work and no from from you should be necessary. If that is not the case, we have a bug that we should fix.",2021-11-10T18:27:55Z,1,1.0,(I) Reporting a Bug
556,https://github.com/prisma/prisma/discussions/9957,2021-10-26T17:33:52Z,"Hey @GuiSim üëã!
This is definitely unexpected. I'm going to convert this to an issue where our engineering teams will triage and investigate further. Feel free to follow it as we might ask for more information.
We really appreciate you pointing this one out üëä.",2021-10-27T20:39:58Z,1,,(IV) Clarification Request
557,https://github.com/prisma/prisma/discussions/9957,2021-10-26T17:33:52Z,"It's the default behavior of TypeScript and how its type system works. TypeScript checks that the object type strictly matches the expected type when you pass an object literal, but allows any compatible type with extra fields (basically, a subtype) when you pass an identifier.
It's possible to override this behavior and always match the type strictly, though, using some type system hacks like this:

Could you please open an issue?",2021-10-28T10:23:47Z,2,1.0,(IV) Clarification Request
558,https://github.com/prisma/prisma/discussions/9840,2021-10-18T22:31:06Z,"Hey @amcjen, thanks for bringing this to our attention. Would you mind converting this discussion to an issue and providing a bit more context? Any more you can tell us about your schema, the nature of your migrations, when the delays started to occur etc. would be really helpful.",2021-10-19T15:48:36Z,1,1.0,(IV) Clarification Request
559,https://github.com/prisma/prisma/discussions/9817,2021-10-18T08:34:37Z,"@TomiHiltunen üëã
This seems like a bug. It would be great if you could create an issue here so that we can look into this.",2021-10-18T11:07:58Z,1,1.0,(I) Reporting a Bug
560,https://github.com/prisma/prisma/discussions/9510,2021-09-29T12:00:31Z,"@capaj üëã
This seems like an issue with the TypeGraphQL generator so I would suggest asking this in TypeGraphQL itself üôÇ",2021-09-29T12:18:09Z,1,1.0,(II) Unrelated Repository
561,https://github.com/prisma/prisma/discussions/9385,2021-09-22T11:40:30Z,"@darrylmorley üëã
This seems like a bug. It would be great if you could create an issue here so that we can look into this üôÇ",2021-09-22T12:14:33Z,1,1.0,(II) Unrelated Repository
562,https://github.com/prisma/prisma/discussions/5595,2021-02-11T08:36:36Z,Posted as an issue #5597,2021-02-11T09:47:44Z,1,1.0,(IV) Clarification Request
563,https://github.com/prisma/prisma/discussions/9137,2021-09-06T12:39:31Z,"This looks like a bug. It would be great if you could create an issue here so that we can look into this. In the meantime, you can use select or include like this to fetch the relation and it should have the correct type:
",2021-09-06T12:44:57Z,1,1.0,(I) Reporting a Bug
564,https://github.com/prisma/prisma/discussions/8458,2021-07-27T09:00:48Z,"@imadatyatalah üëã
You can get the message of the error as follows:

This will give you the correct message with regards to the model. I would still suggest creating an issue here to include the error code for rejectOnNotFound errors.",2021-07-27T10:49:08Z,1,1.0,(III) Enhancement
565,https://github.com/prisma/prisma/discussions/8373,2021-07-21T11:22:52Z,"@benedyktdryl üëã
Seems like a bug to me. I would suggest opening an issue here so that we can look into this üôÇ",2021-07-22T05:01:47Z,1,1.0,(I) Reporting a Bug
566,https://github.com/prisma/prisma/discussions/8236,2021-07-12T19:00:16Z,"There is the --skip-seed flag that will do that, but it's not the default. This could be configured (for example through package.json) though, if it's important for your use case, an issue would be great so we can track this.",2021-07-12T19:35:23Z,1,1.0,(IV) Clarification Request
567,https://github.com/prisma/prisma/discussions/7642,2021-06-14T10:36:46Z,"@mdespriee üëã
It would be great if you could create an issue here with all the required info so that we can look into this.
I assume you're using just a single instance of PrismaClient across the entire project. Also Serverless environments sometimes show this behaviour so we would like to know more about the environment you're running as well :)",2021-06-14T10:45:14Z,1,1.0,(IV) Clarification Request
568,https://github.com/prisma/prisma/discussions/7492,2021-06-06T15:34:25Z,Can you please enable debugging for queries in your Prisma Client (see docs) and post the full log you are getting? Maybe also just transfer this into a bug report issue and include all the information it asks for - the bug report template helps us to have all the information.,2021-06-06T20:16:22Z,1,1.0,(IV) Clarification Request
569,https://github.com/prisma/prisma/discussions/7355,2021-05-30T06:10:05Z,"An update on this question.
I am connecting through Datagrip database GUI with the same details and am able to query and update the database using the same details.
So my configuration appears to be correct - which leads to the the ""Invalid prisma.account.findMany() invocation - I'll update this to a bug report, and see what I get back.",2021-05-30T06:19:58Z,1,,(I) Reporting a Bug
570,https://github.com/prisma/prisma/discussions/7355,2021-05-30T06:10:05Z,Let's continue this over at #7356,2021-05-30T09:34:26Z,2,1.0,(I) Reporting a Bug
571,https://github.com/prisma/prisma/discussions/7266,2021-05-25T18:58:58Z,Can you please open an issue with the same content? Then we can try to reproduce this to see if this is a bug. Thanks.,2021-05-25T20:14:26Z,1,1.0,(IV) Clarification Request
572,https://github.com/prisma/prisma/discussions/7073,2021-05-13T12:05:52Z,"Could you quickly create a reproduction project for this, and create an issue here? This looks like a bug to me that we should reproduce and understand.
Do you even have a custom url for your datasource when you instantiate PrismaClient()?",2021-05-18T12:30:22Z,1,1.0,(I) Reporting a Bug
573,https://github.com/prisma/prisma/discussions/7026,2021-05-11T10:17:03Z,"That sounds like a Prisma 1 issue, please open an issue over there: https://github.com/prisma/prisma1/issues Thanks.",2021-05-11T20:50:23Z,1,1.0,(II) Unrelated Repository
574,https://github.com/prisma/prisma/discussions/6938,2021-05-05T06:51:59Z,"Wow, that is an interesting question.
What is the downside of killing the running Prisma QE process that makes you want to avoid that?
I do not think we have any solution here yet - but certainly could put the query engine in different locations per version to avoid this problem (for example).
Can you please open a feature request issue? We should definitely look at that.",2021-05-05T19:27:46Z,1,1.0,(IV) Clarification Request
575,https://github.com/prisma/prisma/discussions/6424,2021-04-06T05:32:09Z,"Please open separate issues about these things if they do not exist yet (I could not find any quickly).
We are happy to look into these separately.",2021-04-06T16:59:21Z,1,1.0,(IV) Clarification Request
576,https://github.com/prisma/prisma/discussions/6286,2021-03-28T07:21:20Z,"@menglingyu üëã
It would be great if you could open a bug report here regarding the same with the details.",2021-03-29T09:37:04Z,1,1.0,(IV) Clarification Request
577,https://github.com/prisma/prisma/discussions/6286,2021-03-28T07:21:20Z,"If your password is 123456, your connection string has an additional : at the end that you should remove: 123456:.",2021-03-29T19:04:11Z,2,,(IV) Clarification Request
578,https://github.com/prisma/prisma/discussions/5847,2021-02-25T16:05:52Z,"Hey @notzheng, thanks a lot for raising this! There are various factors that determine what kind of queries Prisma Client generates. In this case, it might be that Prisma Client doesn't generate the most efficient SQL query. If you'd like to see this improved, can you please create a bug report so that our engineering team can start looking into potentially optimizing this query? üôÇ",2021-02-25T16:48:23Z,1,1.0,(IV) Clarification Request
579,https://github.com/prisma/prisma/discussions/5319,2021-01-28T10:08:39Z,"@samthomson üëã
I would suggest creating an issue for this here. As a workaround, could you try running Promise.all for records in batches of 500 or 1000?",2021-01-28T10:26:23Z,1,1.0,(I) Reporting a Bug
580,https://github.com/prisma/prisma/discussions/4706,2020-12-17T17:25:10Z,This sounds like something we want to investigate. Can you please open an issue and fill the complete issue template so we have all information? Thanks.,2020-12-18T11:25:08Z,1,1.0,(IV) Clarification Request
581,https://github.com/prisma/prisma/discussions/4706,2020-12-17T17:25:10Z,Issue created: #4744,2020-12-20T22:33:19Z,2,,(IV) Clarification Request
582,https://github.com/prisma/prisma/discussions/4732,2020-12-18T11:49:51Z,"Hi @bkiac! Normally, this message would point to a use-case for baselining: https://www.prisma.io/docs/guides/prisma-guides/prisma-migrate-guides/add-prisma-migrate-to-a-project#baseline-your-production-environment
However if the database is empty, this is a bug. Can you please open an issue with as much detail as possible, so we can look into it?",2020-12-18T12:58:55Z,1,1.0,(IV) Clarification Request
583,https://github.com/prisma/prisma/discussions/4732,2020-12-18T11:49:51Z,"@tomhoule
I think it's caused by the PostGIS extension and since Prisma does not support it yet, I didn't open a bug.
Adding the PostGIS extension creates a spatial_ref_sys table, therefore schema is not empty, so Prisma is right.
If I reset the schema, migrations run successfully, but I lose the spatial types.
I created the issue here: #4745",2020-12-20T09:45:14Z,2,,(IV) Clarification Request
584,https://github.com/prisma/prisma/discussions/3954,2020-10-16T22:13:52Z,"I would also expect deleteResetPassRow to be reverted when updateUserPass errors. This seems to be a bug, so you might want to create a detailed bug report.",2020-10-17T14:44:47Z,1,,(I) Reporting a Bug
585,https://github.com/prisma/prisma/discussions/3954,2020-10-16T22:13:52Z,"Hey @vrg-success üëã
Have you created an issue for the above?",2020-10-19T06:35:45Z,2,1.0,(I) Reporting a Bug
586,https://github.com/prisma/prisma/discussions/3733,2020-09-22T16:10:09Z,"Hey @alan345 üëã
It would be great if you could create an issue here. Also did you update both the Client and the CLI to 2.7.1 as I am not able to reproduce this on my system.",2020-09-23T07:22:34Z,1,1.0,(IV) Clarification Request
587,https://github.com/prisma/prisma/discussions/3322,2020-08-17T11:31:33Z,"Hey @TheoMer, I believe Nexus currently has express-graphql as a built-in GraphQL server and believe it's not swappable to Apollo Server, unfortunately. Feel free to open up an issue for this in the graphql-nexus repo.",2020-08-17T13:22:01Z,1,1.0,(II) Unrelated Repository
588,https://github.com/prisma/prisma/discussions/3213,2020-08-05T18:05:41Z,"Hey @tanem üëã
I can reproduce this, will create an issue for this as well :)",2020-08-06T08:07:51Z,1,1.0,(I) Reporting a Bug
589,https://github.com/prisma/prisma/discussions/3213,2020-08-05T18:05:41Z,"Resolved thanks to this issue comment.
",2020-08-07T19:32:44Z,2,,(I) Reporting a Bug
590,https://github.com/prisma/prisma/discussions/3047,2020-07-17T04:15:47Z,"Hey @Yawaiaung001 üëã
I'm assuming this is due to the quite large schema that prisma generate hangs or overflows due to a memory issue. I'm creating an issue for this.",2020-07-17T08:13:34Z,1,1.0,(I) Reporting a Bug
591,https://github.com/prisma/prisma/discussions/3058,2020-07-17T11:44:53Z,"Hey @TheoMer, thanks a lot for raising this! Are you using the Upgrade CLI for the upgrade process?
The issue you're seeing is a mix of two schema incompatibilities:

Enums are represented as TEXT in database
Scalar lists (arrays) are maintained with extra table

Since enums are scalars, you're experiencing both issues at the same time. Nevertheless, the Upgrade CLI should cover this case by generating the right SQL statements for you such that your end result of the Prisma schema would be exactly the one you describe:

Would you mind ""moving"" this discussion as an issue in the upgrade repo? We'll pick it up there and ensure the use case is being addressed with the Upgrade CLI! üôÇ",2020-07-17T13:03:18Z,1,1.0,(IV) Clarification Request
592,https://github.com/prisma/prisma/discussions/2494,2020-05-16T19:40:45Z,"Unfortunately it doesn't at the moment, but we absolutely want to support more native database types in the future. Please open an issue if ltree support matters to you, so progress on this can be tracked :)
One workaround for now would be using the raw method, falling back to raw SQL.",2020-05-16T21:18:30Z,1,1.0,(IV) Clarification Request
593,https://github.com/prisma/prisma/discussions/2228,2020-04-19T16:16:35Z,I am using skip (length of the current items) to fetch more instead of using after and it works as expected with orderBy üëç,2020-04-19T18:13:17Z,1,,(IV) Clarification Request
594,https://github.com/prisma/prisma/discussions/2228,2020-04-19T16:16:35Z,Hey @jana-uoft could you pls create a new bug report for this here,2020-04-22T07:57:54Z,2,1.0,(IV) Clarification Request
595,https://github.com/prisma/prisma/discussions/2091,2020-04-04T12:45:33Z,"Hey @JohnnyCrazy üëã thanks a lot for raising this! It seems to me like this indeed can (and should) be optimized. For the Beta, we mainly focused on stability of Prisma Client, but we certainly have lots of performance improvements on our list that we'll talk through in the upcoming weeks and months.
Would be great if you could create an issue for this to make sure it's persisted üôÇ",2020-04-06T13:25:42Z,1,1.0,(III) Enhancement
596,https://github.com/prisma/prisma/discussions/2091,2020-04-04T12:45:33Z,"Will do today, sorry for the delay üëç",2020-04-09T12:34:54Z,2,,(III) Enhancement
597,https://github.com/prisma/prisma/discussions/2086,2020-04-03T20:30:22Z,"Hey @five07, thanks a lot for raising this! Do you mind creating this as a GitHub issue actually since it rather looks like a bug that we should triage and reproduce.
Sorry for the inconvenience, the line between creating an issue and creating a question/discussion is a bit blurry at the moment and unfortunately you only can convert issues to questions but not the other way around... üòê",2020-04-06T13:51:32Z,1,1.0,(I) Reporting a Bug
598,https://github.com/prisma/prisma/discussions/1913,2020-03-23T20:22:42Z,"Hey @samrith-s
If a record with that troupId exists, then you are certainly allowed to do this.
Please open an bug report instead with a reproduction of this issue: https://github.com/prisma/prisma2/issues/new?assignees=&labels=&template=bug_report.md&title=",2020-03-24T14:26:56Z,1,1.0,(IV) Clarification Request
599,https://github.com/vuetifyjs/vuetify/discussions/13639,2021-05-12T09:07:31Z,Created an issue in https://github.com/vuetifyjs/vuetify-issue-helper,2021-05-12T09:35:31Z,1,1.0,(II) Unrelated Repository
600,https://github.com/logaretm/vee-validate/discussions/3743,2022-04-06T18:22:15Z,"At the moment this isn't possible without an external i18n or a dictionary to map out your target names to labelled ones.
I think this is fairly easy to implement so I will create an issue from it as an enhancement.",2022-04-14T01:25:54Z,1,1.0,(III) Enhancement
601,https://github.com/logaretm/vee-validate/discussions/3535,2021-10-15T14:27:20Z,"This is not exposed to the useForm API but it would be easy to add that and seems like a good enhancement to have.
I will create an issue from this so you can track its progress.",2021-10-18T16:49:28Z,1,1.0,(III) Enhancement
602,https://github.com/aws-amplify/amplify-js/discussions/5446,2020-04-17T13:48:04Z,"This is a feature that we've spent a ton of time trying to make happen at work. The way that we have been handling cross domain token storage in two ways:

subdomains: custom cookie storage
different top-level domains: token sharing through implicit oauth flow

subdomains
The custom CookieStorage will store all of the tokens at the eLTD+1 (so *.example.com) and that way any subdomain has access to all of the tokens. Cognito doesn't let you have multiple redirectUris for the oauth flows, so what we've been doing is always use one subdomain for the oauth flow and sort of treating it like a proxy:

User goes to https://foo.example.com
They click on login with SSO button
We redirect to https://special.example.com/special/path
This calls Auth.federatedSignIn
User is sent to Cognito -> SSO Provider -> Back to Cognito
User lands on https://special.example.com?code=...
After the code flow finishes, we store the tokens in a cookie
The we redirect the user back to https://foo.example.com

This is pretty annoying and not very fast. A benefit is that now the user can navigate to any subdomain and they will be logged in already.
I don't have any other solutions for it, so that's what we've been doing. We can't use the Hosted UI because it's too limited style-wise and we also have to brand the login screen differently for different tenants.
cross domain
So in this case, we have some properties on different eTLD+1 (*.example.com and some on *.example.net). In order to share the token over there we are taking advantage of the implicit OAuth flow and doing something like this:

User is on https://foo.example.com
They click link to go to https://bar.example.net
We grab the access_token & id_token and put them on the URL like this: https://bar.example.net/#access_token=...&id_token=....

This has a major disadvantage of losing the refreshToken the user will be logged out after a while. As of yet we don't have a good solution for this. All I can hope is that we can merge all of our properties into one root domain before too long.
I would love to hear from the Amplify team on how/if they intend to support cross domain logins.",2020-06-04T22:20:31Z,1,,(III) Enhancement
603,https://github.com/aws-amplify/amplify-js/discussions/5446,2020-04-17T13:48:04Z,Any update on this ? we're also struggling with this at the moment,2020-08-01T11:42:21Z,2,,(III) Enhancement
604,https://github.com/aws-amplify/amplify-js/discussions/5446,2020-04-17T13:48:04Z,Any update on this?,2020-09-12T15:45:52Z,3,,(III) Enhancement
605,https://github.com/aws-amplify/amplify-js/discussions/5446,2020-04-17T13:48:04Z,Any update on this?,2021-02-04T13:23:58Z,4,,(III) Enhancement
606,https://github.com/aws-amplify/amplify-js/discussions/5446,2020-04-17T13:48:04Z,any update on this?,2021-08-20T05:07:00Z,5,,(III) Enhancement
607,https://github.com/aws-amplify/amplify-js/discussions/5446,2020-04-17T13:48:04Z,Any update on this?,2021-10-25T13:24:26Z,6,,(III) Enhancement
608,https://github.com/aws-amplify/amplify-js/discussions/5446,2020-04-17T13:48:04Z,I have not personally tried this out. I will work on creating a sample or if anyone here has a sample I could use @ me. I will create an issue out of this one so we can track this.,2021-11-03T18:42:40Z,7,1.0,(III) Enhancement
609,https://github.com/aws-amplify/amplify-js/discussions/7707,2021-02-08T03:40:43Z,"Please NOTE: After trying many things, I'm now convinced this is not a question but an issue so I opened an issue here (and would continue any further discussion in that issue): aws-amplify/amplify-cli#6589",2021-02-10T22:41:35Z,1,1.0,(IV) Clarification Request
610,https://github.com/simple-icons/simple-icons/discussions/5475,2021-04-17T09:49:47Z,"Hi @nhtnhan üëã Unfortunately the Python wrapper is not officially provided by us, instead it's a third-party package developed by @vigonotion. I myself have never tried it, and nor has any of the other @simple-icons/maintainers I think, so I'm afraid we cannot be of any help to you.
The pypi page links to the simple-icons fork of @vigonotion, unless they responds here you're probably better of opening an issue there üôÇ",2021-04-17T17:12:47Z,1,1.0,(II) Unrelated Repository
611,https://github.com/simple-icons/simple-icons/discussions/5475,2021-04-17T09:49:47Z,"Hi, yes that's my project. That library is under development and not working at all yet. I want to use it to improve the hass-simpleicons project. Unfortunately, I cannot give you an ETA for the release of that library, I don't currently have time to develop that library.
If you are a programmer yourself, you can help me develop that library if you like, PRs welcome ü§ó",2021-04-17T17:29:26Z,2,,(II) Unrelated Repository
612,https://github.com/simple-icons/simple-icons/discussions/5475,2021-04-17T09:49:47Z,"@nhtnhan Have you already looked at https://pypi.org/project/simpleicons (source code is here: https://github.com/xCloudzx/simpleicons)? Seems like it's another recently developed Python wrapper for Simple Icons, which already (kind of) works and has some basic features. I just quickly tested it.
@xCloudzx has developed it. And maybe all of you (including @vigonotion) can work together on it? üòä",2021-04-18T11:25:51Z,3,,(II) Unrelated Repository
613,https://github.com/simple-icons/simple-icons/discussions/5475,2021-04-17T09:49:47Z,I've finished updating my package (simpleicons). Also repo here. It utilizes the same tricks that the JS package does by generating (.py) files. I think you will find that it stays quite close to the API in this package. The documentation is also very similar (it's all in the README).,2021-04-19T06:08:06Z,4,,(II) Unrelated Repository
614,https://github.com/bootstrap-vue/bootstrap-vue/discussions/6184,2020-12-14T06:55:51Z,"You're probably right, but this is more of an upstream issue.
So i would suggest you open up an issue on the Bootstrap Repo, with your suggestion.
You can also modify the color in your project easily if you're using SCSS.
The following variable $nav-link-disabled-color, can be edited to change the disabled color, just be aware <b-nav> and <b-tabs> share the same styling.
(also glad to see people are using the new Discussions Section)",2020-12-14T10:22:28Z,1,1.0,(II) Unrelated Repository
615,https://github.com/bootstrap-vue/bootstrap-vue/discussions/6184,2020-12-14T06:55:51Z,"Bootstrapvue. This one: https://github.com/bootstrap-vue/bootstrap-vue.
I am following https://github.com/bootstrap-vue/bootstrap-vue/blob/dev/CONTRIBUTING.md",2020-12-14T10:31:14Z,2,,(II) Unrelated Repository
616,https://github.com/bootstrap-vue/bootstrap-vue/discussions/6184,2020-12-14T06:55:51Z,"Thanks again!
npm run docs-dev has started the dev server!!
In fact I want to use Yarn as well, but wondering whether installing Yarn globally could have any conflict with npm since it has been installed globally as well. I Googled but could not get a suitable answer to it.",2020-12-14T11:20:07Z,3,,(II) Unrelated Repository
617,https://github.com/nuxt/nuxt.js/discussions/9954,2021-10-16T06:55:29Z,Would you create an issue with a reproduction?,2021-10-16T07:31:49Z,1,1.0,(IV) Clarification Request
618,https://github.com/nuxt/nuxt.js/discussions/9800,2021-09-15T13:05:23Z,"I will talk about it tomorrow at Nuxtnation and we will clearly include more useful links with the new documentation, it needs some polish. üëçüèª",2021-09-15T14:08:57Z,1,,(III) Enhancement
619,https://github.com/nuxt/nuxt.js/discussions/9800,2021-09-15T13:05:23Z,"This is a good suggestion, do you mind opening an issue on nuxt/NuxtJS.org repo please?",2021-09-15T22:58:04Z,2,1.0,(III) Enhancement
620,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,"üëã Thanks for opening your first issue! If you're reporting a üêû bug, please make sure
you include steps to reproduce it. If you're requesting a feature üéÅ, please provide real
use cases that would benefit. üë™
To help make this a smooth process, please be sure you have first read the
contributing guidelines.",2019-11-13T18:03:58Z,1,,(IV) Clarification Request
621,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,"It would be great! please consider it, thumbs up!",2019-12-03T22:31:31Z,2,,(IV) Clarification Request
622,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,"This would be awesome, I agree!",2019-12-11T20:04:14Z,3,,(IV) Clarification Request
623,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,really need this feature,2020-01-19T13:44:23Z,4,,(IV) Clarification Request
624,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,Yeah this would be epic,2020-02-25T14:46:49Z,5,,(IV) Clarification Request
625,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,This would be incredibly useful.,2020-07-01T17:18:37Z,6,,(IV) Clarification Request
626,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,"You can actually do it your own in a fairly easy way (especially if you rely on a CI), whenever you sync your API to a remote Git, it creates a .insomnia  folder, where inside it automatically creates an ApiSpec folder, inside there's one .yaml file for each one of your API specs.
The good news is: each .yaml is elaborated in such a consistent way that if you exclude the first 3 lines and the last 5 lines of every .yaml file inside .insomnia/ApiSpec/, you'll obtain an OpenAPI compatible file.
I think a simple JS editor can be done meanwhile, but I rather see that implemented as an actual feature...",2020-07-02T01:27:06Z,7,,(IV) Clarification Request
627,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,That will be awesome while swaggymniav is a decent solution currently.,2020-07-03T03:48:08Z,8,,(IV) Clarification Request
628,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,"
That will be awesome while swaggymniav is a decent solution currently.

I tried swaggymnia but it is not working with Insomnia v4 and the latest insomnia is only allowing to export in Insomnia v4. Any idea how to proceed?",2020-07-22T10:36:21Z,9,,(IV) Clarification Request
629,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,@sanchitsharma try: https://github.com/Fyb3roptik/swaggomnia,2020-07-29T02:35:25Z,10,,(IV) Clarification Request
630,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,"
The good news is: each .yaml is elaborated in such a consistent way that if you exclude the first 3 lines and the last 5 lines of every .yaml file inside .insomnia/ApiSpec/, you'll obtain an OpenAPI compatible file.

While Insomnia currently doesn't generate an OpenAPI spec (and I agree it would be a useful feature), just chiming in that we've recently released inso, a companion CLI through which you can export the spec written in designer into a file (as an alternative to the comment quoted). üòÑ
inso export spec specName -o output.yaml",2020-07-30T20:27:51Z,11,,(IV) Clarification Request
631,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,"I've created a very basic npm package here which may suit the needs. Can someone give it a try. Its an early release and thus not a cli usable package, but it does borrow some of the items from swaggymnia
https://www.npmjs.com/package/insomnia-openapi-converter/",2020-10-06T18:04:57Z,12,,(IV) Clarification Request
632,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,"The fragmentation on this project is a bit worrying and confusing.
With that out of the way, I'm making it clear: I'd love to have this included itself on the Insomnia Core application. Other than the (currently unusable) npm package mentioned above, has there been any progress on this?",2020-10-20T02:28:39Z,13,,(IV) Clarification Request
633,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,"Hi @NickAcPT - there was some confusion with the comments/questions and the original feature request here, so I cleared that in my comment above. However, the original feature request currently does not have an progress.
I believe there are enough plugin APIs available in order to create a plugin for Insomnia Core to be able to achieve this.",2020-10-20T02:35:26Z,14,,(IV) Clarification Request
634,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,"Is there any progress on this? I would expect to see OpenAPI as a drop down option when exporting from Insomnia. This would be a huge win over Postman currently. Right now if I want to even get close to generating library code from a non-openapi format (Postman Collection or Insomnia) I have to use something like apimatic.io to transform it, no other tools seem to work.",2021-03-16T22:22:56Z,15,,(IV) Clarification Request
635,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,"Hi @HeathNaylor, unfortunately no progress yet but it may be possible to create a plugin to use apimatic.io in the meantime üëÄ
Adding this natively is on the roadmap but not in the immediate future as far as I know.",2021-03-16T23:14:05Z,16,,(IV) Clarification Request
636,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,"Hi @NickAcPT I am sorry the plugin didn't worked out for you. Let me fix it and get back I've fixed the plugin and added a test for very basic functionality: https://www.npmjs.com/package/insomnia-oas-converter
If you can, please file an issue so I can continue making package better.",2021-03-17T04:53:19Z,17,1.0,(IV) Clarification Request
637,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,Why it was moved from #1778 (comment) into this discussion? What wrong with the ticket?,2021-07-01T06:03:28Z,18,,(IV) Clarification Request
638,https://github.com/Kong/insomnia/discussions/3737,2019-11-13T18:03:57Z,"So basically how should I use that converter directly in Insomnia or via command line? Most of converters are fired directly from CLI using node. However I can't see such a possibility here. There is a statement that:

you can use this as a plugin

But how can I do this?",2021-07-12T10:57:20Z,19,,(IV) Clarification Request
639,https://github.com/docsifyjs/docsify/discussions/1680,2021-12-03T22:58:06Z,"Hello! I don't remember right now what it might be, but maybe useful to check in router",2021-12-08T17:43:12Z,1,,(I) Reporting a Bug
640,https://github.com/docsifyjs/docsify/discussions/1680,2021-12-03T22:58:06Z,"Sorry, I don't have live example",2021-12-08T17:53:32Z,2,,(I) Reporting a Bug
641,https://github.com/docsifyjs/docsify/discussions/1680,2021-12-03T22:58:06Z,I am trying to find an example to use router..,2021-12-08T18:07:59Z,3,,(I) Reporting a Bug
642,https://github.com/docsifyjs/docsify/discussions/1680,2021-12-03T22:58:06Z,Sorry about this issue. I think this can be considered a bug. Mind making a reproduction and putting it in an issue?,2021-12-31T05:54:06Z,4,1.0,(I) Reporting a Bug
643,https://github.com/renovatebot/renovate/discussions/14001,2022-02-04T14:05:32Z,It looks like it should be the type of thing we support. Please create a minimal reproduction + bug report issue and we'll take a look.,2022-02-05T06:39:28Z,1,1.0,(I) Reporting a Bug
644,https://github.com/carbon-design-system/carbon/discussions/8729,2021-05-20T18:47:03Z,"Hey @hermansb thanks for opening this discussion. This seems like a fair ask. I'm opening an issue from this so we can keep track of it in our backlog. If you'd like to contribute a PR to fix this, we'd welcome it, otherwise we'll get to it when we have the time. :)",2021-08-12T19:05:38Z,1,1.0,(IV) Clarification Request
645,https://github.com/carbon-design-system/carbon/discussions/7805,2021-02-15T16:37:19Z,"Hey there @KristerL , this does seem like a bug. It might be better to create an issue so that we can properly track this and figure out a solution for your use-case",2021-02-16T21:21:35Z,1,1.0,(I) Reporting a Bug
646,https://github.com/eclipse-theia/theia/discussions/10196,2021-09-30T03:59:38Z,"Hi @sachin207, thank you for reporting this issue. I created an appropriate bug report #10197. Discussion on that bug will continue there.",2021-09-30T07:49:50Z,1,1.0,(I) Reporting a Bug
647,https://github.com/eclipse-theia/theia/discussions/10136,2021-09-19T09:48:28Z,"Hi @safisa, thank you for your question.
Is this strictly related to vscode extensions? As far as I can tell, there's no way in the vscode API to retrieve active non-text editors. However, you're probably better off asking on stackoverflow with the vscode tag.
If I'm wrong and vscode does support it, but Theia doesn't, please file a bug report with the appropriate steps to reproduce the issue.",2021-09-19T12:39:55Z,1,1.0,(IV) Clarification Request
648,https://github.com/eclipse-theia/theia/discussions/8894,2020-12-23T13:32:31Z,"@EdorianDark the 1.0.0 release was a significant milestone for the project, I'm not sure how it makes the project look inactive (since both github releases and npm show the newest versions).
Please file an issue in the appropriate repository (https://github.com/theia-ide/theia-website), and/or provide a pull-request to resolve it.",2020-12-24T19:09:09Z,1,1.0,(II) Unrelated Repository
649,https://github.com/eclipse-theia/theia/discussions/8486,2020-09-09T22:14:41Z,"@UnlimitedCookies thank you for the discussion, we already have an issue tracking supporting collaboration (similarly to as you described), it may be best to continue discussion there instead:  #2842.",2020-09-10T12:10:37Z,1,1.0,(IV) Clarification Request
650,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"PS I'd like to label this Question, but that requires a githib checkbox that I cannot find.",2020-02-01T11:57:02Z,1,,(IV) Clarification Request
651,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"Just an an FYI, you can open the keyboard shortcuts view the platforms list of commands and their respective keybindings.  The view can be opened from the file menu + settings, or by using the command palette (F1) and searching for keyboard shortcuts.",2020-02-01T13:56:20Z,2,,(IV) Clarification Request
652,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"Thanks, but I don't see any of those key commands under Keyboard Shortcuts - as expected, since they'd normally be standard key commands rather than shortcuts.
By the way, Keyboard Shortcuts is a misnomer for that dialog. Those key commands bindings are rarely shortcuts. Key Bindings would be correct.",2020-02-01T14:31:24Z,3,,(IV) Clarification Request
653,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"
By the way, Keyboard Shortcuts is a misnomer for that dialog. Those key commands bindings are rarely shortcuts. Key Bindings would be correct.

I believe we simply adopted the naming present in VS Code and did not find enough of a reason to misalign. VS Code also refers to the same view as Keyboard Shortcuts.",2020-02-01T14:56:15Z,4,,(IV) Clarification Request
654,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,Would you say being wrong was sufficient reason?,2020-02-01T15:05:10Z,5,,(IV) Clarification Request
655,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"
Being wrong is not good enough reason?

Sorry, but I don't see what is wrong about calling a keyboard shortcuts view as keyboard shortcuts. The view describes all available commands and keybindings, and allows you to update them/revert them to their default values. I think it's more a matter of your own opinion since you also believe a well established editor such as VS Code is wrong as well.",2020-02-01T15:14:42Z,6,,(IV) Clarification Request
656,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"
Sorry, but I don't see what is wrong about calling a keyboard shortcuts view as keyboard shortcuts.

Nothing. But it is not a keyboard shortcuts view. Most of the entries aren't keyboard shortcuts. They are simply command-to-key bindings.

The view describes all available commands and keybindings

Indeed it does.

I think it's more a matter of your own opinion

Microsoft's too.
""Keyboard shortcuts are keys or combinations of keys that provide another way to do something that you‚Äôd typically do with a mouse."" https://support.microsoft.com/en-gb/help/13805/windows-keyboard-shortcuts-in-apps

since you also believe a well established editor such as VS Code is wrong as well.

I have no doubt the VS Code team is capable of getting something wrong. Every dev team is.",2020-02-01T15:38:58Z,7,,(IV) Clarification Request
657,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"AFAIK all of the menus entries are commands. So if you can map keybindings to commands, you effectively can create any ""shortcut"" you want, since you won't need to use your mouse ever. You can also hit F1 and get an exhaustive list. In practice I don't know if everything is really covered by commands, but I'd say you can do a lot already. Then there's UI navigation like pressing tab to focus inputs and whatnot, we try our best but maybe it doesn't always work. PRs are welcome if anything is missing or bogus.",2020-02-01T16:26:23Z,8,,(IV) Clarification Request
658,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"
AFAIK all of the menus entries are commands.

But not all commands are menu entries. Or accessible except by bound key.
That's why ""keyboard shortcuts"" isn't a list of keyboard short cuts. [<< Space is workaround for GitHub formatting fail].
What it is, is a list of commands (including those having no keys https://i.imgur.com/pKMI1Fz.png) allowing them to be bound to keys.",2020-02-01T17:05:44Z,9,,(IV) Clarification Request
659,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"Ok, I did not get that you were talking about the title of the widget. Feel free to rename it.",2020-02-01T18:29:57Z,10,,(IV) Clarification Request
660,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"For avoidance of doubt, it is this:
",2020-02-01T18:39:50Z,11,,(IV) Clarification Request
661,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"
I have no doubt the VS Code team is capable of getting something wrong. Every dev team is.

While it‚Äôs true that any dev team can make mistakes it is still a matter of your own opinion. If you truly believe there should be an update to make to the default naming of the view then feel free to open a new issue describing why it should be updated and get feedback. Else, it is entirely possible to customize the name of the view in your own application as such things are updatable.",2020-02-01T22:06:30Z,12,,(IV) Clarification Request
662,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"@chrisjj @vince-fugnitto I got a bit confused by the discussion about terminology, so could you answer me this: can Theia be operated using only the keyboard? Because if not, that would be an accessibility issue.",2020-02-03T09:28:18Z,13,,(IV) Clarification Request
663,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"Ideally it should be, if not please open individual issues.",2020-02-03T10:23:35Z,14,,(IV) Clarification Request
664,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"@tsmaeder ""could you answer me this: can Theia be operated using only the keyboard?""
No. Since posting I've concluded there's no way to engage menus using keyboard, except for special cases such as the editor context menu.",2020-02-03T15:18:06Z,15,,(IV) Clarification Request
665,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"
Ideally it should be,

Is there some design document establishing that keyboard operability is intended?",2020-02-03T15:19:00Z,16,,(IV) Clarification Request
666,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"@chrisjj I don't think there is such a written requirement about the platform. But this is a collaborative project, each contributor is free to satisfy any of his own requirements as long as it benefits everyone and goes along the overall framework's goals. Keyboard operability seems like a beneficial thing to support, but maybe no-one prioritized this yet. Again: PRs are welcome.

[...] Since posting I've concluded there's no way to engage menus using keyboard, except for special cases such as the editor context menu.

If you are talking about menus such as ""File"", ""View"", etc... Each entry is a command, so you can hit F1 and search for what you would usually click on. I don't see what the problem is.",2020-02-03T16:38:49Z,17,,(IV) Clarification Request
667,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"
I don't think there is such a written requirement about the platform.

Thanks.

But this is a collaborative project, each contributor is free to satisfy any of his own requirements as long as it benefits everyone and goes along the overall framework's goals.

So, if one contributor did add full keyboard operability, the fact the overall framework's goals does not include keyboard operability allows that to be undermined by subsequent contributions of mouse-only features. Right?

If you are talking about menus such as ""File"", ""View"", etc... Each entry is a command, so you can hit F1 and search for what you would usually click on.

Normally on a Windows program, Alt+F shows the File menu with selected commands ordered and grouped by function. On Theia, you get the same from a mouse click. But on keyboard, you're suggesting hit F1 and  type 'file:' to see only some of the File commands, some others too, and not ordered or grouped by function.

I don't see what the problem is.

It's worth trying Alt-F on a Windows program to see how inferior is your suggested substitute.",2020-02-04T01:54:29Z,18,,(IV) Clarification Request
668,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"
So, if one contributor did add full keyboard operability, the fact the overall framework's goals does not include keyboard operability allows that to be undermined by subsequent contributions of mouse-only features. Right?

Like Anton said ""ideally"" navigation should be as convenient as possible, this would include keyboard shortcuts, maybe. If you are an expert in shortcuts-design and wish to bring Theia's standard up, then you can implement your solution, and also document a way for other contributors to follow in order to properly build on top of it. In order to enforce this even more, one would have to carefully review PRs and call out when keyboard navigatibility could be improved.
If it is missing in some places, we can always try to add it later. So really there are only solutions.

[...] you're suggesting hit F1 and type 'file:' to see only some of the File commands, some others too, and not ordered or grouped by function.

Yes, this currently works well. Just type what you think the name of command is, good discoverability this way. If you know specific commands in advance its even faster, and you can also bind a shortcut for it.",2020-02-04T03:37:37Z,19,,(IV) Clarification Request
669,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"
Normally on a Windows program, Alt+F shows the File menu with selected commands ordered and grouped by function. On Theia, you get the same from a mouse click. But on keyboard, you're suggesting hit F1 and type 'file:' to see only some of the File commands, some others too, and not ordered or grouped by function.

Please file an issue with it without the rest of noise.",2020-02-04T07:43:51Z,20,,(IV) Clarification Request
670,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"#7063 - opened for it, do you have something else concrete to propose?
@marechal-p I would be fine to add to our review checklist a check to review for proper keyboard accessibility. Could you send a PR? For now proper means that it is operable somehow, we can decide on concrete rules after gaining some experience during reviews and include in the coding guidelines later.",2020-02-04T10:30:31Z,21,,(IV) Clarification Request
671,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"

So, if one contributor did add full keyboard operability, the fact the overall framework's goals does not include keyboard operability allows that to be undermined by subsequent contributions of mouse-only features. Right?



Like Anton said ""ideally"" navigation should be as convenient as possible, this would include keyboard shortcuts, maybe. If you are an expert in shortcuts-design and wish to bring Theia's standard up, then you can implement your solution, and also document a way for other contributors to follow in order to properly build on top of it. In order to enforce this even more, one would have to carefully review PRs and call out when keyboard navigatibility could be improved.

I'll take that as a Yes. Thanks.
I don't have faith that keyboard operability would be maintained by ""document a way for other contributors to follow in order to properly build on top of it"". It would need a solid policy.

Yes, this currently works well. Just type what you think the name of command is, good discoverability this way. If you know specific commands in advance its even faster, and you can also bind a shortcut for it.

I don't believe that's any substitute for menus. Hence that so many programs have menus and so few have command palettes - including major Theia IDEs such as Arm Mbed Studio.",2020-02-05T00:53:28Z,22,,(IV) Clarification Request
672,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"
Please file an issue with it without the rest of noise.

I see you did so. Thanks.",2020-02-05T01:36:51Z,23,1.0,(IV) Clarification Request
673,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,See #7082 .,2020-02-05T01:37:03Z,24,,(IV) Clarification Request
674,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"
I don't believe that's any substitute for menus. Hence that so many programs have menus and so few have command palettes - including major Theia IDEs such as Arm Mbed Studio.

I fail to see the point here. The framework permits downstream applications for benefitting from both menus and the command-palette (popularized in vscode) in order to perform operations. The command-palette is not a replacement for menus but it is another manner in which commands (especially recently used ones) can be easily triggered.
The goal is to make menus more easily accessible when using a keyboard which is a fair point and is why #7082, but I also see the value in using the command-palette.
You brought up Arm's Mbed Studio, do they do something differently with menus?",2020-02-05T01:45:35Z,25,,(IV) Clarification Request
675,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"
The command-palette is not a replacement for menus

I'd taken you to be suggesting otherwise in your answer to my


Since posting I've concluded there's no way to engage menus using keyboard, except for special cases such as the editor context menu.


that being

If you are talking about menus such as ""File"", ""View"", etc... Each entry is a command, so you can hit F1 and search for what you would usually click on. I don't see what the problem is.

Thanks for the clarification.

The goal is to make menus more easily accessible when using a keyboard

That statement would be useful if they were accessible at all using a keyboard, but since they are not,. I suggest ""The goal is to make menus accessible by keyboard.

I also see the value in using the command-palette.

So do I. Just that I don't think that value is of any relevance to menus, except as a temporary workaround.

You brought up Arm's Mbed Studio, do they do something differently with menus?

I brought up Arm Mbed Studio as an example that does the same. The only difference I see is it exacerbates the issue by disallowing access to the command palette and keyboard bindings editor.
If there's any better major Theia-made IDE (and I really hope there is), please say.",2020-02-05T13:37:36Z,26,,(IV) Clarification Request
676,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"
I brought up Arm Mbed Studio ans example that does the same. The only difference I see is it exacerbates the issue by disallowing access to the command palette and keyboard bindings.

cc @thegecko @westbury just in case if you did not follow this discussion",2020-02-06T06:02:38Z,27,,(IV) Clarification Request
677,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,Thanks @akosyakov we are aware of this issue.,2020-02-06T08:47:22Z,28,,(IV) Clarification Request
678,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"An example of a SPA that does have a traditional main menu accessible via keyboard, look at Google Docs. You can use Ctrl+Alt+F to get to file menu, for example.",2020-02-19T18:53:32Z,29,,(IV) Clarification Request
679,https://github.com/eclipse-theia/theia/discussions/9500,2020-02-01T11:55:11Z,"@gtritchie true, i've mentioned it in #7063. Active committers don't have capacity for it right now, we will have a look when we have. In the meantime anybody is welcomed to send a PR.",2020-02-20T07:59:25Z,30,,(IV) Clarification Request
680,https://github.com/facebook/docusaurus/discussions/6099,2021-12-12T13:16:35Z,"Hi, it seems the openapi plugin is using the docusaurus internals which is not compatible with the latest change. Please open an issue in their repo telling them that the constants have been moved to @docusaurus/utils.",2021-12-12T13:26:18Z,1,1.0,(II) Unrelated Repository
681,https://github.com/facebook/docusaurus/discussions/4872,2021-05-30T18:34:00Z,"It is hard to help you if we can't see your site live, it's config or source code, and it's algolia docsearch config (if you even use DocSearch?).
Afaik nobody tested the Netlify system yet and we don't document it yet, so you are in unknown territory here

@shortcuts any idea if the Netlify Algolia Crawler Plugin is usable with a Docusaurus site and Docsearch?
Should we use it ourselves on Docusaurus site and document this workflow?
What are the advantages? Maybe not wait a scheduled recrawl?",2021-06-02T15:52:00Z,1,,(IV) Clarification Request
682,https://github.com/facebook/docusaurus/discussions/4872,2021-05-30T18:34:00Z,"The DocSearch library follow a specific record structure, which is not the default indexing of the Algolia Crawler.
With the open-source DocSearch crawler, we use a specific template for any Docusaurus v2 websites that you can translate with the help of the built-in DocSearch helper in the Algolia Crawler.
The recordExtractor in your Crawler config would look like this:

Any records in your Algolia index will now have the right format to be used with our front-end library!
Since this is a fairly new feature, If you see any issue with the output from the Crawler, feel free to open an issue on the DocSearch repository so we can iterate on it!",2021-06-02T16:13:43Z,2,1.0,(IV) Clarification Request
683,https://github.com/codesandbox/codesandbox-client/discussions/5172,2020-11-23T23:28:52Z,"Hey!
This seems to be a real issue in our bundler, mind making an issue instead?",2020-11-24T10:33:17Z,1,1.0,(III) Enhancement
684,https://github.com/codesandbox/codesandbox-client/discussions/4757,2020-08-24T12:44:37Z,"Hi there!
You can track an issue on it here: #4857 üòÑ
I will let you know when it is fixed though!",2020-09-08T13:11:13Z,1,1.0,(IV) Clarification Request
685,https://github.com/codesandbox/codesandbox-client/discussions/4757,2020-08-24T12:44:37Z,"I believe this has been fixed now, but please let us know if there are any issues still üòÑ",2020-10-21T08:22:19Z,2,,(IV) Clarification Request
686,https://github.com/WordPress/gutenberg/discussions/35760,2021-10-19T11:46:26Z,"I really like this idea, particularly since this is on track to become a UX pattern for other blocks that we want to introduce people to. As you mention, it also matches the mental model of adding in various filters to build the query itself.",2021-10-19T15:32:32Z,1,,(III) Enhancement
687,https://github.com/WordPress/gutenberg/discussions/35760,2021-10-19T11:46:26Z,"Wow James! This is spot on! Similar concept to the design tools being developed!
@ntsekouras Nik you got to check out James video.
I believe we should create an issue for your suggestion James!",2021-11-18T23:49:22Z,2,1.0,(III) Enhancement
688,https://github.com/WordPress/gutenberg/discussions/35760,2021-10-19T11:46:26Z,I'll buzz @aaronrobertshaw and @andrewserong about this discussion as well.,2022-02-21T15:34:38Z,3,,(III) Enhancement
689,https://github.com/tailwindlabs/tailwindcss/discussions/7885,2022-03-18T11:06:27Z,I just open an issue because it's seems to be a bug : #7887,2022-03-18T11:39:08Z,1,1.0,(I) Reporting a Bug
690,https://github.com/tailwindlabs/tailwindcss/discussions/7885,2022-03-18T11:06:27Z,I don't know how to close this ü§∑‚Äç‚ôÇÔ∏è,2022-03-18T11:39:56Z,2,,(I) Reporting a Bug
691,https://github.com/tailwindlabs/tailwindcss/discussions/7885,2022-03-18T11:06:27Z,More detail here: #7887,2022-03-18T19:32:00Z,3,,(I) Reporting a Bug
692,https://github.com/tailwindlabs/tailwindcss/discussions/7835,2022-03-13T13:06:10Z,"Hey! This looks like an issue with CSS minification in Nuxt removing variables that have empty values, which it shouldn‚Äôt do because as you‚Äôve seen it breaks things. I believe this was recently fixed in cssnano, so I would try updating all dependencies and if that doesn‚Äôt solve it, open an issue on Nuxt. Tailwind isn‚Äôt removing those variables, something later in the build pipeline has a bug and is doing it mistakenly.",2022-03-13T13:51:33Z,1,1.0,(II) Unrelated Repository
693,https://github.com/tailwindlabs/tailwindcss/discussions/7835,2022-03-13T13:06:10Z,Here‚Äôs a previous discussion that might be helpful: #7802 (comment),2022-03-13T13:53:47Z,2,,(II) Unrelated Repository
694,https://github.com/tailwindlabs/tailwindcss/discussions/4729,2021-06-21T00:25:48Z,"Hey!
Just tried this with a NextJS 11 project, and getting another error with Tailwind CSS v2.2:

Downgrading to v2.1.x fixes the issue as well.
I'll open an issue and we'll take a look at this üëç
EDIT: An issue is already opened for this.",2021-06-21T04:03:25Z,1,1.0,(IV) Clarification Request
695,https://github.com/tailwindlabs/tailwindcss/discussions/3833,2021-03-24T21:23:20Z,"Hey thanks for raising this! I think this is something we can improve for sure ‚Äî do you want to open this as an issue instead so we don't lose track of it? I think we can definitely preserve the HSL stuff, should be no problem.",2021-03-24T21:33:08Z,1,1.0,(IV) Clarification Request
696,https://github.com/ionic-team/capacitor/discussions/3899,2020-12-04T06:18:39Z,"The WebView on Android seems to be given less CPU and GPU power than the Google Chrome app itself. I noted this on different web apps. This is primarily the case with long scrollable views with lots of box-shadow and other GPU heavy css styles. This has been a thing for years. I have to say that I am experiencing it less and less every day. Maybe because our devices are getting faster or because we are (unwittingly maybe) taking this GPU bottleneck into consideration when designing stuff for Android.
There are dozens of StackOverflow questions about this:

https://stackoverflow.com/questions/7422427/android-webview-slow
https://stackoverflow.com/questions/31908678/android-and-his-slow-webview-hardware-accelerated-is-buggy
https://stackoverflow.com/questions/15190736/android-force-gpu-rendering-how-to-enable-and-disable
https://stackoverflow.com/questions/17059899/android-webview-hardware-acceleration-artefact-workarounds
https://stackoverflow.com/questions/11411330/android-webview-with-hardware-acceleration-show-only-white-screen

But it is not al bad, because as I mentioned before, it seems to be less and less of an issue everyday. So it can only get better from now on.
That said, our app starts within a couple of seconds and sometimes performs (much) better than on iOS. So it is probably a combination of: slow Angular code (which Angular is known for), less GPU power on Android and a lot of GPU heavy CSS styles.",2020-12-04T09:37:20Z,1,,(II) Unrelated Repository
697,https://github.com/ionic-team/capacitor/discussions/3899,2020-12-04T06:18:39Z,"flutter/flutter#52211 maybe the same issue but fixed? ""fast on iOS, fast on Android browser, slow in Android WebView"". He is also on a Galaxy device. I am not sure if this issue relates to Samsung devices.",2020-12-29T11:39:55Z,2,,(II) Unrelated Repository
698,https://github.com/ionic-team/capacitor/discussions/3899,2020-12-04T06:18:39Z,"I still did not find any reason why our app runs slow on Android, but superfast on iOS + desktop browser.
There is one strange behaviour I noticed: When I open the app, navigate to another page and press back, the transition animation is fluid. I can also repeat this and it stays fluid.
As soon as I scroll one time on the start page in any direction, no matter if vertical through the ion-content or through the horizintal sliders (build with css scroll snap, no JS), the back transition from any page is stuttering and delayed. I also replaced the ion-content with an overflow:auto div with no success. What is happening in Ionic/Capacitor/Android when I leave a page, that could cause this stutterung? There is no scroll/touch listener on my side. The ChangeDetection is handled correctly. All observables are unsubscribed when a component gets destroyed. I thought the page transition would:

animate the current page out
animate the new page (in stack with display: none) in
(animation complete here)
destroy the previous pages components

So I dont understand the cause of this stuttering. I do not have this behavior in any way on the desktop version nor the iPhone.",2021-02-02T14:29:00Z,3,,(II) Unrelated Repository
699,https://github.com/ionic-team/capacitor/discussions/3899,2020-12-04T06:18:39Z,We are experiencing a similar issue with capacitor/webview on android. We build a custom Slider which animates really smooth on IOS and desktop but has significant frame drops on android.,2021-02-02T14:50:26Z,4,,(II) Unrelated Repository
700,https://github.com/ionic-team/capacitor/discussions/3899,2020-12-04T06:18:39Z,"I'm working for years with Cordova, this time I decided to use Capacitor and I'm sad with the Android performance :( I thought stuttering of sliders had to be left and forgotten in 2014.
Currently, on Cordova + Android it works much better.
I found very comfortable and useful approach with native projects, which can be updated directly from Xcode/Android studio, but this stuttering is something terrible.
I don't know what to do, migrate to Cordova or I can expect some fix ?",2021-02-04T16:55:17Z,5,,(II) Unrelated Repository
701,https://github.com/ionic-team/capacitor/discussions/3899,2020-12-04T06:18:39Z,"I created a bug ticket and hope it helps to solve this issue.
#4187",2021-02-10T08:05:27Z,6,,(II) Unrelated Repository
702,https://github.com/ionic-team/capacitor/discussions/3899,2020-12-04T06:18:39Z,"@AE1NS Have you noticed any difference between ""Signed"" vs ""Un-Signed"" apps? For us, the un-signed app performs better. We're trying to figure out if it has something to do with In-App Billing (since that doesn't run in Un-Signed apps.)",2021-02-15T20:38:33Z,7,,(II) Unrelated Repository
703,https://github.com/ionic-team/capacitor/discussions/3899,2020-12-04T06:18:39Z,"Last month I worked on Vue app with plan to use Capacitor. I really like the concept, documentation is good too. We finished with development. App we built work flawless on web inside browser, but then when we create an Android bundle with Capacitor we were disappointed with animation and page to page transition performance.
We tweaked app in order to gain performance, we removed opacity, box-shadows, we even hide some content during transitions, use low res images, use only CSS GPU animations and so on... It was better, but still not as near as it is on web (desktop, or even Chrome mobile was running perfectly smooth).
We decided then to try same app (with optimized animation above) with Cordova, everything remains same, we just used Cordova, the result was that animation performance was significantly better. I am not sure what's the difference when it comes to WebView, but transitions are much smoother. However, Chrome for mobile is still number one.
I still think this is project with great potential, but when it comes to something like this, probably because project is young, you hit dead end.",2021-04-19T23:16:29Z,8,,(II) Unrelated Repository
704,https://github.com/ionic-team/capacitor/discussions/3899,2020-12-04T06:18:39Z,"Yes, we also experience this consistently with every app we build with Capacitor. When we install as PWA there are no performance issues - the same app bundled via Capacitor Native on Android has significant slowdowns on many devices. I can also provide a real-world example of this if any Capacitor developer find it useful.",2021-12-20T21:09:58Z,9,,(II) Unrelated Repository
705,https://github.com/ionic-team/capacitor/discussions/3899,2020-12-04T06:18:39Z,Just acknowledging that we're aware of this discussion and will discuss with the team after the holidays. Seems strange that mobile browser perf would be better since it's just using the Chrome WebView. And doubly so that Cordova would be any faster as it's using the same browser tech. I wonder if there's some option we have enabled that is causing an issue?,2021-12-21T03:05:46Z,10,,(II) Unrelated Repository
706,https://github.com/ionic-team/capacitor/discussions/3899,2020-12-04T06:18:39Z,"Personally, Apple's bone does not stop being more powerful, that's why we do not see iPhones with 16 GB Ram, each new version of iOS consumes less and less Ram, battery, the proof is the M1 chips. So it doesn't surprise me that your application takes less than 2 sec to start with an iPhone 11, the ionic + capacitor are for nothing because they rely on what already exists, of course, the size of the application counts as well as other factors, but for the moment the Apple bone is far superior to Android (I'm Team Android for info, I'm at onePlus ^^, with Linux). Then a Samsung is very crappy with their Android layer it's one of the worst of the market, next to oxygenOs for example.",2022-01-02T03:18:15Z,11,,(II) Unrelated Repository
707,https://github.com/ionic-team/capacitor/discussions/3899,2020-12-04T06:18:39Z,FYI. I've opened an issue against Android WebView to try to get a discussion started about this: https://bugs.chromium.org/p/chromium/issues/detail?id=1289741,2022-01-21T18:51:06Z,12,,(II) Unrelated Repository
708,https://github.com/ionic-team/capacitor/discussions/3899,2020-12-04T06:18:39Z,"Ok just turned off the accessibility settings all together => The lag is gone.
Thank you https://bugs.chromium.org/p/chromium/issues/detail?id=1289741#c24",2022-04-04T18:51:06Z,13,,(II) Unrelated Repository
709,https://github.com/ionic-team/capacitor/discussions/3899,2020-12-04T06:18:39Z,"@maxcodefaster Accessibility settings is a separate issue from what's being discussed here, I believe. But, what exactly did you disable? You said ""all of it"", but there are a lot of options and choices in Android Accessiblity.
That said, if any app accessibility services are enabled on Android, it will bring WebView apps to their knees, even causing ANRs and crashes. This is something that also needs to be explored, as it is a highly reproducible regression in WebView affecting any moderate to complex app. Though, even simple apps can be affected --- So this is definitely something I'd recommend everyone check for their app performance.
Definitely be sure to disable any Accessibility features you can. Even so, you may still experience performance issues and differences between Chrome PWA (which is MUCH smoother and faster, even with accessibility disabled.)
Additionally, not everyone has the luxury if disabling accessibility features, so both issues still need to be addressed.",2022-04-04T20:31:20Z,14,,(II) Unrelated Repository
710,https://github.com/ionic-team/capacitor/discussions/3899,2020-12-04T06:18:39Z,"I went into my settings app and went to ""System > Accessibility"" and had Darker (https://play.google.com/store/apps/details?id=com.mlhg.screenfilter) turned on, although not actually active and darkening my screen. Turning it off made my app significantly faster. I even did a one for one comparison loading different pages with the same build on two of the same phone models, one with darker enabled and one with it disabled, and the performance difference that it makes having it turned off was huge. So it looks like accessibility apps made be causing some kind of issue with WebView or Capacitor apps.",2022-04-04T21:09:03Z,15,,(II) Unrelated Repository
711,https://github.com/ionic-team/capacitor/discussions/3899,2020-12-04T06:18:39Z,"Yes, accessibility is one confirmed way to drastically slow down WebView apps, and it appears to be a potential regression issue in Chromium WebView. Please file a bug in the Chromium issue tracker: https://bugs.chromium.org/p/chromium/issues/list",2022-04-04T22:47:19Z,16,,(II) Unrelated Repository
712,https://github.com/ionic-team/capacitor/discussions/3899,2020-12-04T06:18:39Z,"@Smizz1609 Please add your observations & app information to the issue here: https://bugs.chromium.org/p/chromium/issues/detail?id=1289741
Thanks!",2022-04-13T15:45:17Z,17,1.0,(II) Unrelated Repository
713,https://github.com/ionic-team/capacitor/discussions/4425,2021-04-03T11:13:12Z,"This is a Capacitor bug.
To speed things up, Capacitor injects Cordova plugin files, but only do it for files in ""plugins"" folder.
userbase plugin copy a file to a node_modules folder, so it doesn't get injected, and the other plugin injected file depends on this one, since it's not injected it doesn't find the module.
I don't thin we will fix it as it would require injecting the node_modules folder and people might have other files there that are not part of Cordova plugins.
Try reporting an issue on their repository and ask if they can distribute this file from www folder instead of from node_modules
https://github.com/smallbets/userbase/blob/master/src/cordova-plugin-userbase/plugin.xml#L19",2021-04-07T17:37:35Z,1,1.0,(II) Unrelated Repository
714,https://github.com/ionic-team/capacitor/discussions/3254,2020-07-14T11:40:55Z,Currently it does not appear to be possible. You should file an issue about this.,2020-10-27T23:08:59Z,1,1.0,(I) Reporting a Bug
715,https://github.com/ionic-team/capacitor/discussions/3254,2020-07-14T11:40:55Z,"It's not possible at the moment, it has been requested on #3723",2020-10-28T11:57:40Z,2,,(I) Reporting a Bug
716,https://github.com/fomantic/Fomantic-UI/discussions/1355,2020-03-06T15:44:04Z,"This sounds better suited for a range calendar as between 2 dates?
https://fomantic-ui.com/modules/calendar.html#range",2020-03-06T15:50:40Z,1,,(I) Reporting a Bug
717,https://github.com/fomantic/Fomantic-UI/discussions/1355,2020-03-06T15:44:04Z,"Yes, but I need to have it as a slider, as used in websites like skyscanner.
(Anyway, even with calendar I do not have ways to show long labels instead of the number of the day).",2020-03-06T16:00:29Z,2,,(I) Reporting a Bug
718,https://github.com/fomantic/Fomantic-UI/discussions/1355,2020-03-06T15:44:04Z,"You can use the custom interpreted labels feature https://fomantic-ui.com/modules/slider.html#custom-interpreted-labels
See http://jsfiddle.net/L4htmsno/

",2020-03-06T16:17:48Z,3,,(I) Reporting a Bug
719,https://github.com/fomantic/Fomantic-UI/discussions/1355,2020-03-06T15:44:04Z,"Thank you for your suggestion, but I'm afraid I can't use this because I have to create a very small slider:

Can't I use tooltip in this case?",2020-03-06T16:23:15Z,4,,(I) Reporting a Bug
720,https://github.com/fomantic/Fomantic-UI/discussions/1355,2020-03-06T15:44:04Z,"Sure üòÑ
See http://jsfiddle.net/nos06d5e/
",2020-03-06T16:33:56Z,5,,(I) Reporting a Bug
721,https://github.com/fomantic/Fomantic-UI/discussions/1355,2020-03-06T15:44:04Z,"Wow, perfect! Thank you so much!",2020-03-06T16:41:38Z,6,,(I) Reporting a Bug
722,https://github.com/fomantic/Fomantic-UI/discussions/1355,2020-03-06T15:44:04Z,"Shouldn't I add an input tag like this:

As seen here?",2020-03-18T14:19:53Z,7,,(I) Reporting a Bug
723,https://github.com/fomantic/Fomantic-UI/discussions/1355,2020-03-06T15:44:04Z,The input tag is only there to show the values in the docs. To fetch the values you use the onChange callback or the get value behavior,2020-03-18T14:49:40Z,8,,(I) Reporting a Bug
724,https://github.com/fomantic/Fomantic-UI/discussions/1355,2020-03-06T15:44:04Z,"In a range slider how to get from the onChange callback the range values, instead of value of the last move? I mean the min and max value selected by the user.
In addition, since I'm wrapping this in an Angular component, do you think I can add an hidden input element to bind it to a formControl?",2020-03-18T15:31:52Z,9,,(I) Reporting a Bug
725,https://github.com/fomantic/Fomantic-UI/discussions/1355,2020-03-06T15:44:04Z,"I have edited my last post, sorry for double posting now.",2020-03-19T16:35:15Z,10,,(I) Reporting a Bug
726,https://github.com/fomantic/Fomantic-UI/discussions/1355,2020-03-06T15:44:04Z,"
In a range slider how to get from the onChange callback the range values, instead of value of the last move? I mean the min and max value selected by the user.

The onChange callback provides 3 parameters: range (= difference between firstValue and lastValue), firstValue, lastValue
",2020-03-19T17:49:49Z,11,,(I) Reporting a Bug
727,https://github.com/fomantic/Fomantic-UI/discussions/1355,2020-03-06T15:44:04Z,"Great! Thank you, I cannot find it in the documentation.",2020-03-20T15:13:13Z,12,,(I) Reporting a Bug
728,https://github.com/fomantic/Fomantic-UI/discussions/1355,2020-03-06T15:44:04Z,"Hello again, sorry for keeping post here but I have one more question.
I noticed that the onChange callback is triggered even if the slider is not moved.
Both onChange and onMove are triggered just clicking on the slider, without any values change.
How to trigger onChange only when the value are different from previous change?",2020-03-25T13:06:14Z,13,,(I) Reporting a Bug
729,https://github.com/fomantic/Fomantic-UI/discussions/1355,2020-03-06T15:44:04Z,Sounds like a bug we have to investigate. Please create a new issue for that. Thanks,2020-03-25T13:09:47Z,14,1.0,(I) Reporting a Bug
730,https://github.com/ballerina-platform/ballerina-lang/discussions/28967,2021-03-03T04:49:47Z,"@nadeeshaan +1. By a completion item kind, you mean we just need to show the completion item kind as Enum just like Function, Struct, etc? Or we need this to provide completions for EnumName.<cursor> scenarios?",2021-03-03T05:19:59Z,1,,(I) Reporting a Bug
731,https://github.com/ballerina-platform/ballerina-lang/discussions/28967,2021-03-03T04:49:47Z,"+1 for this. Is there an issue for this? If not, can you create one?",2021-03-03T15:18:40Z,2,1.0,(I) Reporting a Bug
732,https://github.com/ballerina-platform/ballerina-lang/discussions/28967,2021-03-03T04:49:47Z,"For this, will it be enough to be able to identify a constant symbol as being an enum member? For example, was thinking along the lines of introducing a new symbol kind, ENUM_MEMBER, and for enum member constant symbols, return this when kind() is called.",2021-03-16T13:06:16Z,3,,(I) Reporting a Bug
733,https://github.com/grafana/grafana/discussions/44334,2021-10-09T03:26:25Z,"after define a template name __default__.tmpl, content is

is be ok to overide.  but I do not know why ü§£",2021-10-12T11:12:45Z,1,,(IV) Clarification Request
734,https://github.com/grafana/grafana/discussions/44334,2021-10-09T03:26:25Z,"Thanks for creating this issue! We think it's missing some basic information.
Follow the issue template and add additional information that will help us replicate the problem.
For data visualization issues:

Query results from the inspect drawer (data tab & query inspector)
Panel settings can be extracted in the panel inspect drawer JSON tab

For dashboard related issues:

Dashboard JSON can be found in the dashboard settings JSON model view

For authentication, provisioning and alerting issues, Grafana server logs are useful.
Happy graphing!",2021-10-13T23:28:56Z,2,,(IV) Clarification Request
735,https://github.com/grafana/grafana/discussions/44334,2021-10-09T03:26:25Z,"I am having the same stated problem.  I want to define an alert message template that overrides at least part of the existing __default__.tmpl templates.  In my case I happen to be using the PagerDuty contact point type and a notification policy that groups by 'alertname'.
I created a template named 'default title' with the data:
{{ define ""default.title"" }}{{ .GroupLabels.alertname }}{{ end }}
This will randomly function correctly only a small percentage of the time, otherwise the original default is emitted.
I created another template that redefines __text_alert_list and 1 of my 2 Grafana instances uses it while the other does not.  This happens 100% of the time.
I have attempted to influence the template evaluation by changing the names which are then propagated to the filesystem which I assume should influence the order provided by filepath.Glob() reached via 
I modified my template names to be lower case, naturally sorting after the __default.tmpl file.  Doing this has produced reliable results on 1 node for 1 template, and the other node never changed.  I have been unable to determine why the other template is not taking effect 90+% of the time.
This is Grafana 8.2.1 deployed via kube-prometheus-stack 19.2.2 in a GKE cluster.  The 2 Grafana replicas utilize a Cloud SQL instance of PostgreSQL 12 via [database] and there are no other HA considerations (Neither Live, nor ha_* under unified_alerting).  unified_alerting is enabled and being used for the entire alert config.  PagerDuty is deduping the alerts sent from each instance via dedup_key.
The above is accurate, but I can provide copypasta of config or resulting events if you want.",2021-10-20T22:22:56Z,3,,(IV) Clarification Request
736,https://github.com/grafana/grafana/discussions/44334,2021-10-09T03:26:25Z,"
after define a template name __default__.tmpl, content is

is be ok to overide. but I do not know why ü§£

@hanjm, what do you mean by this? Did you find a workaround? I don't understand this comment. Can you please explain a bit more?",2022-01-12T13:09:57Z,4,,(IV) Clarification Request
737,https://github.com/grafana/grafana/discussions/44334,2021-10-09T03:26:25Z,"This seems to be a request to add templating to the webhook contact point, which is not possible at the moment. I'm making this a feature request.",2022-01-21T16:55:43Z,5,,(IV) Clarification Request
738,https://github.com/grafana/grafana/discussions/44334,2021-10-09T03:26:25Z,"This is the same behavior for me...I am trying to update the subject of the email being sent out. I created 2 templates __subject and default.title with the same content where I am changing it to some different Label to make more sense, but this sometimes works and breaks with a small change in grafana console or on restart of grafana.
It's been 2 weeks I am running around this what is causing this to break, but I didn't find any clue so far to find that or How to make it more persistent change.
{{ define ""__subject"" }}[{{ .CommonLabels.Severity | toUpper }}{{ if eq .Status ""firing"" }}:{{ .Alerts.Firing | len }}{{ end }}] - {{ .CommonLabels.alertname }} - {{ .CommonLabels.JOB}}- {{ .CommonLabels.host}}{{ end }}",2022-02-11T21:38:52Z,6,,(IV) Clarification Request
739,https://github.com/grafana/grafana/discussions/44334,2021-10-09T03:26:25Z,"Quick update: we are aware that it's currently is not possible to change the payload of the webhook. We will investigate what changes need to be done.
@vkumar85 regarding the problems with the E-Mails, which is currently not part of this discussion, feel free to create an issue for that.",2022-03-18T16:48:08Z,7,1.0,(IV) Clarification Request
